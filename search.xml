<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NestJS学习</title>
      <link href="/2023/11/28/NestJS/"/>
      <url>/2023/11/28/NestJS/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-简介"><a href="#NestJS-简介" class="headerlink" title="NestJS 简介"></a>NestJS 简介</h1><p><strong>Nestjs 是一个用于构建高效的可扩展的基于Nodejs服务端 应用程序开发框架</strong></p><p>完全支持typescript 并结合的<strong>AOP面向切面编程</strong>的方式</p><p><strong>Spring MVC</strong> 风格 其中有依赖注入和IOC控制反转</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a><strong>IOC</strong></h2><p>Inversion of Control 字面意思是<strong>控制反转</strong>，具体的定义是高层模块不应该依赖底层模块，二者都应该依赖其抽象，抽象不应该依赖细节</p><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a><strong>DI</strong></h2><p>依赖注入（Dependency Injection）其实和IoC是同根生，这两个原本就是一个东西，只不过由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系）。 类A依赖类B的常规表现是在A中使用B的instance。</p><p>未使用控制反转和依赖注入之前的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;月晕&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强耦合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">new</span> <span class="title function_">A</span>().<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">new</span> <span class="title function_">A</span>().<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B中代码的实验是需要依赖A的 两者的代码耦合度非常高。当两者之间的业务逻辑复杂程度增加的情况下 维护成本与代码可读性都会增加 并且会很难在引入额外的模块进行功能扩展</p><p>为了解决上面的问题可以使用<strong>IOC</strong>容器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;月晕&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">  <span class="attr">mo</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mo</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params">key: <span class="built_in">string</span>, mo: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mo</span>[key] = mo</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">mo</span>[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="keyword">new</span> <span class="title class_">Container</span>()</span><br><span class="line">container.<span class="title function_">provide</span>(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">new</span> <span class="title function_">A</span>(<span class="string">&#x27;月晕&#x27;</span>))</span><br><span class="line">container.<span class="title function_">provide</span>(<span class="string">&#x27;c&#x27;</span>, <span class="keyword">new</span> <span class="title function_">A</span>(<span class="string">&#x27;月晕52&#x27;</span>))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = container.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">c</span> = container.<span class="title function_">get</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是写了一个中间件，来收集依赖，主要是为了解耦，减少维护成本</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p><strong>装饰器是一种特殊的类型声明 可以附加在类、方法、属性、参数上面</strong></p><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p><strong>主要是通过@符号来添加装饰器</strong><br>会自动把class的构造函数传入到装饰器的第一个参数 <strong>target</strong> 然后通过<code>prototype</code>可以自定义添加属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">doc</span>: <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span><br><span class="line">  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@doc</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// doc(yueyun)</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">yueyun1</span>: <span class="built_in">any</span> = <span class="keyword">new</span> <span class="title function_">yueyun</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yueyun1.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><p>会返回两个参数 <strong>原型对象</strong> and <strong>属性的名称</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">doc</span>: <span class="title class_">PropertyDecorator</span> = <span class="function">(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="meta">@doc</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><p>会返回三个参数 <strong>原型对象</strong> <strong>方法的名称</strong> <strong>属性描述符[可写对应writable | 可枚举对应enumerable | 可配置对应configurable]</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">doc</span>: <span class="title class_">MethodDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  key: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  descriptor: <span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, key, descriptor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@doc</span></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性装饰器-1"><a href="#属性装饰器-1" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><p>会返回三个参数 <strong>原型对象</strong> <strong>方法的名称</strong> <strong>参数的位置(从0开始)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">currency</span>: <span class="title class_">ParameterDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  key: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  index: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, key, index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params">name: <span class="built_in">string</span>, <span class="meta">@currency</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个GET请求"><a href="#实现一个GET请求" class="headerlink" title="实现一个GET请求"></a>实现一个GET请求</h3><p><strong>定义装饰器</strong><br>使用装饰器工厂<br>定义 descriptor 的类型 通过 descriptor描述符里面的value 把axios的结果返回给当前使用装饰器的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 函数柯里化 在包装了一层</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Get</span> = (<span class="attr">url</span>: <span class="built_in">string</span>): <span class="function"><span class="params">MethodDecorator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">any</span>, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;Get decorator&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> func = descriptor.<span class="property">value</span></span><br><span class="line">    axios</span><br><span class="line">      .<span class="title function_">get</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">func</span>(res.<span class="property">data</span>, &#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">          <span class="attr">success</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">func</span>(err, &#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">          <span class="attr">success</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Controller class&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;https://api.apiopen.top/api/getHaoKanVideo?page=0&amp;size=10&#x27;</span>)</span><br><span class="line">  <span class="title function_">getList</span>(<span class="params">res: <span class="built_in">any</span>, status: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, status)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-cli-使用"><a href="#nestJS-cli-使用" class="headerlink" title="nestJS&#x2F;cli 使用"></a>nestJS&#x2F;cli 使用</h1><p>项目的开发离不开工程化的部分，比如创建项目、编译构建、开发时的HRM等</p><p>Nest项目自然也是一样，所以它在<code>@nestjs/cli</code>这个包里提供了 nest 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn install -g @nestjs/cli</span><br><span class="line">nest new &lt;your project name&gt;</span><br></pre></td></tr></table></figure><p>如果想更新版本则使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g @nestjs/cli</span><br></pre></td></tr></table></figure><p>可以使用<code>nest -h</code> 去查看提供了什么命令</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104152854282.png" alt="image-20231104152854282"></p><p>有创建项目的<code>nest new</code>，有创建代码的 <code>nest generate</code>，还有编译构建的<code>nest build</code>，开发模式的<code>nest start</code>等</p><h2 id="nest-new"><a href="#nest-new" class="headerlink" title="nest new"></a><code>nest new</code></h2><p>首先使用<code>nest new --help</code>看看有什么选项</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104153515535.png" alt="image-20231104153515535"></p><p><code>--skip-get || --skip-install</code>: 就是跳过git 初始化和npm install</p><p><code>--package-manager</code>: 包管理器</p><p><code>--language</code>: 语言 </p><p>等等等</p><h2 id="nest-generate"><a href="#nest-generate" class="headerlink" title="nest generate"></a><code>nest generate</code></h2><p>生成特定的代码</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104153941334.png" alt="image-20231104153941334"></p><p>当然也有一些使用的配置项</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104154145969.png" alt="image-20231104154145969"></p><h2 id="nest-build"><a href="#nest-build" class="headerlink" title="nest build"></a><code>nest build</code></h2><p>用来构建项目 会在dist目录下生成编译后的代码</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104154337390.png" alt="image-20231104154337390"></p><p><code>--webpack</code> 和 <code>--tsc</code>是指定用什么来编译，默认是tsc编译</p><p>tsc不做打包,webpack会做打包,两种方式都可以</p><p>这些选项都可以在<code>nest-cli.json</code>配置</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>nest在@nestjs&#x2F;cli包里提供了nest命令，可以用来做很多事情</p><ul><li>生成项目结构和各种代码</li><li>编译代码</li><li>监听文件变动自动编译</li><li>打印项目依赖信息</li></ul><p>也就是这些</p><ul><li>nest new 创建新项目</li><li>nest generate 生成各种代码</li><li>nest build 使用tsc或webpack构建</li><li>nest start 启动开发服务 </li><li>nest info 打印node 包 nest包等依赖信息</li></ul><p>很多配置都可以在nest-cli.json里配置，比如<strong>generateOptions</strong>、<strong>compilerOptions</strong> 等</p><h1 id="nestJS控制器"><a href="#nestJS控制器" class="headerlink" title="nestJS控制器"></a>nestJS控制器</h1><p>Controller Request (获取传递过来的参数)</p><table><thead><tr><th>装饰器</th><th>参数</th></tr></thead><tbody><tr><td>@Request()</td><td>req</td></tr><tr><td>@Response()</td><td>res</td></tr><tr><td>@Next()</td><td>next</td></tr><tr><td>@Session()</td><td>req.session</td></tr><tr><td>@Param(key?: string)</td><td><code>req.params</code>&#x2F;<code>req.params[key]</code> (指的是动态参数&#x2F;:id)</td></tr><tr><td>@Body(key?: string)</td><td><code>req.body</code>&#x2F;<code>req.body[key]</code></td></tr><tr><td>@Query(key?: string)</td><td><code>req.query</code>&#x2F;<code>req.query[key]</code> (传入数据时的params)</td></tr><tr><td>@Headers(name?: string)</td><td><code>req.headers</code>&#x2F;<code>req.headers[name]</code></td></tr><tr><td>@HttpCode</td><td>Code</td></tr></tbody></table><h2 id="获取Get参数"><a href="#获取Get参数" class="headerlink" title="获取Get参数"></a>获取Get参数</h2><p>可以使用Request装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Controller</span>,</span><br><span class="line">  <span class="title class_">Get</span>,</span><br><span class="line">  <span class="title class_">Post</span>,</span><br><span class="line">  <span class="title class_">Body</span>,</span><br><span class="line">  <span class="title class_">Patch</span>,</span><br><span class="line">  <span class="title class_">Param</span>,</span><br><span class="line">  <span class="title class_">Delete</span>,</span><br><span class="line">  <span class="title class_">Request</span>,</span><br><span class="line">  <span class="title class_">Query</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DemoService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Headers</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common/decorators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">findAll</span>(<span class="params"><span class="meta">@Request</span>() req: <span class="built_in">any</span>, <span class="meta">@Query</span>() query: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span> === query)</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">name</span> === <span class="string">&#x27;月晕&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="title class_">Msg</span>: <span class="string">&#x27;月晕&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="title class_">Msg</span>: <span class="string">&#x27;你不是本人&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Post获取参数"><a href="#Post获取参数" class="headerlink" title="Post获取参数"></a>Post获取参数</h2><p>也能使用<strong>Reques</strong>装饰器或者<strong>Body</strong>装饰器也可以直接读取key值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>(<span class="string">&#x27;name&#x27;</span>) body: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="title class_">Msg</span>: <span class="string">&#x27;创建成功&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>可以使用<strong>Request</strong>装饰器 或者 <strong>Param</strong>装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">     <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">      findId (<span class="meta">@Param</span>() param) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(param)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">code</span>:<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取header信息"><a href="#读取header信息" class="headerlink" title="读取header信息"></a>读取header信息</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">     <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">      findId (<span class="meta">@Headers</span>() header) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(header)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">code</span>:<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">     <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  <span class="meta">@HttpCode</span>(<span class="number">500</span>)</span><br><span class="line">  findId (<span class="meta">@Headers</span>() header) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">code</span>:<span class="number">500</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-Session"><a href="#nestJS-Session" class="headerlink" title="nestJS Session"></a>nestJS Session</h1><p>session 是服务器 为每个用户的浏览器创建的一个会话对象 这个session 会记录到 浏览器的 cookie 用来区分用户</p><p>我们使用的是nestjs 默认框架express 他也支持express 的插件 所以我们就可以安装express的session</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add express-session -S</span><br><span class="line">yarn add @types/express-session -D</span><br></pre></td></tr></table></figure><p>然后在main.ts 引入 通过app.use 注册session</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> session <span class="keyword">from</span> <span class="string">&#x27;express-session&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>())</span><br></pre></td></tr></table></figure><p><strong>参数配置详解</strong></p><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>secret</td><td>生成服务端session 签名 可以理解为加盐</td></tr><tr><td>name</td><td>生成客户端cookie 的名字 默认 connect.sid</td></tr><tr><td>cookie</td><td>设置返回到前端 key 的属性，默认值为{ path: ‘&#x2F;’, httpOnly: true, secure: false, maxAge: null }。</td></tr><tr><td>rolling</td><td>在每次请求时强行设置 cookie，这将重置 cookie 过期时间(默认:false)</td></tr></tbody></table><p>nestJS配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VersioningType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> session <span class="keyword">from</span> <span class="string">&#x27;express-session&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  app.<span class="title function_">enableVersioning</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">VersioningType</span>.<span class="property">URI</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123; <span class="attr">secret</span>: <span class="string">&quot;YueYun&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;yueyun.session&quot;</span>, <span class="attr">rolling</span>: <span class="literal">true</span>, <span class="attr">cookie</span>: &#123; <span class="attr">maxAge</span>: <span class="literal">null</span> &#125; &#125;))</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><h2 id="验证码案例"><a href="#验证码案例" class="headerlink" title="验证码案例"></a>验证码案例</h2><p>前端： Vue3 ts element-plus fetch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div class=&quot;wraps&quot;&gt;</span><br><span class="line">          &lt;el-form :label-position=&quot;labelPosition&quot; label-width=&quot;100px&quot; :model=&quot;formLabelAlign&quot; style=&quot;max-width: 460px&quot;&gt;</span><br><span class="line">               &lt;el-form-item label=&quot;账号&quot;&gt;</span><br><span class="line">                    &lt;el-input v-model=&quot;formLabelAlign.name&quot; /&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">               &lt;el-form-item label=&quot;密码&quot;&gt;</span><br><span class="line">                    &lt;el-input type=&quot;password&quot; v-model=&quot;formLabelAlign.password&quot; /&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">               &lt;el-form-item label=&quot;验证码&quot;&gt;</span><br><span class="line">                    &lt;div style=&quot;display:flex&quot;&gt;</span><br><span class="line">                         &lt;el-input  v-model=&quot;formLabelAlign.code&quot; /&gt;</span><br><span class="line">                         &lt;img @click=&quot;resetCode&quot; :src=&quot;codeUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">               &lt;el-form-item&gt;</span><br><span class="line">                    &lt;el-button @click=&quot;submit&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-form&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">     </span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; onMounted, reactive, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"> </span><br><span class="line">const codeUrl = ref&lt;string&gt;(&#x27;/api/user/code&#x27;)</span><br><span class="line"> </span><br><span class="line">const resetCode = () =&gt; codeUrl.value = codeUrl.value + &#x27;?&#x27; + Math.random()</span><br><span class="line"> </span><br><span class="line">const labelPosition = ref&lt;string&gt;(&#x27;right&#x27;)</span><br><span class="line"> </span><br><span class="line">const formLabelAlign = reactive(&#123;</span><br><span class="line">     name: &quot;&quot;,</span><br><span class="line">     password: &quot;&quot;,</span><br><span class="line">     code: &quot;&quot;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">const submit = async () =&gt; &#123;</span><br><span class="line">     await fetch(&#x27;/api/user/create&#x27;, &#123;</span><br><span class="line">          method: &quot;POST&quot;,</span><br><span class="line">          body: JSON.stringify(formLabelAlign),</span><br><span class="line">          headers: &#123;</span><br><span class="line">               &#x27;content-type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;).then(res =&gt; res.json())</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">     </span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">     padding: 0;</span><br><span class="line">     margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.wraps &#123;</span><br><span class="line">     display: flex;</span><br><span class="line">     justify-content: center;</span><br><span class="line">     align-items: center;</span><br><span class="line">     height: inherit;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">html,</span><br><span class="line">body,</span><br><span class="line">#app &#123;</span><br><span class="line">     height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>后端nestjs 验证码插件 svgCaptcha</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add svg-captcha -S</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span>, <span class="title class_">Param</span>, <span class="title class_">Request</span>, <span class="title class_">Query</span>, <span class="title class_">Headers</span>, <span class="title class_">HttpCode</span>, <span class="title class_">Res</span>, <span class="title class_">Req</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-user.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UpdateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/update-user.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> svgCaptcha <span class="keyword">from</span> <span class="string">&#x27;svg-captcha&#x27;</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService</span>) &#123; &#125;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">  <span class="title function_">createCaptcha</span>(<span class="params"><span class="meta">@Req</span>() req, <span class="meta">@Res</span>() res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> captcha = svgCaptcha.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">size</span>: <span class="number">4</span>,<span class="comment">//生成几个验证码</span></span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">50</span>, <span class="comment">//文字大小</span></span><br><span class="line">      <span class="attr">width</span>: <span class="number">100</span>,  <span class="comment">//宽度</span></span><br><span class="line">      <span class="attr">height</span>: <span class="number">34</span>,  <span class="comment">//高度</span></span><br><span class="line">      <span class="attr">background</span>: <span class="string">&#x27;#cc9966&#x27;</span>,  <span class="comment">//背景颜色</span></span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">code</span> = captcha.<span class="property">text</span> <span class="comment">//存储验证码记录到session</span></span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;image/svg+xml&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(captcha.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;create&#x27;</span>)</span><br><span class="line">  <span class="title function_">createUser</span>(<span class="params"><span class="meta">@Req</span>() req, <span class="meta">@Body</span>() body</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>.<span class="property">code</span>, body)</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">code</span>.<span class="title function_">toLocaleLowerCase</span>() === body?.<span class="property">code</span>?.<span class="title function_">toLocaleLowerCase</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;验证码正确&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;验证码错误&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-提供者"><a href="#nestJS-提供者" class="headerlink" title="nestJS 提供者"></a>nestJS 提供者</h1><h2 id="Proveders"><a href="#Proveders" class="headerlink" title="Proveders"></a>Proveders</h2><p>Provides 是 Nest 的一个基本概念 许多基本的Nest类可能被视为 <strong>provider-service、repository、factory、helper</strong> 等，都可以通过<strong>constructor</strong> 注入依赖关系，这就意味着对象可以彼此创建各种关系 并且连接对象实例的功能在很大程度上可以委托给nest的运行时系统。Provider只是一个用@Injectable() 装饰器注释的类</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>module 引入 service 在 providers 注入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Module</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserSerice</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserController</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">    <span class="attr">controllers</span>: [<span class="title class_">UserService</span>]</span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">UserService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>在Controller 层就能使用注入好的service</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义名称"><a href="#自定义名称" class="headerlink" title="自定义名称"></a>自定义名称</h3><p>基本用法其实上是一种语法糖</p><p>全称是下面这样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Yueyun&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>自定义名称之后 需要用对应的<strong>Inject</strong>取</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Inject</span>(<span class="string">&#x27;Yueyun&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义注入值"><a href="#自定义注入值" class="headerlink" title="自定义注入值"></a>自定义注入值</h3><p>通过<strong>useValue</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Yueyun&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;JD&quot;</span>,</span><br><span class="line">    <span class="attr">useValue</span>: [<span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PDD&#x27;</span>, <span class="string">&#x27;JD&#x27;</span>]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;Yueyun&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece,</span></span><br><span class="line"><span class="params">        <span class="meta">@Inject</span>(<span class="string">&#x27;JD&#x27;</span>) <span class="keyword">private</span> shopList:<span class="built_in">string</span>[]</span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="title function_">findAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findAll</span>() + <span class="variable language_">this</span>.<span class="property">shopList</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>如果服务 之间有相互依赖 或者逻辑处理 可以使用useFactory</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService2</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService3</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service3&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Xiaoman&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;JD&quot;</span>,</span><br><span class="line">    <span class="attr">useValue</span>: [<span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PDD&#x27;</span>, <span class="string">&#x27;JD&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="title class_">UserService2</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Test&quot;</span>,</span><br><span class="line">    <span class="attr">inject</span>: [<span class="title class_">UserService2</span>],</span><br><span class="line">    <span class="title function_">useFactory</span>(<span class="params">UserService2: UserService2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService3</span>(<span class="title class_">UserService2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;Yueyun&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece,</span></span><br><span class="line"><span class="params">        <span class="meta">@Inject</span>(<span class="string">&#x27;JD&#x27;</span>) <span class="keyword">private</span> shopList:<span class="built_in">string</span>[],</span></span><br><span class="line"><span class="params">        <span class="meta">@Inject</span>(<span class="string">&#x27;Testt&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> Test:<span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="title function_">findAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findAll</span>() + <span class="variable language_">this</span>.<span class="property">shopList</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="title function_">findAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findAll</span>() + <span class="variable language_">this</span>.<span class="property">Test</span>.<span class="title function_">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h3><p>useFactory 返回一个promise 或者其他异步操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService2</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService3</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service3&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Xiaoman&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;JD&quot;</span>,</span><br><span class="line">    <span class="attr">useValue</span>: [<span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PDD&#x27;</span>, <span class="string">&#x27;JD&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="title class_">UserService2</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Test&quot;</span>,</span><br><span class="line">    <span class="attr">inject</span>: [<span class="title class_">UserService2</span>],</span><br><span class="line">    <span class="title function_">useFactory</span>(<span class="params">UserService2: UserService2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService3</span>(<span class="title class_">UserService2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;sync&quot;</span>,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">useFactory</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">r</span>(<span class="string">&#x27;sync&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-模块"><a href="#nestJS-模块" class="headerlink" title="nestJS 模块"></a>nestJS 模块</h1><h2 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块@Module"></a>模块@Module</h2><p>每个Nest应用程序至少有一个模块，即根模块 ，根模块是Nest开始安排应用程序树的地方 事实上，根模块可能是应用程序中唯一的模块 特别是当应用程序很小的时候，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的<strong>功能</strong></p><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>当使用<code>nest g res user</code>创建一个CURD模板的时候 nestjs会自动帮我们引入模块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DemoModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo/demo.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">DemoModule</span>, <span class="title class_">UserModule</span>],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="共享模块"><a href="#共享模块" class="headerlink" title="共享模块"></a>共享模块</h3><p>例如user的Service想暴露给其他模块使用就可以使用exports 导出该服务</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">  <span class="comment">// 导出</span></span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">UserService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>由于App.modules 已经引入该模块 就可以直接使用user模块的Service</p><h1 id="NestJS-调试"><a href="#NestJS-调试" class="headerlink" title="NestJS 调试"></a>NestJS 调试</h1>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> NestJS </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理</title>
      <link href="/2023/11/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2023/11/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><h2 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a><strong>浏览器的进程模型</strong></h2><h3 id="何为进程"><a href="#何为进程" class="headerlink" title="何为进程"></a>何为进程</h3><p>程序运行需要它自己的专属的内存空间 可以简单的把这块内存空间理解为进程<br>每个应用至少有一个进程，进程之间相互独立，即使通信 需要同意</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/brwose_1.jpg" alt="图片1"></p><h3 id="何为线程"><a href="#何为线程" class="headerlink" title="何为线程"></a>何为线程</h3><p>有了进程之后，就可以运行程序代码了<br> 运行代码的 <strong>容器</strong>  称之为 <strong>线程</strong><br> 一个进程至少有一个线程 所以在进程开启后会自动创建一个线程来运行代码 该线程称之为主线程<br> 如果程序需要同时执行多块代码，主线程就会开启更多的线程来执行代码，所以一个进程总可以包含多个线程</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse2.jpg"></p><h3 id="浏览器有哪些进程和线程"><a href="#浏览器有哪些进程和线程" class="headerlink" title="浏览器有哪些进程和线程"></a>浏览器有哪些进程和线程</h3><p>浏览器内部工作复杂，为了避免相互影响，当启动浏览器后会自动开启多个进程(如：浏览器进程、网络进程、渲染进程)</p><p>其中主要的线程有：  </p><ul><li>浏览器进程<br>主要负责界面显示、用户交互、子进程管理、浏览器进程内部会启动多个线程处理不同的任务</li><li>网络进程<br>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务  </li><li><strong>渲染进程</strong><br>渲染进程启动后，会开启一个渲染主线程，主线程负责执行 <code>HTML、css、JS</code>代码，默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同标签页之间的不相互影响</li></ul><h2 id="渲染主线程是如何工作的"><a href="#渲染主线程是如何工作的" class="headerlink" title="渲染主线程是如何工作的"></a><strong>渲染主线程是如何工作的</strong></h2><p>渲染主线程是浏览器中最繁忙的线程，需要处理的任务包括但不限于</p><ul><li>解析HTML、CSS</li><li>计算样式，布局</li><li>处理图层</li><li>执行全局JS代码</li><li>执行事件处理函数和一些回调函数</li><li>…</li></ul><blockquote><p>为什么渲染进程不使用多个线程来处理这些事情？</p></blockquote><p>主线程执行的时候该 如何调度任务？</p><p><strong>排队：</strong> 即 事件循环(<strong><code>event loop</code></strong>) 使用消息队列来处理(<strong><code>message queue</code></strong>)</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse3.jpg"></p><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在，如果有就取出第一个任务执行，执行完一个后进入下一次循环如果没有则进入休眠状态</li><li>其他所有线程(包括其他进程的线程)可以随时向消息队列添加任务，新任务会加消息队列的末尾，在添加新任务的时，如果主状态是休眠状态，则会将其唤醒以继续循环拿任务</li></ol><p>整个过程被称之为 事件循环 (消息循环)</p><h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>代码执行的过程中会遇到一些<strong>无法立即执行的任务</strong> 比如:  </p><ul><li>计时完成后需要执行的任务 – <code>setTimeout</code>、<code>setInterval</code></li><li>网络通信完成后需要执行的任务 – <code>XHR</code>、<code>FETCH</code></li><li>用户操作后执行的任务 – <code>addEventListener</code></li></ul><p>如果让渲染主进程等待这些任务的时机到达，就会导致主线程长期处于<strong>阻塞</strong>状态从而导致浏览器<strong>卡死</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse4.png"></p><p><strong>渲染主线程承担着极其重要的工作,无论如何都不能阻塞</strong></p><p>因此浏览器选择<strong>异步</strong>来解决这个问题<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse5.png"></p><p>使用异步的方式，渲染主线程永不会阻塞</p><details class="folding-tag" cyan><summary> 如何理解`JS`的异步？ </summary>              <div class='content'>              <p><code>JS</code>是一门单线程的语言,这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个<br> 而渲染主线程承担着很多的工作 比如 渲染<code>html、css</code> 执行<code>js</code>等<br> 如果采用同步的方式就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行<br> 这样一来 一方面会导致繁忙的主线程效率低，另一方面导致页面无法更新，用户体验不好<br> 所以浏览器采用异步的方式来避免，具体做法是当某些任务发送时，比如计算器、网络请求、事件监听、主线程将任务交给其他线程去处理。自身立即结束任务的执行，转而执行后面的代码，当其他线程完成时，将事先传递的回调函数包装成任务，加入消息队列的末尾排队，等待主线程调度执行<br> 在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行</p>              </div>            </details><h3 id="JS为何会阻碍渲染"><a href="#JS为何会阻碍渲染" class="headerlink" title="JS为何会阻碍渲染"></a><code>JS</code>为何会阻碍渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Megumi&lt;/h1&gt;</span><br><span class="line">  &lt;button&gt; CLICK ME&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const title = document.querySelector(&#x27;h1&#x27;);</span><br><span class="line">    const button = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">    const delay = (duration) =&gt; &#123;</span><br><span class="line">      const start = Date.now();</span><br><span class="line">      while (Date.now() - start &lt; duration) &#123;</span><br><span class="line">        // do nothing</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    button.addEventListener(&#x27;click&#x27;, event =&gt; &#123;</span><br><span class="line">      title.innerHTML = &#x27;EXPLOSION!&#x27;;</span><br><span class="line">      delay(5000)</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>点击按钮会卡5s 后才会重新绘制</strong></p><h3 id="任务优先级"><a href="#任务优先级" class="headerlink" title="任务优先级"></a>任务优先级</h3><p>任务没有优先级 在消息队列中先进先出</p><p>但是<strong>消息队列</strong>是有优先级的<br>w3c的最新解释：  </p><ul><li>每一个任务都有任务类型，<strong>同一个类型的任务必须在一个队列</strong>，不同类型的任务可以分属于不同的队列，在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行 (<strong><code>microtask queue</code></strong>)</li></ul><blockquote><p>随着浏览器的复杂度提升，<code>W3C</code>不在使用宏队列的说法</p></blockquote><p>在目前 <strong>chrom</strong>的实现中,至少包含下面的队列:  </p><ul><li>延时队列：用于存放计时器到达过的回调任务，优先级 中</li><li>交互队列：用于存放用户操作后产生的事件处理任务 优先级 高</li><li>微队列：用户存放需要最快执行的任务，优先级 最高</li></ul><blockquote><p>添加任务到微队列的主要方式是使用 Promise MutationObserver</p><p>例如  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即把一个函数添加到微队列</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(函数)</span><br></pre></td></tr></table></figure></blockquote><details class="folding-tag" yellow><summary> `JAVASCRIPT`的事件循环 </summary>              <div class='content'>              <p>事件循环又叫消息循环,是浏览器渲染主线程的工作方式<br> 在<code>Chrome</code>的源码中,会开启一个不会结束的<code>for</code>循环,每次循环从消息队列中取出第一个任务执行,而其他线程只需要在合适的时候将任务加入到队列末尾即可<br> 过去简单的把消息队列分为宏任务和微任务 这种说法已经不能满足浏览器的复杂性 取而代之的是一种更加灵活多变的处理方式<br> 根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列，不同任务队列有不同的优先级 再一次事件循环中，由浏览器自行决定那一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级 必须优先调度执行</p>              </div>            </details><details class="folding-tag" red><summary> `JS`中的计时器能做到精确计时吗？为什么？ </summary>              <div class='content'>              <p>不能，因为</p><ul><li>计算机硬件没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身就会有偏差，JS是调用的操作系统的函数</li><li>按照W3C的标准，如果嵌套层级超过5层，则会有4毫秒的最少事件</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲的时去运行</li></ul>              </div>            </details><h1 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h1><p><strong>渲染时间点</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse6.png"></p><p>当浏览器的网络线程收到<code>HTML</code>文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列<br>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程</p><p>整个渲染的流程分为多个阶段，分别是：<br><strong>HTML解析</strong> ——&gt; <strong>样式计算</strong> ——&gt; <strong>布局</strong>——&gt; <strong>分层</strong>——&gt;<strong>绘制</strong>——&gt;<strong>分块</strong>——&gt;<strong>光栅化</strong>——&gt;<strong>画</strong></p><p>每个阶段都有明确的输入和输出，上一个阶段的输出会成为下一个阶段的输入<br>这样，整个渲染流程就形成了一套组织严密的生产流水线</p><h2 id="1-解析HTML-Parse-HTML"><a href="#1-解析HTML-Parse-HTML" class="headerlink" title="1. 解析HTML - Parse HTML"></a>1. 解析HTML - Parse HTML</h2><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse7.png"></p><p><strong>Document Object Modal</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse8.png"></p><p><strong>CSS Object Modal</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse9.png"></p><p>渲染的第一步是解析<strong>HTML</strong>  解析过程中遇到<strong>CSS</strong>解析遇到<strong>JS</strong>执行<strong>JS</strong> 为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载HTML中的外部CSS文件和外部的JS文件</p><p>如果主线程解析到link位置，此时外部的CSS文件还没有下载解析好，主线程不会等待，继续解析后续的HTML，这是因为下载和解析CSS的工作是在预解析线程中进行的，这就是CSS不会阻塞HTML解析的根本原因</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse10.png"></p><p>如果主线程遇到JS时必须暂停一切的任务，等待下载执行完后才能继续 解析线程可以分担一点下载JS的任务  <img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse11.png"></p><p>主线程遇到<code>script</code>位置，会停止解析HTML,转而等待JS文件下载好，并将全局代码解析执行完成后，才继续解析HTML。这是因为JS代码的执行过程可能会修改当前的DOM树，所以DOM树的生成必须暂停，这就是JS会阻塞HTML解析的根本原因<br>在第一步完成后 会得到DOM树和CSSOM树 浏览器的默认样式、内部样式、外部样式、行内样式会包含在CSSOM树中</p><h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2. 计算"></a><strong>2. 计算</strong></h2><p>主线程会遍历得到的DOM树，依次为树中的每个节点计算出它的最终样式，称之为 <strong>Computed Style</strong></p><p>在这一过程中 很多预设值会变成绝对值 比如 RED 会变成 <code>rgb(255,0,0)</code> 相对单位会变成绝对单位 比如 em 会变成px</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse12.png"></p><p>这一步完成后会得到一棵带样式的DOM树</p><h2 id="3-布局"><a href="#3-布局" class="headerlink" title="3. 布局"></a><strong>3. 布局</strong></h2><p>布局阶段会依次遍历DOM树的每一个节点,计算每一个节点的几何信息，例如节点的高度，相对包含块的位置</p><p>大部分的时候 DOM 树和布局树并非一一对应</p><p>比如<code>display: none</code>的节点没有几何信息 因此不会生成到布局树 又比如使用了伪元素选择器 虽然<strong>DOM</strong>树中不存在这些伪元素节点 但它们拥有几何信息 所以会生成到布局树中 还有匿名行盒 匿名快盒 等 会导致无法一一对应</p><h2 id="4-分层"><a href="#4-分层" class="headerlink" title="4.分层"></a><strong>4.分层</strong></h2><p>主线程会使用一套复杂的策略对整个布局树进行分层</p><p>分层的好处在于 将来某一个层改变后、仅会对该层进行后续处理 从而提高效率</p><p>滚动条 推叠上下文 <code>transfrom</code> <code>opacity</code>等样式都会影响分层的结果 可以通过<code>will-change</code>属性更大程序的影响分层结果</p><h2 id="5-绘制"><a href="#5-绘制" class="headerlink" title="5.绘制"></a><strong>5.绘制</strong></h2><p>主线程会为每个层单独产生绘制指令集 用于描述这一层的内容该如何画出来<br>完成绘制之后，主线程将每个图层的绘制信息提交给合成线程，剩余的工作将由合成线程完成<img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse13.png"></p><h2 id="6-分块"><a href="#6-分块" class="headerlink" title="6.分块"></a><strong>6.分块</strong></h2><p>将每层分为多个小区域<br>分块的工作是交给多个线程同时进行的<br>合成线程首先对每个图层进行分块，将其划分为更多的小区域<br>会从线程池中拿取多个线程来完成分块工作</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse14.png"></p><h2 id="7-光栅化"><a href="#7-光栅化" class="headerlink" title="7.光栅化"></a><strong>7.光栅化</strong></h2><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse15.png"></p><p>合成线程会将信息交给GPU进程 以极高的速度完成光栅化<br>GPU进程会开启多个线程来完成光栅化 并且优先处理靠近视口区域的块<br>光栅化的结果 就是一块一块的位图</p><h2 id="8-画"><a href="#8-画" class="headerlink" title="8.画"></a><strong>8.画</strong></h2><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse16.png"></p><p>合成线程拿到每个层、每个块的位图后、生成一个个指引(quad)信息<br> 指引会标识出每个位图应该画到屏幕的那个位置以及会考虑到旋转 缩放等变形<br> 变形发生在合成线程 与渲染主线程无关 这就是<code>transform</code>高效率的本质原因<br> 合成线程会把quad提交给GPU进程 有GPU进程产生系统调用 提交给GPU硬件 最终完成屏幕的成像</p><h2 id="什么是reflow"><a href="#什么是reflow" class="headerlink" title="什么是reflow"></a><strong>什么是reflow</strong></h2><p>reflow的本质就是重新计算layout树<br> 当进行了会影响布局树的操作后，需要重新计算布局树 会引发layout<br> 为了避免连续的多次操作导致布局树反复计算 浏览器会合并这些操作 当JS代码全部完成后在进行统一计算 所以改动属性造成的reflow是异步的<br> 也同样因为如此 当JS获取布局属性时，就可能造成无法获取到最新的布局信息<br> 决定立即获取属性立即reflow</p><h2 id="什么是repaint"><a href="#什么是repaint" class="headerlink" title="什么是repaint"></a><strong>什么是repaint</strong></h2><p>repaint的本质就是重新根据分层信息计算了绘制指令<br>当改动了可见样式后 就需要重新计算 会引发repaint<br>由于元素的布局信息也属于可见样式 所以reflow一定会引发repaint</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>是基于已有知识来猜测答案的一种问题求解策略</p><p>枚举的思想是不断地猜测，从可能的集合中一一尝试，然后在判断题目的条件是否成立</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>建立简洁的数学模型</li><li>枚举的要素举例清楚</li><li>减少枚举的空间</li><li>选择合适的枚举顺序</li></ul><p>例: <strong>一个数组中的数互不相同，求其中和为0的数对的个数</strong></p><p>当然可能一眼就看出来暴力的解法 即两层<code>for</code>循环嘛</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum0</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] === <span class="number">0</span>) &#123;</span><br><span class="line">        res++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然有没有优化的空间呢？ 我们发现(a,b)与(b,a)是不是都是答案 不妨要求第一个数要出现在靠前的位置代码如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum0</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] === <span class="number">0</span>) &#123;</span><br><span class="line">        res++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res*<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就减少了J的循环开销 但是能不能在优化呢？</p><p>两个数是否都要去枚举出来呢？题目的条件已经确定了其他因素的条件能不能找到一种方法直接判断那个数是否存在呢？就可以省掉枚举一次的时间(可以使用桶记录遍历过的树) 有点类似哈希表</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum0</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> hashTable = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123; </span><br><span class="line">    <span class="keyword">let</span> num = nums[i]</span><br><span class="line">    <span class="keyword">if</span> (hashTable[<span class="number">0</span>-num]) &#123;</span><br><span class="line">      <span class="comment">// return</span></span><br><span class="line">      res++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hashTable[num] = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果抽象在生活中理解就是 现在有一群人 要找朋友<br>第一种方法呢就是两个人都说自己想找什么样的朋友 在去匹配<br>第二种方法就是一个人说了自己想找什么样的朋友让主持人去帮忙留意在配对</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="leetcode-两数之和"><a href="#leetcode-两数之和" class="headerlink" title="leetcode 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">leetcode 两数之和</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> twoSum = <span class="keyword">function</span>(<span class="params">nums,target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashTable = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> num = nums[i]</span><br><span class="line">        <span class="keyword">if</span>(hashTable[target-num]!==<span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [i,hashTable[target-num]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashTable[num] = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-三数之和"><a href="#leetcode-三数之和" class="headerlink" title="leetcode 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">leetcode 三数之和</a></h4><p>分析:更两数之和不同的点在于 三个数如果要枚举的情况更加复杂 如果采取暴力的三层循环 很可能会超时 而且去重会很麻烦,故采取双指针做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 先排序 方便使用指针</span></span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="comment">// 先判断特殊条件 如果最小的大于0 或者最大的小于0</span></span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>]&gt;<span class="number">0</span> || nums[n-<span class="number">1</span>]&lt;<span class="number">0</span>) <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> iNum = nums[i]</span><br><span class="line">        <span class="keyword">let</span> left = i+<span class="number">1</span> <span class="comment">// 左指针</span></span><br><span class="line">        <span class="keyword">let</span> right = n-<span class="number">1</span><span class="comment">// 右指针</span></span><br><span class="line">        <span class="comment">// 对 a 进行去重 (a:iNum,b:left,c:right)</span></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">1</span> &amp;&amp; iNum==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">// 对left和right进行遍历</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;right) &#123;</span><br><span class="line">            <span class="keyword">const</span> lNum = nums[left]</span><br><span class="line">            <span class="keyword">const</span> rNum = nums[right]</span><br><span class="line">            <span class="comment">// 小于0 则说明左边的数字太小了</span></span><br><span class="line">            <span class="keyword">if</span> (iNum+lNum+rNum &lt; <span class="number">0</span>) left++</span><br><span class="line">            <span class="comment">// 大于0 则说明右边的数字太大了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (iNum+lNum+rNum&gt;<span class="number">0</span>) right--</span><br><span class="line">            <span class="comment">// 如果等于0</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">push</span>([iNum,lNum,rNum])</span><br><span class="line">                <span class="comment">// 注意此时要对left和right进行去重</span></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right &amp;&amp; rNum==nums[right-<span class="number">1</span>]) right--</span><br><span class="line">                <span class="keyword">while</span>(letf&lt;right &amp;&amp; lNum==nums[left+<span class="number">1</span>]) left ++</span><br><span class="line">                right--</span><br><span class="line">                left++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-四数之和"><a href="#leetcode-四数之和" class="headerlink" title="leetcode 四数之和"></a><a href="https://leetcode.cn/problems/4sum/">leetcode 四数之和</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实和三数之后类似 无疑就是在三数之后上面多加了一层for循环而已</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fourSun = <span class="keyword">function</span>(<span class="params">nums,target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">4</span>) <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="comment">// 遍历第一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> iNum = nums[i]</span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">1</span> &amp;&amp; iNum==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">// 特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> (iNum+nums[i+<span class="number">1</span>]+nums[i+<span class="number">2</span>]+nums[i+<span class="number">3</span>]&gt;target) <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> (iNum+nums[n-<span class="number">1</span>]+nums[n-<span class="number">2</span>]+nums[n-<span class="number">3</span>]&lt;target) <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">// 转化成三数之和</span></span><br><span class="line">        <span class="keyword">let</span> threeSum = target-iNum</span><br><span class="line">        ... 相同操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-最接近三数之和"><a href="#leetcode-最接近三数之和" class="headerlink" title="leetcode 最接近三数之和"></a><a href="https://leetcode.cn/problems/3sum-closest/">leetcode 最接近三数之和</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也是三数之和的那套逻辑就是比较了一下最小值</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> threeSumClosest = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) </span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> ans = nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> iNum = nums[i]</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; iNum === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">let</span> l = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> r = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">const</span> lNum = nums[l]</span><br><span class="line">            <span class="keyword">const</span> rNum = nums[r]</span><br><span class="line">            <span class="keyword">let</span> sum = iNum + lNum + rNum</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - sum) &lt; <span class="title class_">Math</span>.<span class="title function_">abs</span>(target-ans)) &#123;</span><br><span class="line">                ans = sum</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                l++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                r--</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="leetcode-字母异位词分组"><a href="#leetcode-字母异位词分组" class="headerlink" title="leetcode 字母异位词分组"></a><a href="https://leetcode.cn/problems/group-anagrams/">leetcode 字母异位词分组</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashTable = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">sort</span>()</span><br><span class="line">        <span class="keyword">const</span> key = array.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(hashTable[key] != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            hashTable[key].<span class="title function_">push</span>(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashTable[key] = [str]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(hashTable))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-最长连续序列"><a href="#leetcode-最长连续序列" class="headerlink" title="leetcode 最长连续序列"></a><a href="https://leetcode.cn/problems/longest-consecutive-sequence">leetcode 最长连续序列</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">    <span class="keyword">const</span> hashTable = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[nums[i]-<span class="number">1</span>]!==underfined) &#123;</span><br><span class="line">            hashTable[nums[i]]++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashTable[nums[i]] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(hashTable)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-接雨水"><a href="#leetcode-接雨水" class="headerlink" title="leetcode 接雨水"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">leetcode 接雨水</a></h4><p>解法1：暴力每层(会超时)<br>思路就是一层一层的向上遍历然后累加就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trap = <span class="keyword">function</span> (<span class="params">height</span>) &#123;</span><br><span class="line"><span class="comment">// 按照每层来计算</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> maxHeight = <span class="title class_">Math</span>.<span class="title function_">max</span>(...height)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=maxHeight;i++) &#123;</span><br><span class="line">        <span class="comment">// 有一个启动项目isStart</span></span><br><span class="line">        <span class="keyword">let</span> isStart = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;height.<span class="property">length</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isStart&amp;&amp;height[j]&lt;i) &#123;</span><br><span class="line">                temp++</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(height[j]&gt;=i) &#123;</span><br><span class="line">                sum += temp</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                isStart = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二：暴力(每列)</p><p>每列每列的遍历只需要找到这一列的最左边和最右边的高度就可以求出，每列的雨水了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trap (height) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> n = height.<span class="property">length</span></span><br><span class="line">    <span class="comment">// 两端不用考虑</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="comment">// 找出左边最高的墙</span></span><br><span class="line">        <span class="keyword">let</span> max_left= <span class="title class_">Math</span>.<span class="title function_">max</span>(...height.<span class="title function_">slice</span>(<span class="number">0</span>,i-<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 找出右边最高的墙</span></span><br><span class="line">        <span class="keyword">let</span> max_right = <span class="title class_">Math</span>.<span class="title function_">max</span>(...height.<span class="title function_">slice</span>(i+<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 找出两端最小的</span></span><br><span class="line">        <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(max_left,max_right)</span><br><span class="line">        <span class="keyword">if</span>(min&gt;height[i]) &#123;</span><br><span class="line">            sum+=min-height</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法三：(解法二上面的优化)</p><p>发现在解法二中每次遍历都要重新遍历左边和右边 思考过后显然是没什么必要的可以形成数组取不同的<code>i</code>即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tarp = <span class="keyword">function</span> (<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = height.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> max_left = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> max_right = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        max_left[i]= <span class="title class_">Math</span>.<span class="title function_">max</span>(max_left[i-<span class="number">1</span>],height[i-<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=n-<span class="number">2</span>;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">        max_right[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(max_right[i+<span class="number">1</span>],height[i+<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(max_left[i],max_right[i])</span><br><span class="line">        <span class="keyword">if</span>(min&gt;height[i]) &#123;</span><br><span class="line">            sum+=min-height[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法四：找特殊的高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trap = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = height.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> maxHeight = <span class="title class_">Math</span>.<span class="title function_">max</span>(...height)</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 从左边依次遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height[i] === maxHeight) &#123;</span><br><span class="line">      left = i</span><br><span class="line">      <span class="keyword">break</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> right = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 从右边依次遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height[i] === maxHeight) &#123;</span><br><span class="line">      right = i</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算left和right之间的水滴</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = left + <span class="number">1</span>; i &lt; right; i++) &#123;</span><br><span class="line">    sum+=maxHeight-height[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算最左边到left的水滴</span></span><br><span class="line">  <span class="keyword">let</span> leftTemp = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; left; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftTemp &gt; height[i]) &#123;</span><br><span class="line">      sum += leftTemp - height[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      leftTemp = height[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// leftTemp = height[i]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> rightTemp = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt; right; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rightTemp &gt; height[i]) &#123;</span><br><span class="line">      sum+=rightTemp-height[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rightTemp = height[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机操作系统</title>
      <link href="/2023/11/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机操作系统 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h1><p><strong>总结理解了<code>TCP/IP</code>的必备基础知识，包括<code>OSI</code>参考模型、网络概念本质、网络构建等</strong></p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>在计算机网络与信息通信领域，人们经常会提起<strong>协议</strong>，互联网中常有的具有代表性的协议有**<code>IP,TCP,HTTP</code>** 等，而<code>LAN</code>(局域网)中常见的协议有IPX&#x2F;SPX等</p><h3 id="常见的协议"><a href="#常见的协议" class="headerlink" title="常见的协议"></a>常见的协议</h3><p>计算机网络体系结构将这些网络协议进行了系统的归纳 <strong>TCP&#x2F;IP 就是IP、TCP、HTTP等协议的集合。</strong></p><table><thead><tr><th align="left">网络体系结构</th><th align="center">协议</th><th>主要用途</th></tr></thead><tbody><tr><td align="left">TCP&#x2F;IP</td><td align="center">IP、ICMP、TCP、UDP、HTTP、SNMP等</td><td>互联网、局域网</td></tr><tr><td align="left">IPX&#x2F;SPX</td><td align="center">IPX、SPX、NPC…</td><td>个人电脑局域网</td></tr><tr><td align="left">…</td><td align="center">…</td><td>…</td></tr></tbody></table><h3 id="协议的重要性"><a href="#协议的重要性" class="headerlink" title="协议的重要性"></a>协议的重要性</h3><p>简单来说 协议就是计算机与计算机之间通过网络实现通信时事先达到的一种约定 这种约定使得不同的厂商的设备 不同的cpu 不同的操作系统组成的计算机只要遵守相同的协议就能进行通信 如果使用的协议不同就无法通信 这就好比不同国家的不同语言说话怎样也无法理解。<br>协议可以分成很多种，每一种协议都明确规定了行为规范，两台计算机必须能够<strong>支持相同的协议</strong>并<strong>遵守相同的协议</strong>进行处理才能实现相互通信</p><blockquote><p>CPU和OS</p><ul><li>CPU(Central Processing Unit)：中央处理器，他如同一台计算机的心脏，每个程序都是由它调度执行的，CPU的性能很大程度上也决定着一台计算机的处理性能</li><li>OS(Operating System)：操作系统，是一种基础的软件，他集合了CPU管理，内存管理，计算机外围设备管理以及程序运行管理等重要的功能 本篇只介绍TCP和IP协议的处理 很多情况其实已经内嵌到操作系统中了</li></ul></blockquote><h3 id="协议的理解"><a href="#协议的理解" class="headerlink" title="协议的理解"></a>协议的理解</h3><p>举个简单的例子 现在有A，B，C三个人，A只会说汉语，B只会说英语，C都会说，现在A要与C说话，A与B说话该怎么进行沟通呢？ 现在我们规定  </p><ul><li>将汉语和英语当作 ‘<strong>协议</strong>‘</li><li>将聊天当作 ‘<strong>通信</strong>‘</li><li>将说话的内容当作 ‘<strong>数据</strong>‘</li></ul><p>那么由于A与B各持一种语言 无法交流 因为他们之间谈话的协议(语言)不同 双方都无法将数据(想说的话)传递给对方<br>A和C 之间的聊天情况 两个人都使用汉语这个<strong>协议</strong>就能理解对方所要表达的具体含义了 A和C为了顺利沟通采用了同一协议，使得他们之间能够传递所期望的数据(说给对方的话)</p><p>如此看来，协议如同人们平常说话的语言，虽然语言是人类说话的特性 但计算机和计算机之间进行通信的时候也可以是认为基于人类的语言实现了相互通信</p><p>计算机从物理连接层面到应用程序的软件层面，各个组件都严格遵循着事先达成的约定才能真正的实现通信 每个计算机还必须装有实现通信最基本的功能</p><h3 id="分组交换协议"><a href="#分组交换协议" class="headerlink" title="分组交换协议"></a>分组交换协议</h3><p>分组交换是指将大数据分割为一个个叫包(Packet)的较小单位进行传输的方法，这里的包，就如同我们在邮局里见到的邮包 分组交换就是将大数据分装为一个个这样的邮包交给对方</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network1.png" alt="network1"></p><p>当人们邮寄包裹的时候 通常会填写一个寄件单贴到表单上在交给邮局 邮寄一般都会有寄件人和收件人的详细地址，类似地，计算机通信也会在每一个分组中附加上源主机地址和目标主机地址给通信线路 这些发送端地址，接收端地址，己及分组序列号写入的部分称为’报文首部’</p><p>一个较大的数据被分为多个分组时，为了标明是原始数据中的那一部分 就有必要将分组的序号写入包中，接收端会根据这个序号，再将每个分组按序号重新装配为原始数据</p><p>通信协议中，通常会根据报文首部应该写入那些信息，应该如何处理这些信息，相互通信的每一台计算机则根据协议构造报文首部，读取首部内容等</p><h2 id="协议分层和OSI参考模型"><a href="#协议分层和OSI参考模型" class="headerlink" title="协议分层和OSI参考模型"></a>协议分层和OSI参考模型</h2><h3 id="协议的分层"><a href="#协议的分层" class="headerlink" title="协议的分层"></a>协议的分层</h3><p>ISO在制定标准化OSI 对网络体系结构进行了充分的讨论 最终形成了做为通信协议设计指标的OSI参考模型 将通信协议中必要的功能分成了7层 使得比较复杂的网络协议更加简单化</p><p>在这一模型中 每个分层都接受由它下一层所提供的特定服务，并且负责为自己的上一层提供特定的服务，上下层进行交互时所遵循的约定叫做<strong>接口</strong>同一层之间的交互所遵循的约定叫做<strong>协议</strong></p><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>OSI参考模型将这样一个复杂的协议整理并分成了易于理解的七个分层<img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network2.png" alt="network2"></p><blockquote><p>OSI(参考模型)：将通信划分为7个分层 称之为OSI参考模型</p><p>OSI(协议)：让异构的计算机之间能相互通信，OSI协议以OSI参考模型为基础界定了每个阶层的协议和每个阶层之间相关接口的标准</p></blockquote><h3 id="五层网络模型"><a href="#五层网络模型" class="headerlink" title="五层网络模型"></a>五层网络模型</h3><p>面对复杂的问题，可以使用分层的方式来简化<br>经过不断的演化，网络最终形成了五层模型：</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network3.png" alt="network3"></p><h3 id="四层、五层、七层"><a href="#四层、五层、七层" class="headerlink" title="四层、五层、七层"></a>四层、五层、七层</h3><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network4.png" alt="network4"></p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL(<strong>uniform resource localtor</strong>,统一资源定位符) 用于定位网络服务<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network5.png" alt="image-20230112104100679"> </p><p>URL是一个固定格式的字符串</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network6.png" alt="image-20230112102913056"></p><p>表达了<strong>那台计算机(domain)<strong>中的那个</strong>程序(port)<strong>寻找</strong>那个服务(path)</strong>,并注明了获取服务的<strong>具体细节(path)</strong>,以及要用什么样的协议<strong>通信(schema)</strong></p><ul><li>当协议是<code>http</code>端口为<code>80</code>时，端口可以省略</li><li>当协议是<code>https</code>端口为<code>443</code>时，端口可以省略</li><li><code>schema</code>、<code>domain</code>、<code>path</code>是必填的，其他的根据具体的要求填写</li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>超文本传输协议(Hyper Text Transfer Protocol,HTTP)是一个广泛运用互联网的应用层协议</p><p>该协议规定了两个方面的内容：</p><ul><li><strong>传递消息的模式</strong></li><li><strong>传递消息的格式</strong></li></ul><h3 id="传递消息的模式"><a href="#传递消息的模式" class="headerlink" title="传递消息的模式"></a>传递消息的模式</h3><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network7.png" alt="image-20230112110047746"></p><p>HTTP使用了一种极为简单的消息传递模式，「请求-响应」模式发起请求的称之为客户端，接收请求并完成响应的称之为服务器。「请求-响应」完成后，一次交互结束。</p><h3 id="传递消息的格式"><a href="#传递消息的格式" class="headerlink" title="传递消息的格式"></a>传递消息的格式</h3><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network8.png" alt="image-20230113214343300"></p><p>​HTTP的消息格式是一种纯文本的格式 文本分三个部分:</p><blockquote><p>请求行<br>请求头  </p><p>请求体</p></blockquote><p><strong>具体每一部分写什么内容，要看具体的服务要求</strong></p><h3 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h3><ol><li><p>安装<code>vscode</code>插件<code>REST Clinet</code> </p></li><li><p>新建文件<code>xxx.http</code></p></li><li><p>编写请求文本</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/user/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">Host localhost:7001</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-1c">&#123;</span></span><br><span class="line"><span class="language-1c"><span class="string">&quot;loginId&quot;</span>: &#x27;admin&#x27;,</span></span><br><span class="line"><span class="language-1c"><span class="string">&quot;loginPwd&quot;</span>: &#x27;explosion&#x27;</span></span><br><span class="line"><span class="language-1c">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="熟悉关键信息"><a href="#熟悉关键信息" class="headerlink" title="熟悉关键信息"></a>熟悉关键信息</h3><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>请求行中的第一个单词是请求方法</p><p><strong>在HTTP协议中，请求方法仅有语义的区别</strong>，只是表达了这次请求的「愿望」。  </p><blockquote><p>关于请求方法的协议原文见 <a href="https://www.rfc-editor.org/rfc/rfc7231.html">HTTP&#x2F;1.1规范RFC7231-Chapter4</a></p><p><img src="http://mdrs.yuanjin.tech/img/202301131908971.png" alt="image-20230113190854930"></p></blockquote><p>比如<code>GET</code>表达了客户端想要获取一些东西，<code>POST</code>表达了客户端想要提交一些东西</p><p>常见的方法有：</p><ul><li><code>GET</code> 获取</li><li><code>post</code> 提交</li><li><code>PUT</code> 修改</li><li><code>DELETE</code> 删除</li></ul><p>具体在开发中应该选择什么请求方法，一定是看服务方的要求</p><h5 id="请求头-Host"><a href="#请求头-Host" class="headerlink" title="请求头 - Host"></a>请求头 - <code>Host</code></h5><p><code>Host</code>标注了<code>URL</code>地址中的<code>Domain + Port</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Host: study.duyiedu.com</span><br></pre></td></tr></table></figure><h5 id="请求头-Content-Type"><a href="#请求头-Content-Type" class="headerlink" title="请求头 - Content-Type"></a>请求头 - <code>Content-Type</code></h5><p><code>Content-Type</code>标注了附带的请求体是什么格式</p><p>比如，请求体的数据为<code>loginId:admin, loginPwd:123456</code>，请求体可以用不同的格式发出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">loginId=admin&amp;loginPwd=123123</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123; &quot;loginId&quot;: &quot;admin&quot;, &quot;loginPwd&quot;: &quot;123123&quot; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=aaa</span><br><span class="line"></span><br><span class="line">--aaa</span><br><span class="line">Content-Disposition: form-data; name=&quot;loginId&quot;</span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">--aaa</span><br><span class="line">Content-Disposition: form-data; name=&quot;loginPwd&quot;</span><br><span class="line"></span><br><span class="line">123456</span><br><span class="line">--aaa</span><br><span class="line">Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;small.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">文件的二进制</span><br><span class="line">--aaa--</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h5><p>响应码（状态码、消息码）是响应行中的一个数字，后面往往跟上一个对应的单词，用于表达服务器对这个响应的整体「态度」</p><p>常见的响应码有：<img src="http://mdrs.yuanjin.tech/img/202301121310570.png" alt="image-20230112131000507"></p><p>常见的状态码有：</p><ol><li><p>200 OK：一切正常。</p></li><li><p>301 Moved Permanently：资源已被永久重定向。</p><p><code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我已经永远的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了响应头的Location中了</code></p><blockquote><p>试试请求：<a href="http://www.douyutv.com/">www.douyutv.com</a></p></blockquote></li><li><p>302 Found：资源已被临时重定向。</p><p><code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我临时的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></p></li><li><p>304 Not Modified：文档内容未被修改。</p><p><code>你的请求我收到了，你要的东西跟之前是一样的，没有任何的变化，所以我就不给你结果了，你自己就用以前的吧。啥？你没有缓存以前的内容，关我啥事</code></p></li><li><p>400 Bad Request：语义有误，当前请求无法被服务器理解。</p><p><code>你给我发的是个啥啊，我听都听不懂</code></p></li><li><p>403 Forbidden：服务器拒绝执行。</p><p><code>你的请求我已收到，但是我就是不给你东西</code></p></li><li><p>404 Not Found：资源不存在。</p><p><code>你的请求我收到了，但我没有你要的东西</code></p></li><li><p>500 Internal Server Error：服务器内部错误。</p><p><code>你的请求我已收到，但这道题我不会，解不出来，先睡了</code></p></li></ol><h5 id="响应头-Content-Type"><a href="#响应头-Content-Type" class="headerlink" title="响应头 - Content-Type"></a>响应头 - <code>Content-Type</code></h5><p><code>Content-Type</code>标注了附带的响应体是什么格式</p><p>常见的值有：</p><ol><li><code>text/plain</code>: 普通的纯文本</li><li><code>text/html</code>：html文档</li><li><code>text/javascript</code> 或 <code>application/javascript</code>：js代码</li><li><code>text/css</code>：css代码</li><li><code>image/jpeg</code>：jpg图片</li><li><code>attachment</code>：附件</li><li>其他<code>MIME</code>类型</li></ol><h1 id="浏览器的通信能力"><a href="#浏览器的通信能力" class="headerlink" title="浏览器的通信能力"></a>浏览器的通信能力</h1><h2 id="用户代理"><a href="#用户代理" class="headerlink" title="用户代理"></a>用户代理</h2><p>浏览器可以代替用户完成http请求，代替用户解析响应结果，所以我们称之为：</p><p><strong>用户代理 user agent</strong></p><p>在网络层面，对于前端开发者，必须要知道浏览器拥有的两大核心能力：</p><ul><li>自动发出请求的能力</li><li>自动解析响应的能力</li></ul><h3 id="自动发出请求的能力"><a href="#自动发出请求的能力" class="headerlink" title="自动发出请求的能力"></a>自动发出请求的能力</h3><p>当一些事情发生的时候，浏览器会代替用户自动发出http请求，常见的包括：</p><ol><li><p><strong>用户在地址栏输入了一个url地址，并按下了回车</strong></p><p>浏览器会自动解析URL，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p></li><li><p><strong>当用户点击了页面中的a元素</strong></p><p>浏览器会拿到a元素的href地址，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p></li><li><p><strong>当用户点击了提交按钮<code>&lt;button type=&quot;submit&quot;&gt;...&lt;/button&gt;</code></strong></p><p>浏览器会获取按钮所在的<code>&lt;form&gt;</code>元素，拿到它的<code>action</code>属性地址，同时拿到它<code>method</code>属性值，然后把表单中的数据组织到请求体中，发出<code>指定方法</code>的请求，同时抛弃当前页面。</p><blockquote><p>这种方式的提交现在越来越少见了</p></blockquote></li><li><p><strong>当解析HTML时遇到了<code>&lt;link&gt; &lt;img&gt; &lt;script&gt; &lt;video&gt; &lt;audio&gt;</code>等元素</strong></p><p>浏览器会拿到对应的地址，发出<code>GET</code>请求</p></li><li><p><strong>当用户点击了刷新</strong></p><p>浏览器会拿到当前页面的地址，以及当前页面的请求方法，重新发一次请求，同时抛弃当前页面。</p></li></ol><blockquote><p>浏览器在发出请求时，会自动附带一些请求头</p></blockquote><p>&#x3D;&#x3D;重点来了&#x3D;&#x3D;</p><p>从古至今，服务器和浏览器都有一个约定：</p><p><strong>当发送GET请求时，不会附带请求体</strong></p><p>这个约定深刻的影响着后续的前后端各种应用，现在，几乎所有人都在潜意识中认同了这一点，无论是前端开发人员还是后端开发人员。</p><p>由于前后端程序的默认行为，逐步造成了GET和POST的各种差异：</p><ol><li><p>浏览器在发送 GET 请求时，不会附带请求体</p></li><li><p>GET 请求的传递信息量有限，适合传递少量数据；POST 请求的传递信息量是没有限制的，适合传输大量数据。</p></li><li><p>GET 请求只能传递 ASCII 数据，遇到非 ASCII 数据需要进行编码；POST 请求没有限制</p></li><li><p>大部分 GET 请求传递的数据都附带在 path 参数中，能够通过分享地址完整的重现页面，但同时也暴露了数据，若有敏感数据传递，不应该使用 GET 请求，至少不应该放到 path 中</p></li><li><p>POST 不会被保存到浏览器的历史记录中</p></li><li><p>刷新页面时，若当前的页面是通过 POST 请求得到的，则浏览器会提示用户是否重新提交。若是 GET 请求得到的页面则没有提示。</p></li></ol><h3 id="自动解析响应的能力"><a href="#自动解析响应的能力" class="headerlink" title="自动解析响应的能力"></a>自动解析响应的能力</h3><p>浏览器不仅能发送请求，还能够针对服务器的各种响应结果做出不同的自动处理</p><p>常见的处理有：</p><ol><li><p><strong>识别响应码</strong></p><p>浏览器能够自动识别响应码，当出现一些特殊的响应码时浏览器会自动完成处理，比如<code>301、302</code></p></li><li><p><strong>根据响应结果做不同的处理</strong></p><p>浏览器能够自动分析响应头中的<code>Content-Type</code>，根据不同的值进行不同处理，比如：</p><ul><li><p><code>text/plain</code>: 普通的纯文本，浏览器通常会将响应体原封不动的显示到页面上</p></li><li><p><code>text/html</code>：html文档，浏览器通常会将响应体作为页面进行渲染</p></li><li><p><code>text/javascript</code>或<code>application/javascript</code>：js代码，浏览器通常会使用JS执行引擎将它解析执行</p></li><li><p><code>text/css</code>：css代码，浏览器会将它视为样式</p></li><li><p><code>image/jpeg</code>：浏览器会将它视为jpg图片</p></li><li><p><code>application/octet-stream</code>：二进制数据，会触发浏览器下载功能</p></li><li><p><code>attachment</code>：附件，会触发下载功能</p><p>该值和其他值不同，应放到<code>Content-Disposition</code>头中。</p></li></ul></li></ol><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><blockquote><p>访问：<a href="http://www.baidu.com![image-20220428165629557](https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network9.png)">www.baidu.com![image-20220428165629557](https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network9.png)</a></p></blockquote><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><blockquote><p>浏览器本身就具备网络通信的能力，但在早期，浏览器并没有把这个能力开放给JS。</p><p>最早是微软在IE浏览器中把这一能力向JS开放，让JS可以在代码中实现发送请求，并不会刷新页面，这项技术在2005年被正式命名为AJAX（<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML）</p></blockquote><p>AJAX 就是指在web应用程序中异步向服务器发送请求。</p><p>它的实现方式有两种，<code>XMLHttpRequest 简称XHR</code>和<code>Fetch</code></p><p>以下是两者的对比</p><table><thead><tr><th>功能点</th><th>XHR</th><th>Fetch</th></tr></thead><tbody><tr><td>基本的请求能力</td><td>✅</td><td>✅</td></tr><tr><td>基本的获取响应能力</td><td>✅</td><td>✅</td></tr><tr><td>监控请求进度</td><td>✅</td><td>❌</td></tr><tr><td>监控响应进度</td><td>✅</td><td>✅</td></tr><tr><td>Service Worker中是否可用</td><td>❌</td><td>✅</td></tr><tr><td>控制cookie的携带</td><td>❌</td><td>✅</td></tr><tr><td>控制重定向</td><td>❌</td><td>✅</td></tr><tr><td>请求取消</td><td>✅</td><td>✅</td></tr><tr><td>自定义referrer</td><td>❌</td><td>✅</td></tr><tr><td>流</td><td>❌</td><td>✅</td></tr><tr><td>API风格</td><td><code>Event</code></td><td><code>Promise</code></td></tr><tr><td>活跃度</td><td>停止更新</td><td>不断更新</td></tr></tbody></table><h1 id="跨域问题及解决方案"><a href="#跨域问题及解决方案" class="headerlink" title="跨域问题及解决方案"></a>跨域问题及解决方案</h1><h2 id="同源策略及跨域问题"><a href="#同源策略及跨域问题" class="headerlink" title="同源策略及跨域问题"></a>同源策略及跨域问题</h2><p><strong>同源策略</strong>是一套浏览器<strong>安全机制</strong>，当一个<strong>源</strong>的文档和脚本，与另一个<strong>源</strong>的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。</p><p>简单来说，同源策略对 <strong>同源资源</strong> <strong>放行</strong>，对 <strong>异源资源</strong> <strong>限制</strong></p><p>因此限制造成的开发问题，称之为<strong>跨域（异源）问题</strong></p><h3 id="同源和异源"><a href="#同源和异源" class="headerlink" title="同源和异源"></a>同源和异源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源(origin) = 协议 + 域名 + 端口</span><br></pre></td></tr></table></figure><p>例如:</p><p><code>https://study.duyiedu.com/api/movie</code>的源为<code>https://study.duyiedu.com</code></p><p><code>http://localhost:7001/index.html</code>的源为<code>http://localhost:7001</code></p><p>两个URL地址的源<strong>完全相同</strong>，则称之为<strong>同源</strong>，否则称之为<strong>异源（跨域）</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network10.png" alt="image-20230112163455982"></p><h3 id="跨域出现的场景"><a href="#跨域出现的场景" class="headerlink" title="跨域出现的场景"></a>跨域出现的场景</h3><p>跨域可能出现在三种场景：</p><ul><li><p><strong>网络通信</strong></p><p>a元素的跳转；加载css、js、图片等；AJAX等等</p></li><li><p>JS API</p><p><code>window.open</code>、<code>window.parent</code>、<code>iframe.contentWindow</code>等等</p></li><li><p>存储</p><p><code>WebStorage</code>、<code>IndexedDB</code>等等</p></li></ul><p>对于不同的跨域场景，以及每个场景中不同的跨域方式，同源策略都有不同的限制。</p><p>本文重点讨论<strong>网络通信</strong>中<code>AJAX</code>的跨域问题</p><h3 id="网络中的跨域"><a href="#网络中的跨域" class="headerlink" title="网络中的跨域"></a>网络中的跨域</h3><p>当浏览器运行页面后，会发出很多的网络请求，例如CSS、JS、图片、AJAX等等</p><p>请求页面的源称之为<strong>页面源</strong>，在该页面中发出的请求称之为<strong>目标源</strong>。</p><p>当页面源和目标源一致时，则为<strong>同源请求</strong>，否则为<strong>异源请求（跨域请求）</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network11.png" alt="image-20230112163616513"></p><h3 id="浏览器如何限制异源请求？"><a href="#浏览器如何限制异源请求？" class="headerlink" title="浏览器如何限制异源请求？"></a>浏览器如何限制异源请求？</h3><p>浏览器出于多方面的考量，制定了非常繁杂的规则来限制各种跨域请求，但总体的原则非常简单：</p><ul><li>对标签发出的跨域请求轻微限制</li><li>对AJAX发出的跨域请求<strong>严厉限制</strong></li></ul><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network12.png" alt="image-20230112201027855"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS（Cross-Origin Resource Sharing）是最正统的跨域解决方案，同时也是浏览器推荐的解决方案。</p><p>CORS是一套规则，用于帮助浏览器判断是否校验通过。</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network13.png" alt="image-20230112202539003"></p><p>CORS的基本理念是：</p><ul><li>只要服务器明确表示<strong>允许</strong>，则校验<strong>通过</strong></li><li>服务器明确拒绝或没有表示，则校验不通过</li></ul><p><strong>所以，使用CORS解决跨域，必须要保证服务器是「自己人」</strong></p><h4 id="请求分类"><a href="#请求分类" class="headerlink" title="请求分类"></a>请求分类</h4><p>CORS将请求分为两类：&#x3D;&#x3D;简单请求&#x3D;&#x3D;和&#x3D;&#x3D;预检请求&#x3D;&#x3D;。</p><p>对不同种类的请求它的规则有所区别。</p><p>所以要理解CORS，首先要理解它是如何划分请求的。</p><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><blockquote><p>完整判定逻辑：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests</a></p></blockquote><p>简单来说，只要全部满足下列条件，就是简单请求：</p><ul><li><p>请求方法是<code>GET</code>、<code>POST</code>、<code>HEAD</code>之一</p></li><li><p>头部字段满足CORS安全规范，详见 <a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header">W3C</a></p><blockquote><p>浏览器默认自带的头部字段都是满足安全规范的，只要开发者不改动和新增头部，就不会打破此条规则</p></blockquote></li><li><p>如果有<code>Content-Type</code>，必须是下列值中的一个</p><ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li></ul><h5 id="预检请求-preflight"><a href="#预检请求-preflight" class="headerlink" title="预检请求(preflight)"></a>预检请求(preflight)</h5><p>只要不是简单请求，均为预检请求</p><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的跨域请求哪些是简单请求，哪些是预检请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="对简单请求的验证"><a href="#对简单请求的验证" class="headerlink" title="对简单请求的验证"></a>对简单请求的验证</h4><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network14.png" alt="image-20230112204546583"></p><h4 id="对预检请求的验证"><a href="#对预检请求的验证" class="headerlink" title="对预检请求的验证"></a>对预检请求的验证</h4><ol><li>发送预检请求</li></ol><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network15.png" alt="image-20230112204634493"></p><ol start="2"><li>发送真实请求（和简单请求一致）</li></ol><h4 id="细节1-关于cookie"><a href="#细节1-关于cookie" class="headerlink" title="细节1 - 关于cookie"></a>细节1 - 关于cookie</h4><p>默认情况下，ajax的跨域请求并不会附带cookie，这样一来，某些需要权限的操作就无法进行</p><p>不过可以通过简单的配置就可以实现附带cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch api</span></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样一来，该跨域的ajax请求就是一个<em>附带身份凭证的请求</em></p><p>当一个请求需要附带cookie时，无论它是简单请求，还是预检请求，都会在请求头中添加<code>cookie</code>字段</p><p>而服务器响应时，需要明确告知客户端：服务器允许这样的凭据</p><p>告知的方式也非常的简单，只需要在响应头中添加：<code>Access-Control-Allow-Credentials: true</code>即可</p><p>对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝。</p><p>另外要特别注意的是：**对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin 的值为*</code>*<em>。这就是为什么不推荐使用</em>的原因</p><h4 id="细节2-关于跨域获取响应头"><a href="#细节2-关于跨域获取响应头" class="headerlink" title="细节2 - 关于跨域获取响应头"></a>细节2 - 关于跨域获取响应头</h4><p>在跨域访问时，JS只能拿到一些最基本的响应头，如：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p><p><code>Access-Control-Expose-Headers</code>头让服务器把允许浏览器访问的头放入白名单，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Expose-Headers: authorization, a, b</span><br></pre></td></tr></table></figure><p>这样JS就能够访问指定的响应头了。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>在很久很久以前…并没有CORS方案</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network16.png" alt="image-20230112205454350"></p><p>在那个年代，古人靠着非凡的智慧来解决这一问题</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network17.png" alt="image-20230112205613983"></p><p>虽然可以解决问题，但JSONP有着明显的缺陷：</p><ul><li><p>仅能使用GET请求</p></li><li><p>容易产生安全隐患</p><blockquote><p>恶意攻击者可能利用<code>callback=恶意函数</code>的方式实现<code>XSS</code>攻击</p></blockquote></li><li><p>容易被非法站点恶意调用</p></li></ul><p><strong>因此，除非是某些特殊的原因，否则永远不应该使用JSONP</strong></p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>CORS和JSONP均要求服务器是「自己人」</p><p>那如果不是呢？</p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network18.png" alt="image-20230112210551647" style="zoom:50%;" /><p>那就找一个中间人（代理）</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network19.png" alt="image-20230115133326930"></p><p>比如，前端小王想要请求获取王者荣耀英雄数据，但直接请求腾讯服务器会造成跨域</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network20.png" alt="image-20230115133732560"></p><p>由于腾讯服务器不是「自己人」，小王决定用代理解决</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network21.png" alt="image-20230115133817554"></p><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>最重要的，是要保持<strong>生产环境和开发环境一致</strong></p><p>下面是一张决策图</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network22.png" alt="image-20230115145335319"></p><p>具体的几种场景</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network23.png" alt="image-20230115150610750"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack、rollup、gulp、vite等打包工具</title>
      <link href="/2023/11/25/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/11/25/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h1><ul><li>浏览器不能使用模块化规范(兼容性) 和 使用模块化规范也会面临模块过多时的加载问题</li><li>希望有工具可以对代码进行打包，将多个模块打包成一个文件</li><li>构建工具起这样的工作,通过构建工具可以将使用的ESM规范编写的代码转换成旧的JS语法,这样可以使得所有的浏览器都可以支持代码</li></ul><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>使用步骤：<br>    1.初始化项目 <code>yarn init -y</code><br>    2.安装依赖<code>webpack</code> <code>webpack-cli</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add <span class="literal">-D</span> webpack webpack<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>​3.在项目中创建<code>src</code> 目录，然后编写代码(index.js)<br>​4.执行 <code>yarn webpack</code> 来对代码进行打包 (打包后观察 dist 目录)<br>配置文件（webpack.config.js）<br>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>, <span class="comment">// 设置打包模式 production 生产模式 development 开发模式</span></span><br><span class="line">  <span class="comment">//entry: &quot;./src/index.js&quot;, // 用来指定打包的主文件, 默认为: ./src/index.js</span></span><br><span class="line">  <span class="comment">// entry: [&quot;./src/a.js&quot;, &quot;./src/b.js&quot;]</span></span><br><span class="line">  <span class="comment">// entry: &#123;</span></span><br><span class="line">  <span class="comment">//   hello: &quot;./src/a.js&quot;,</span></span><br><span class="line">  <span class="comment">//   b: &quot;./src/b.js&quot;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 指定打包的目录,必须要绝对路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>, <span class="comment">// 打包后的文件夹</span></span><br><span class="line">    <span class="comment">//clean: true, // 自动清理打包目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    webpack 默认情况下，只会处理js文件，如果我们希望它可以处理其他类型的文件,则需要引入loader</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    以CSS 为例子:</span></span><br><span class="line"><span class="comment">      - 使用css-loader 可以处理js中的样式</span></span><br><span class="line"><span class="comment">      - 使用步骤：</span></span><br><span class="line"><span class="comment">          1.安装: yarn add css-loader -D</span></span><br><span class="line"><span class="comment">          2.配置: </span></span><br><span class="line"><span class="comment">          module: &#123;</span></span><br><span class="line"><span class="comment">            rules: [</span></span><br><span class="line"><span class="comment">              &#123;test: /\.css$/i, use: &quot;css-loader&quot;&#125;</span></span><br><span class="line"><span class="comment">            ]</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/i</span>, <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|svg)$/i</span>, <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>&#125; <span class="comment">// 图片资源类型的数据,可以通过指定type来处理</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写js代码时，经常需要使用一些js中的新特性(箭头函数，解构赋值),而新特性在旧的浏览器中兼容性并不好,此时旧导致我们无法使用一些新的特性<br>我们可以通过一些工具使用新特性编写代码，将新代码转换为旧代码<br><code>babel</code> 就是这样的一个工具,可以将新的js语法转换为旧的js，以提高代码的兼容性<br>我们如果希望在webpack支持babel，则需要向webpack中引入babel的loader</p><p><strong>使用步骤</strong></p><p>1.<code>npm install -D babel-loader @babel/core @babel/preset-env</code><br>2.配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在package.json中设置兼容性</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;defaults&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>插件(plugin)</p><ul><li><p>插件用来为webpack来扩展功能</p></li><li><p>html-webpack-plugin</p><ul><li><p>这个插件可以在打包代码后,自动打包目录生成html页面</p></li><li><p>使用步骤</p><ol><li><p>安装依赖 <code>yarn add -D html-webpack-plugin</code></p></li><li><p>引入配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HTMLPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;suki&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><p>开发服务器（webpack-dev-server）</p><p>安装<br>    <code>yarn add -D webpack-dev-server</code> （可以将本地的html当成localhost:8080访问）</p><p>启动<br>    <code>yarn webpack serve --open</code></p><p>配置源码的映射<br>    <code>devtool: &quot;inline-source-map&quot;</code></p><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><p>Vite 也是前端的构建工具</p><p>相较于webpack，vite采用了不同的运行方式<br>    1.开发时，并不对代码打包，而是直接采用ESM的方式来运行项目<br>    2.在项目部署时，在对项目进行打包</p><p>除了速度外，vite使用起来也更加方便</p><p>基本使用:<br>    1.安装开发依赖 vite<br>    2.vite的源码目录就是项目根目录<br>    3.开发命令:<br>        vite 启动开发服务器<br>        vite build 打包代码<br>        vite preview 预览打包后的代码</p><p>使用命令构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@laster</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><p>配置文件: <code>vite-config.js</code></p><p>格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> legacy <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-legacy&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">legacy</span>(&#123;</span><br><span class="line">      <span class="attr">targets</span>: [<span class="string">&quot;defaults&quot;</span>,<span class="string">&quot;ie 11&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 打包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打包工具 </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue部分源码分析</title>
      <link href="/2023/11/25/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2023/11/25/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE3框架的三大模块"><a href="#VUE3框架的三大模块" class="headerlink" title="VUE3框架的三大模块"></a>VUE3框架的三大模块</h1><ol><li>compiler 编译系统</li><li>runtime 渲染系统</li><li>reactive 响应系统</li></ol><h2 id="Reactive的实现"><a href="#Reactive的实现" class="headerlink" title="Reactive的实现"></a><strong>Reactive的实现</strong></h2><p>在Vue2中实现响应式是使用<code>Object.defineProperty</code>来实现数据劫持如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="number">18</span> <span class="comment">// 设置属性的值</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span> <span class="comment">// 如果为 true，属性的值可以被修改；如果为 false，属性的值是只读的。</span></span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span> <span class="comment">//如果为 true，属性可以通过对象的迭代方法（例如 for...in 循环）枚举；如果为 false，属性不可枚举。</span></span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span> <span class="comment">// 如果为 true，属性的特性可以被修改或者删除；如果为 false，属性的特性不可更改。</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人访问age属性了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    number = value  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性&#x27;</span>,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在Vue3中使用Proxy来实现数据劫持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target,key，reactive</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人访问get属性了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,reactive)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target,key,value,reactive</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性&#x27;</span>,value)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,reactive)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Proxy的优势</p><ol><li>Proxy可以直接监听对象而非属性</li><li>Proxy 用于创建一个对象的代理，从而实现基本操作的拦截和自定义劫持整个对象，并返回一个新对象。</li><li>Object.defineProperty 无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实施响应。</li><li>Object.defineProperty 只能劫持对象的属性，因此我们需要对每个对象的每个属性进行遍历。Vue2.X 里，是通过递归 + 遍历 data 对象来实现对数据的监控的，如果属性值也是对象那么需要深度遍历，显然如果能劫持一个完整的对象才是更好的选择。</li></ol></blockquote><p><strong>Reflect</strong></p><ul><li>不是一个函数对象，因此它是不可构造的。直接使用静态方式即可。</li><li>反射</li><li>作用：可以通过编程的方式操作对象</li><li>用法和Object类似,但是Object具有局限性</li><li>比如增加删除属性需要写try catch，而Reflect不需要 直接if else判断即可</li><li>比如在object的key只能是String，而Reflect可以value-value</li><li>Reflect 提供的是一整套反射能力 API，它们的调用方式，参数和返回值都是统一风格的，我们可以使用 Reflect 写出更优雅的反射代码。</li></ul><p>Reactive的实现</p><ul><li>reactive.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一些工具函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;isObject,hasChanged,isArray&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="comment">// 引入track trigger 更新触发函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;track,trigger&#125; <span class="keyword">from</span> <span class="string">&#x27;./effect&#x27;</span></span><br><span class="line"><span class="comment">// 建立proxyMap映射表 用于存储代理对象(代理对象相同时直接引用就行)</span></span><br><span class="line"><span class="keyword">const</span> proxyMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 判断传入的target是否是对象</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.判断是否是reactive包reactive</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_">isReactive</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(proxyMap.<span class="title function_">has</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target,&#123;</span><br><span class="line">    <span class="comment">// receiver 代理对象本身</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,key,receiver</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">      <span class="comment">// 如果是(reactive(reacitve))的情况（重复代理情况）</span></span><br><span class="line">      <span class="keyword">if</span>(key===<span class="string">&#x27;__isReactive&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target,,key)</span><br><span class="line">      <span class="comment">// 递归遍历深层次对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">isObject</span>(res) ? <span class="title function_">reactive</span>(res) : res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,key,value,receiver</span>)&#123;</span><br><span class="line">      <span class="comment">// 处理数组</span></span><br><span class="line">      <span class="keyword">const</span> oldLength = target.<span class="property">length</span></span><br><span class="line">      <span class="keyword">const</span> oldVlaue = target[key]</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_">hasChanged</span>(oldVlaue,value)) &#123;</span><br><span class="line">        <span class="comment">// 触发更新</span></span><br><span class="line">        <span class="title function_">trigger</span>(target,key)</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">isArray</span>(target)&amp;&amp;<span class="title function_">hasChanged</span>(oldLength,target.<span class="property">length</span>)) &#123;</span><br><span class="line">          <span class="title function_">trigger</span>(target,<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target,proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多次代理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isReactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// 强行转化成布尔值</span></span><br><span class="line">  <span class="keyword">return</span> !!(target &amp;&amp; target.<span class="property">__isReactive</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>effect.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * activeEffect 用于存储当前的effect函数</span></span><br><span class="line"><span class="comment"> * 作用：用于在track中存储依赖收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> activeEffect</span><br><span class="line"><span class="comment">// effectStack 用于存储effect函数的栈防止丢失effect函数</span></span><br><span class="line"><span class="keyword">const</span> effectStack = []</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn,options=&#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">effectFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      activeEffect = effectFn</span><br><span class="line">      <span class="comment">// 入栈</span></span><br><span class="line">      effectStack.<span class="title function_">push</span>(effectFn)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">// 出栈</span></span><br><span class="line">      effectStack.<span class="title function_">pop</span>()</span><br><span class="line">      <span class="comment">// 恢复activeEffect</span></span><br><span class="line">      activeEffect = effectStack[effectStack.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// options.lazy 为true时不会立即执行effect函数（区别computed和watch和普通的响应）</span></span><br><span class="line">  <span class="keyword">if</span>(!options.<span class="property">lazy</span>) &#123;</span><br><span class="line">    <span class="title function_">effectFn</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(options.<span class="property">sheduler</span>) &#123;</span><br><span class="line">    effectFn.<span class="property">sheduler</span> = options.<span class="property">sheduler</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effectFn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依赖收集</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target,key</span>)&#123;</span><br><span class="line">  <span class="comment">// 如果没有activeEffect 说明不是在effect中执行的则不需要收集依赖直接返回</span></span><br><span class="line">  <span class="keyword">if</span>(!acctiveEffect) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//depsMap Map对象 用于存储目标对象与其属性之间的依赖关系。它的作用是将目标对象映射到一个包含属性依赖的 Map，以便在需要时快速找到对应属性的依赖集合。</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="comment">// 如果没有depsMap 说明是第一次收集依赖</span></span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    <span class="comment">// 初始化depsMap</span></span><br><span class="line">    targetMap.<span class="title function_">set</span>(target,(depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dep是Set对象，它用于存储具体属性的依赖集合。每个属性都有一个对应的 dep 集合，其中存储了依赖于该属性的副作用函数（effects）。</span></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key,(dep = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.<span class="title function_">add</span>(acctiveEffect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target,key</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  dep.<span class="title function_">forEach</span>(<span class="function"><span class="params">effectFn</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(effectFn.<span class="property">sheduler</span>) &#123;</span><br><span class="line">      effectFn.<span class="title function_">sheduler</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">effectFn</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>utils.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="comment">// 类型是null 类型是object</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span> &amp;&amp; val !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">haschanged</span>(<span class="params">oldValue, newValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> oldValue !== newValue &amp;&amp; !(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(oldValue) &amp;&amp; <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(newValue))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">target</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">target</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> target === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Ref实现</strong></p><p>ref.js 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;isObject,hasChanged&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;track,trigger&#125; <span class="keyword">from</span> <span class="string">&#x27;./effect&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span> (value) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_">isRef</span>(value)) <span class="keyword">return</span> value</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isRef</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="property">__isRef</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">convert</span>(value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">__isRef</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  get value () &#123;</span><br><span class="line">    <span class="title function_">track</span>(<span class="variable language_">this</span>,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  set value (newValue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newValue,<span class="variable language_">this</span>.<span class="property">_value</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">convert</span>(newValue)</span><br><span class="line">      <span class="title function_">tigger</span>(<span class="variable language_">this</span>,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>computed实现</strong><br>computed.js 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isFunction &#125; <span class="keyword">from</span> <span class="string">&quot;../utils&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; effect,track,trigger &#125; <span class="keyword">from</span> <span class="string">&quot;./effect&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">getterOrOptions</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> getter,setter;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_">isFunction</span>(getterOrOptions))&#123;</span><br><span class="line">    getter = getterOrOptions</span><br><span class="line">    setter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;computed value must be readonly&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    getter = getterOrOptions.<span class="property">get</span></span><br><span class="line">    setter = getterOrOptions.<span class="property">set</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComputedRefImpl</span>(getter,setter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputedRefImpl</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">getter,setter</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_setter</span> = setter</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span> = <span class="title function_">effect</span>(getter, &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 调度机制</span></span><br><span class="line">      <span class="attr">scheduler</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">_dirty</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">          <span class="title function_">trigger</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">_dirty</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="title function_">effect</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">track</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_setter</span>(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="runtime-渲染系统"><a href="#runtime-渲染系统" class="headerlink" title="runtime 渲染系统"></a><strong>runtime 渲染系统</strong></h2><p>首先介绍一下什么是虚拟DOM</p><p>虚拟DOM：</p><ul><li>用JS对象来描述DOM节点</li><li>种类有：Element、Text、Fragment、</li></ul><ol><li>Element:<br>对应普通元素，如div、p、span等,使用doucment.createElement创建,type指定标签名，props指定元素属性，children指定子元素，可以为数组或者字符串，为字符串时代表只有一个文本子节点</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: string,</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">children</span>: string | <span class="title class_">VNode</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;app&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">children</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Text:<br>对应文本节点，使用document.createTextNode创建，text指定文本内容</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: symbol,</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">text</span>: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Fragment:<br>对应Fragment，不会渲染的节点，相当于templete或react的Fragment，type为symbol，props为null，children为数组表示子节点，最后渲染时会将子节点的所有子节点挂载到Fragment父节点上</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: symbol,</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">VNode</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Components:<br>Component是组件，组件有自己特殊的一套渲染方法，但组件的最终产物，也是上面三种VNode的集合。组件的type，就是组件定义的对象，props即是外部传入组件的props数据，children是组件的slot</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>:&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&#123;&#123;msg&#125;&#125; &#123;&#123;name&#125;&#125;`</span></span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShaperFlags</p><ul><li>一组标记，用于快速识别VNode的类型和他的子节点类型</li><li>使用位运算</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 例子</span><br><span class="line">// 与运算，只有两个都为1时才为1</span><br><span class="line">0 0 1 0 0 0 1 1</span><br><span class="line">0 0 1 0 1 1 1 1</span><br><span class="line">&amp;</span><br><span class="line">0 0 1 0 0 0 1 1</span><br><span class="line">// 或运算，只要有一个为1就为1</span><br><span class="line">0 0 1 0 0 0 1 1</span><br><span class="line">0 0 1 0 1 1 1 1</span><br><span class="line">|</span><br><span class="line">0 0 1 0 1 1 1 1</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ShapeFlags</span> = &#123;</span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="number">1</span>, <span class="comment">// 普通元素 00000001</span></span><br><span class="line">  <span class="attr">TEXT</span>: <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 文本节点 00000010</span></span><br><span class="line">  <span class="attr">FRAGMENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// Fragment 00000100</span></span><br><span class="line">  <span class="attr">COMPONENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 组件 00001000</span></span><br><span class="line">  <span class="attr">TEXT_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// 子节点是文本 00010000</span></span><br><span class="line">  <span class="attr">ARRAY_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">5</span>, <span class="comment">// 子节点是数组 00100000</span></span><br><span class="line">  <span class="attr">CHILDREN</span>: (<span class="number">1</span>&lt;&lt;<span class="number">4</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">5</span>) <span class="comment">// 子节点是文本或数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用二进制位运算<code>&lt;&lt;</code>和<code>|</code>,使用时用<code>&amp;</code>运算判断,如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span>)&#123;</span><br><span class="line">  <span class="comment">// 是普通元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">33</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ELMENT</span> <span class="comment">// 1 true</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span> <span class="comment">// 0 false</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span> <span class="comment">// 0 false</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span> <span class="comment">//    true</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">CHILDREN</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>生成可以用<br><code>let flag = ShapeFlags.ELEMENT | ShapeFlags.ARRAY_CHILDREN</code></p><p>VNode的初步形成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type,</span><br><span class="line">  props,</span><br><span class="line">  children,</span><br><span class="line">  shapeFlag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>vnode.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;isArray,isNumber,isString&#125; <span class="keyword">from</span> <span class="string">&#x27;../utils&#x27;</span></span><br><span class="line"><span class="comment">// ShapeFlags: 二进制位运算</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ShapeFlags</span> = &#123;</span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="number">1</span>, </span><br><span class="line">  <span class="attr">TEXT</span>: <span class="number">1</span> &lt;&lt; <span class="number">1</span>, </span><br><span class="line">  <span class="attr">FRAGMENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">2</span>, </span><br><span class="line">  <span class="attr">COMPONENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">3</span>, </span><br><span class="line">  <span class="attr">TEXT_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">4</span>, </span><br><span class="line">  <span class="attr">ARRAY_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  <span class="attr">CHILDREN</span>: (<span class="number">1</span>&lt;&lt;<span class="number">4</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Text：类型Symbol</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Text</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Text&#x27;</span>)</span><br><span class="line"><span class="comment">// Fragment：类型SymbolS</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Fragment</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Fragment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vnode有四种类型：dom元素，纯文本，Fragment，组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string | Object | Text | Fragment</span>&#125; type </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object | null</span>&#125; props </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String | Array | null | number</span>&#125; <span class="variable">children</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">VNode</span>&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">h</span> (type, props, children) &#123;</span><br><span class="line">  <span class="keyword">let</span> shapeFlag = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(type)) &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="title class_">Text</span>) &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="title class_">Fragment</span>) &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_">isString</span>(children)||<span class="title function_">isNumber</span>(children))&#123;</span><br><span class="line">    <span class="comment">// a|=b ==&gt; </span></span><br><span class="line">    shapeFlag |= <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span></span><br><span class="line">    children = children.<span class="title function_">toString</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(children)) &#123;</span><br><span class="line">    shapeFlag |= <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    props,</span><br><span class="line">    children,</span><br><span class="line">    shapeFlag</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>render.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ShapeFlags</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">export</span> funtion render (vnode,container) &#123;</span><br><span class="line">  <span class="title function_">mount</span>(vnode,container)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">funtion mount (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; shapeFlag &#125; = vnode</span><br><span class="line">  <span class="comment">// 判断不同类型的vnode</span></span><br><span class="line">  <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountElement</span>(vnode,container)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountText</span>(vnode,container)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountFragment</span>(vnode,container)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountComponent</span>(vnode,container)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountElement</span> (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type,props &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(type)</span><br><span class="line">  <span class="comment">// 挂载属性</span></span><br><span class="line">  <span class="title function_">mountProps</span>(props,el)</span><br><span class="line">  <span class="comment">// 挂载子节点</span></span><br><span class="line">  <span class="title function_">mountChildren</span>(vnode,el)</span><br><span class="line">  <span class="comment">// 挂载到容器</span></span><br><span class="line">  container.<span class="title function_">appendChild</span>(el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountText</span> (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> textNode = doucment.<span class="title function_">createTextNode</span>(vnode.<span class="property">children</span>)</span><br><span class="line">  container.<span class="title function_">appendChild</span>(textNode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountFragment</span> (vnode,container) &#123;</span><br><span class="line">  <span class="title function_">mountChildren</span>(vnode,container)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountComponent</span> (vnode,container) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区别 attributes 和 直接的dom api</span></span><br><span class="line"><span class="keyword">const</span> domPropsRE = <span class="regexp">/\[A-Z]|^(?:value|checked|selected|muted)$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountProps</span> (props,el) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = props[key]</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;class&#x27;</span>:</span><br><span class="line">        el.<span class="property">className</span> = value</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;style&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> styleName <span class="keyword">in</span> value)&#123;</span><br><span class="line">          el.<span class="property">style</span>[styleName] = value[styleName]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/^on[^a-z]/</span>.<span class="title function_">test</span>(key))&#123;</span><br><span class="line">          <span class="keyword">const</span> eventName = key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>()</span><br><span class="line">          el.<span class="title function_">addEventListener</span>(eventName,value )</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(domPropsRE.<span class="title function_">test</span>(key))&#123;</span><br><span class="line">          <span class="comment">// &#123;&quot;checked&quot;:&#x27;&#x27;&#125;</span></span><br><span class="line">          <span class="keyword">if</span>(value === <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> el[key] === <span class="string">&#x27;boolean&#x27;</span>)&#123;</span><br><span class="line">            value = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          el[key] = value</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(value == <span class="literal">null</span> || value === <span class="literal">false</span>)&#123;</span><br><span class="line">            el.<span class="title function_">removeAttribute</span>(key)</span><br><span class="line">          &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            el.<span class="title function_">setAttribute</span>(key,value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountChildren</span> (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;shapeFlag,children&#125; = vnode</span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="title function_">mountText</span>(vnode,container)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历子节点 递归</span></span><br><span class="line">    children.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> <span class="title function_">mount</span>(child,container))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现广义的diff算法 <code>patch</code></strong></p><p>render.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ShapeFlags</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="comment">// 比较vnode的Props差异函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;patchProps&#125; <span class="keyword">from</span> <span class="string">&#x27;./patchProp&#x27;</span></span><br><span class="line"><span class="comment">// 渲染render函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line">  <span class="comment">// 初次渲染</span></span><br><span class="line">  <span class="comment">// 上一次的vnode存储</span></span><br><span class="line">  <span class="keyword">const</span> prevVNode = container.<span class="property">_vnode</span></span><br><span class="line">  <span class="comment">// first: 判断n2是否存在(即newVNode)</span></span><br><span class="line">  <span class="keyword">if</span>(!vnode) &#123;</span><br><span class="line">    <span class="comment">// 如果n1存在,则卸载 </span></span><br><span class="line">    <span class="keyword">if</span>(prevNode) &#123;</span><br><span class="line">      <span class="comment">// 卸载</span></span><br><span class="line">      <span class="title function_">unmount</span>(prevVNode)</span><br><span class="line">      container.<span class="property">_vnode</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// n2存在 进行patch差异化比较</span></span><br><span class="line">    <span class="title function_">patch</span>(prevVNode,vnode,container)</span><br><span class="line">  &#125;</span><br><span class="line">  container.<span class="property">_vnode</span> = vnode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode | null</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">n1,n2,container,anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(n1 &amp;&amp; !<span class="title function_">isSameVNode</span>(n1,n2)) &#123;</span><br><span class="line">    <span class="comment">// n1存在 且 n1和n2不是同一个vnode</span></span><br><span class="line">    <span class="comment">// n1被卸载后，n2将会创建，因此anchor至关重要。需要将它设置为n1的下一个兄弟节点</span></span><br><span class="line">    anchor = (n1.<span class="property">anchor</span> || n1.<span class="property">el</span>).<span class="property">nextSibling</span></span><br><span class="line">    <span class="title function_">umount</span>(n1)</span><br><span class="line">    n1 = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; shapeFlag &#125; = n2</span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span>) &#123;</span><br><span class="line">    <span class="title function_">processComponent</span>(n1,n2,container,anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span>) &#123;</span><br><span class="line">    <span class="title function_">processText</span>(n1, n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span>) &#123;</span><br><span class="line">    <span class="title function_">processFragment</span>(n1, n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">processElement</span>(n1, n2, container, anchor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode: vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 递归创建子节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountElement</span>(<span class="params">vnode,container,anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type,props,shapeFlag,children &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> el = doucment.<span class="title function_">createElement</span>(type)</span><br><span class="line">  <span class="comment">// 挂载属性</span></span><br><span class="line">  <span class="keyword">if</span> (props) &#123;</span><br><span class="line">    <span class="title function_">patchProps</span>(<span class="literal">null</span>, props, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 挂载子节点</span></span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line">    el.<span class="property">textContent</span> = children <span class="comment">// 子结点是文本</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="title function_">mountChildren</span>(children, el) <span class="comment">// 子结点是数组 遍历子节点挂载</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountText</span>(<span class="params">vnode, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(vnode.<span class="property">children</span>)</span><br><span class="line">  vnode.<span class="property">el</span> = el</span><br><span class="line">  container.<span class="title function_">insertBefore</span>(el, anchor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array&lt;VNode&gt;</span>&#125; children:children DOM节点数组 分别挂载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 挂载子节点(数组类型)</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountChildren</span>(<span class="params">children, container, anchor</span>) &#123;</span><br><span class="line">  children.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">patch</span>(<span class="literal">null</span>, child, container, anchor)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 卸载vnode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmount</span> (vnode) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; shapeFlag,el &#125; = vnode</span><br><span class="line">  <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span>) &#123;</span><br><span class="line">    <span class="title function_">unmountComponent</span>(vnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span>) &#123;</span><br><span class="line">    <span class="title function_">unmountFragment</span>(vnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 卸载组件vnode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmountComponent</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmountFragment</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">el</span>: cur, <span class="attr">anchor</span>:end &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> &#123; parentNode &#125; = cur</span><br><span class="line">  <span class="keyword">while</span>(cur !== end) &#123;</span><br><span class="line">    <span class="keyword">const</span> next = cur.<span class="property">nextSibling</span></span><br><span class="line">    parentNode.<span class="title function_">removeChild</span>(cur)</span><br><span class="line">    cur = next</span><br><span class="line">  &#125;</span><br><span class="line">  parentNode.<span class="title function_">removeChild</span>(end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array&lt;VNode&gt;</span>&#125; Children: children DOM节点数组 分别卸载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比vnode是否相同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmountChildren</span>(<span class="params">Children</span>) &#123;</span><br><span class="line">  <span class="title class_">Children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">unmount</span>(child)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比元素Element并进行更新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processElement</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>( n1==<span class="literal">null</span> ) &#123;</span><br><span class="line">    <span class="comment">// 直接挂载n2</span></span><br><span class="line">    <span class="title function_">mountElement</span>(n2,container,anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">patchElement</span>(n1,n2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比Fragment并进行更新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processFragment</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fragmentStartAnchor = (n2.<span class="property">el</span> = n1 ? n1.<span class="property">el</span> : <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> fragmentEndAnchor = (n2.<span class="property">anchor</span> = n1 ? n1.<span class="property">anchor</span> : <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">  <span class="keyword">if</span>(n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">    container.<span class="title function_">insertBefore</span>(fragmentStartAnchor,anchor)</span><br><span class="line">    container.<span class="title function_">insertBefore</span>(fragmentEndAnchor,anchor)</span><br><span class="line">    <span class="title function_">mountChildren</span>(n2.<span class="property">children</span>,container,fragmentEndAnchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">patchChildren</span>(n1,n2,container,fragmentEndAnchor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 组件进行更新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processComponent</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比文本并进行更新 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processText</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">mountText</span>(n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    n2.<span class="property">el</span> = n1.<span class="property">el</span></span><br><span class="line">    n2.<span class="property">el</span>.<span class="property">textContent</span> = n2.<span class="property">children</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比vnode是否相同(比较复用)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchElement</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  n2.<span class="property">el</span> = n1.<span class="property">el</span></span><br><span class="line">  <span class="title function_">patchProps</span>(n1.<span class="property">props</span>, n2.<span class="property">props</span>, n2.<span class="property">el</span>)</span><br><span class="line">  <span class="title function_">patchChildren</span>(n1,n2,n2.<span class="property">el</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比vnode是否相同(比较复用)判断n1 n2 的子结点类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchChildren</span>(<span class="params">n1,n2,container,anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">shapeFlag</span>: prevShapeFlag, <span class="attr">children</span>: c1 &#125; = n1</span><br><span class="line"><span class="keyword">const</span> &#123; shapeFlag, <span class="attr">children</span>: c2 &#125; = n2</span><br><span class="line"><span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line"><span class="comment">// n2 是TEXT_CHILDREN 类型</span></span><br><span class="line"><span class="keyword">if</span> (c2 !== c1) &#123;</span><br><span class="line">container.<span class="property">textContent</span> = c2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line"><span class="title function_">unmountChildren</span>(c1)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line"><span class="comment">// n2 是ARRAY_CHILDREN 类型</span></span><br><span class="line"><span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line"><span class="comment">// n1 是TEXT_CHILDREN 类型</span></span><br><span class="line">container.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="title function_">mountChildren</span>(c2, container, anchor)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line"><span class="comment">// n1 是ARRAY_CHILDREN 类型</span></span><br><span class="line"><span class="title function_">patchArrayChildren</span>(c1, c2, container, anchor)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// n1 是EMPTY_CHILDREN 类型 null</span></span><br><span class="line"><span class="title function_">mountChildren</span>(c2, container, anchor)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// n2 是EMPTY_CHILDREN 类型 null</span></span><br><span class="line"><span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line"><span class="comment">// n1 是TEXT_CHILDREN 类型</span></span><br><span class="line">container.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line"><span class="comment">// n1 是ARRAY_CHILDREN 类型</span></span><br><span class="line"><span class="title function_">unmountChildren</span>(c1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchArrayChildren</span>(<span class="params">c1, c2, container, anchor</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> oldLength = c1.<span class="property">length</span></span><br><span class="line"><span class="keyword">const</span> newLength = c2.<span class="property">length</span></span><br><span class="line"><span class="keyword">const</span> commonLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldLength, newLength)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line"><span class="title function_">patch</span>(c1[i], c2[i], container, anchor)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (oldLength &gt; newLength) &#123;</span><br><span class="line"><span class="title function_">unmountChildren</span>(c1.<span class="title function_">slice</span>(commonLength))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">mountChildren</span>(c2.<span class="title function_">slice</span>(commonLength), container, anchor)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSameVNode</span>(<span class="params">prevVNode, vnode</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> prevVNode.<span class="property">type</span> === vnode.<span class="property">type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vnode.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在return中新添加属性</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  types,</span><br><span class="line">  props,</span><br><span class="line">  children,</span><br><span class="line">  shapeFlag,</span><br><span class="line">  <span class="attr">el</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">anchor</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">key</span>: props &amp;&amp; (props.<span class="property">key</span> != <span class="literal">null</span> ? props.<span class="property">key</span> : <span class="literal">null</span>),</span><br><span class="line"><span class="attr">component</span>: <span class="literal">null</span>, <span class="comment">//专门用于存储组件的实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>vue3中diff算法</strong><br>首先是重新完成render.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ShapeFlags</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./vnode&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; patchProps &#125; <span class="keyword">from</span> <span class="string">&quot;./patchProps&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mountComponent &#125; <span class="keyword">from</span> <span class="string">&quot;./component&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> prevVNode = container.<span class="property">_vnode</span></span><br><span class="line"><span class="comment">// first：判断n2是否存在</span></span><br><span class="line"><span class="keyword">if</span> (!vnode) &#123;</span><br><span class="line"><span class="keyword">if</span> (prevVNode) &#123;</span><br><span class="line"><span class="title function_">unmount</span>(prevVNode)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// n2存在</span></span><br><span class="line"><span class="title function_">patch</span>(prevVNode, vnode, container)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 存prevVNode</span></span><br><span class="line">  container.<span class="property">_vnode</span> = vnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .... </span></span><br><span class="line"><span class="comment">// 简单的diff比较</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchUnkeyedChildren</span>(<span class="params">c1, c2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldLength = c1.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> newLength = c2.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> commonLenght = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldLength, newLength)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;commonlength;i++)&#123;</span><br><span class="line">    <span class="title function_">patch</span>(c1[i],c2[i],container)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(oldLength &gt; newLength)&#123;</span><br><span class="line">    <span class="title function_">unmountChildren</span>(c1.<span class="title function_">slice</span>(commonLength))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">mountChildren</span>(c2.<span class="title function_">slice</span>(commonLength),container,anchor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// react中的diff算法原理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactPathchKeyedChildren</span>(<span class="params">c1,c2,container,anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  c1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">perv, j</span>)=&gt;</span>&#123;</span><br><span class="line">    map.<span class="title function_">set</span>(perv.<span class="property">key</span>,&#123;perv,j&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> maxNewIndexSoFar = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;c2.<span class="property">length</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> next = c2[i]</span><br><span class="line">    <span class="keyword">const</span> curAnchor = i-<span class="number">1</span>&lt;<span class="number">0</span> ? c1[<span class="number">0</span>].<span class="property">el</span> : c2[ i-<span class="number">1</span> ].<span class="property">el</span>.<span class="property">nextSibling</span></span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">has</span>(next.<span class="property">key</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; prev, j &#125; = map.<span class="title function_">get</span>(next.<span class="property">key</span>)</span><br><span class="line">      <span class="title function_">patch</span>(prev,next,container,anchor)</span><br><span class="line">      <span class="keyword">if</span> (j &lt; maxNewIndexSoFar) &#123;</span><br><span class="line">        container.<span class="title function_">insertBefore</span>(next.<span class="property">el</span>, curAnchor)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        maxNewIndexSoFar = j</span><br><span class="line">      &#125;</span><br><span class="line">      map.<span class="title function_">delete</span>(next.<span class="property">key</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">patch</span>(<span class="literal">null</span>,next,container,curAnchor)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;perv&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">unmount</span>(perv)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3中的diff算法 双端 + 最长子序列算法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchKeyedChildren</span>(<span class="params">c1, c2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> e1 = c1.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> e2 = c2.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="comment">// 1.从左向右依次对比</span></span><br><span class="line">  <span class="keyword">while</span>(i &lt;= e1 &amp;&amp; i&lt;= e2 &amp;&amp; c1[i].<span class="property">key</span> === c2[i].<span class="property">key</span> ) &#123;</span><br><span class="line">    <span class="title function_">patch</span>(c1[i], c2[i], container, anchor)</span><br><span class="line">    i++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.从右向左一次对比</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2 &amp;&amp; c1[e1].<span class="property">key</span> === c2[e2].<span class="property">key</span>) &#123;</span><br><span class="line"><span class="title function_">patch</span>(c1[e1], c2[e1], container, anchor)</span><br><span class="line">e1--</span><br><span class="line">e2--</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; e1) &#123;</span><br><span class="line"><span class="comment">// 3. 经过1,2 直接将旧结点比对完，则剩下的新结点直接mount</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt;= e2; j++) &#123;</span><br><span class="line"><span class="keyword">const</span> nextPos = e2 + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> curAnchor = (c2[nextPos] &amp;&amp; c2[nextPos].<span class="property">el</span>) || anchor</span><br><span class="line"><span class="title function_">path</span>(<span class="literal">null</span>, c2[j], container, curAnchor)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; e2) &#123;</span><br><span class="line"><span class="comment">// 3. 经过1,2 直接将新结点比对完，则剩下的旧结点直接unmount</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= e1; j++) &#123;</span><br><span class="line"><span class="title function_">unmount</span>(c1[j])</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 4. 若不满足3 采用传统的diff算法 但是不真的移动和添加，只做标记和删除</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">c1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">perv, j</span>) =&gt;</span> &#123;</span><br><span class="line">map.<span class="title function_">set</span>(perv.<span class="property">key</span>, &#123; perv, j &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> maxNewIndexSoFar = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> move = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> source = <span class="keyword">new</span> <span class="title class_">Array</span>(e2 - i + <span class="number">1</span>).<span class="title function_">fill</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> toMounted = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; c2.<span class="property">length</span>; k++) &#123;</span><br><span class="line"><span class="keyword">const</span> next = c2[k]</span><br><span class="line"><span class="keyword">if</span> (map.<span class="title function_">has</span>(next.<span class="property">key</span>)) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; prev, j &#125; = map.<span class="title function_">get</span>(next.<span class="property">key</span>)</span><br><span class="line"><span class="title function_">patch</span>(prev, next, container, anchor)</span><br><span class="line"><span class="keyword">if</span> (j &lt; maxNewIndexSoFar) &#123;</span><br><span class="line">move = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxNewIndexSoFar = j</span><br><span class="line">&#125;</span><br><span class="line">source[k] = j</span><br><span class="line">map.<span class="title function_">delete</span>(next.<span class="property">key</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">toMounted.<span class="title function_">push</span>(k + i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; perv &#125;</span>) =&gt;</span> <span class="title function_">unmount</span>(perv))</span><br><span class="line"><span class="keyword">if</span> (move) &#123;</span><br><span class="line"><span class="comment">// 5.需要移动，则采用新的最长上升子序列算法</span></span><br><span class="line"><span class="keyword">const</span> seq = <span class="title function_">getSequence</span>(source)</span><br><span class="line"><span class="keyword">let</span> j = seq.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = source.<span class="property">length</span> - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line"><span class="keyword">if</span> (k === seq[j]) &#123;</span><br><span class="line"><span class="comment">// 不用移动</span></span><br><span class="line">j--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> pos = k + i</span><br><span class="line"><span class="keyword">const</span> nextPos = pos + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> curAnchor = (c2[nextPos] &amp;&amp; c2[nextPos].<span class="property">el</span>) || anchor</span><br><span class="line"><span class="keyword">if</span> (source[k] === -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// mount</span></span><br><span class="line"><span class="title function_">patch</span>(<span class="literal">null</span>, c2[pos], container, curAnchor)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 移动</span></span><br><span class="line">container.<span class="title function_">insertBefore</span>(c2[pos].<span class="property">el</span>, curAnchor)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (toMounted.<span class="property">length</span>) &#123;</span><br><span class="line"><span class="comment">// 6.不需要移动，但还有未添加的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = toMounted.<span class="property">length</span> - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line"><span class="keyword">const</span> pos = toMounted[k]</span><br><span class="line"><span class="keyword">const</span> nextPos = pos + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> curAnchor = (c2[nextPos] &amp;&amp; c2[nextPos].<span class="property">el</span>) || anchor</span><br><span class="line"><span class="title function_">patch</span>(<span class="literal">null</span>, c2[pos], container, curAnchor)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最长子序列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSequence</span> (nums) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line"><span class="keyword">const</span> position = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] === -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// result[result.length - 1]可能为undefined，此时nums[i] &gt; undefined为false</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; result[result.<span class="property">length</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">result.<span class="title function_">push</span>(nums[i])</span><br><span class="line">position.<span class="title function_">push</span>(result.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> l = <span class="number">0</span>,</span><br><span class="line">r = result.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="keyword">const</span> mid = ~~((l + r) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; result[mid]) &#123;</span><br><span class="line">l = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; result[mid]) &#123;</span><br><span class="line">r = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result[l] = nums[i]</span><br><span class="line">position.<span class="title function_">push</span>(l)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cur = result.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line"><span class="comment">// 这里复用了result，它本身已经没用了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = position.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; cur &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (position[i] === cur) &#123;</span><br><span class="line">result[cur--] = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组件的实现方法</strong></p><blockquote><p>从开发者的视角：组件分为状态组件和函数组件<br>vue3中的状态组件和函数组件类似，下面只讨论状态组件的实现</p></blockquote><p>React的组件示例(class组件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  add = <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3的组件示例(optional) (渲染函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    add () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render (cxt) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>,&#123;&#125;,ctx.<span class="property">count</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>,&#123;<span class="attr">onClick</span>: ctx.<span class="property">add</span>&#125;,<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      ])</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Vue3的组件示例(composition) (渲染函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>)=&gt; &#123;</span><br><span class="line">      count.<span class="property">value</span>++</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      add</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render (cxt) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>,&#123;&#125;,ctx.<span class="property">count</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>,&#123;<span class="attr">onClick</span>: ctx.<span class="property">add</span>&#125;,<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      ])</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以看出 从实现的角度上来说，组件都有以下几个共同点:</p><ul><li>都有 <code>instance</code> (实例) 以承载内部的状态，方法等</li><li>都有一个 <code>render</code> 函数</li><li>都通过 <code>render</code> 函数产出<code>VNode</code></li><li>都有一套更新的策略，以重新执行 <code>render</code> 函数 </li><li>在此基础上附加各种能力，如生命周期，通信机制，slot，provide，inject等</li></ul><p><strong>component.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;../reactive/reactive&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; effect &#125; <span class="keyword">from</span> <span class="string">&quot;../reactive/effect&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; patch &#125; <span class="keyword">from</span> <span class="string">&quot;./render&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; normalizeVNode &#125; <span class="keyword">from</span> <span class="string">&quot;./vnode&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; queueJob &#125; <span class="keyword">from</span> <span class="string">&quot;./scheduler&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateProps</span>(<span class="params">instance, vnode</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">type</span>: <span class="title class_">Component</span>, <span class="attr">props</span>: vnodeProps &#125; = vnode</span><br><span class="line"><span class="keyword">const</span> props = (instance.<span class="property">props</span> = &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> attrs = (instance.<span class="property">attrs</span> = &#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vnodeProps) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Component</span>.<span class="property">props</span>?.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">props[key] = vnodeProps[key]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">attrs[key] = vnodeProps[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// toThink: props源码是shallowReactive，确实需要吗?</span></span><br><span class="line"><span class="comment">// 需要。否则子组件修改props不会触发更新</span></span><br><span class="line">instance.<span class="property">props</span> = <span class="title function_">reactive</span>(instance.<span class="property">props</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mountComponent</span>(<span class="params">vnode, container, anchor</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">type</span>: <span class="title class_">Component</span> &#125; = vnode</span><br><span class="line"><span class="keyword">const</span> instance = (vnode.<span class="property">component</span> = &#123;</span><br><span class="line"><span class="attr">props</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">attrs</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">setupState</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">subTree</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">ctx</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">update</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">isMounted</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// setupComponent</span></span><br><span class="line"><span class="title function_">updateProps</span>(instance, vnode)</span><br><span class="line"><span class="comment">// 源码：instance.setupState = proxyRefs(setupResult)</span></span><br><span class="line">instance.<span class="property">setupState</span> = <span class="title class_">Component</span>.<span class="property">setup</span>?.(instance.<span class="property">props</span>, &#123;</span><br><span class="line"><span class="attr">attrs</span>: instance.<span class="property">attrs</span>,</span><br><span class="line"><span class="attr">slot</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">emit</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;)</span><br><span class="line">instance.<span class="property">ctx</span> = &#123;</span><br><span class="line">...instance.<span class="property">props</span>,</span><br><span class="line">...instance.<span class="property">setupState</span>,</span><br><span class="line">&#125;</span><br><span class="line">instance.<span class="property">update</span> = <span class="title function_">effect</span>(</span><br><span class="line"><span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!instance.<span class="property">isMounted</span>) &#123;</span><br><span class="line"><span class="comment">// mount</span></span><br><span class="line"><span class="keyword">const</span> subTree = (instance.<span class="property">subTree</span> = <span class="title function_">normalizeVNode</span>(</span><br><span class="line"><span class="title class_">Component</span>.<span class="title function_">render</span>(instance.<span class="property">ctx</span>)</span><br><span class="line">))</span><br><span class="line"><span class="title function_">fullThrough</span>(instance, subTree)</span><br><span class="line"><span class="title function_">patch</span>(<span class="literal">null</span>, subTree, container, anchor)</span><br><span class="line">instance.<span class="property">isMounted</span> = <span class="literal">true</span></span><br><span class="line">vnode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (instance.<span class="property">next</span>) &#123;</span><br><span class="line"><span class="comment">// 被动更新</span></span><br><span class="line">vnode = instance.<span class="property">next</span></span><br><span class="line">instance.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line"><span class="title function_">updateProps</span>(instance, vnode)</span><br><span class="line">instance.<span class="property">ctx</span> = &#123;</span><br><span class="line">...instance.<span class="property">props</span>,</span><br><span class="line">...instance.<span class="property">setupState</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> prev = instance.<span class="property">subTree</span></span><br><span class="line"><span class="keyword">const</span> subTree = (instance.<span class="property">subTree</span> = <span class="title function_">normalizeVNode</span>(</span><br><span class="line"><span class="title class_">Component</span>.<span class="title function_">render</span>(instance.<span class="property">ctx</span>)</span><br><span class="line">))</span><br><span class="line"><span class="title function_">fullThrough</span>(instance, subTree)</span><br><span class="line"><span class="title function_">patch</span>(prev, subTree, container, anchor)</span><br><span class="line">vnode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123; <span class="attr">scheduler</span>: queueJob &#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fullThrough</span>(<span class="params">instance, subTree</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(instance.<span class="property">attrs</span>).<span class="property">length</span>) &#123;</span><br><span class="line">subTree.<span class="property">props</span> = &#123;</span><br><span class="line">...subTree.<span class="property">props</span>,</span><br><span class="line">...instance.<span class="property">attrs</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>scheduler.js</strong> (调度机制) nextTick原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = []</span><br><span class="line"><span class="keyword">let</span> isFlushing = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> resolvedPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"><span class="keyword">let</span> currentFlushPromise = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> fn</span><br><span class="line">? (currentFlushPromise || resolvedPromise).<span class="title function_">then</span>(fn)</span><br><span class="line">: currentFlushPromise || resolvedPromise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queueJob</span>(<span class="params">job</span>) &#123;</span><br><span class="line"><span class="comment">// 如果队列中没有这个job，或者队列为空，就把job推入队列</span></span><br><span class="line"><span class="keyword">if</span> (!queue.<span class="title function_">includes</span>(job) || !queue.<span class="property">length</span>) &#123;</span><br><span class="line">queue.<span class="title function_">push</span>(job)</span><br><span class="line"><span class="title function_">queueFlush</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queueFlush</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isFlushing) &#123;</span><br><span class="line">isFlushing = <span class="literal">true</span></span><br><span class="line">currentFlushPromise = resolvedPromise.<span class="title function_">then</span>(flushJobs)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushJobs</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.<span class="property">length</span>; i++) &#123;</span><br><span class="line">queue[i]()</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">isFlushing = <span class="literal">false</span></span><br><span class="line">queue.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">currentFlushPromise = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a><strong>编译步骤</strong></h2><p><strong>模板代码</strong> –&gt; <code>parse</code> –&gt; <strong>AST</strong> –&gt; <code>transform</code> –&gt; <strong>AST+codegenNode</strong> –&gt; <code>codegen</code> –&gt; <strong>渲染函数代码</strong></p><p>parse: 原始的模板代码就是一段字符串，通过解析<code>parse</code> 转换为原始<code>AST</code>抽象语法树<br>transform: 对<code>AST</code>进行转换，转换为<code>codegenNode</code>, <code>codegenNode</code> 是<code>AST</code>到生成渲染函数代码的中间步骤，它由解析原始<code>AST</code>的语义而得来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ok&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>没有什么区别，都是一个元素，带有一个不同的属性而已。然而<code>v-if</code>是带有特殊语义的，不能像一般的纯元素节点一样采用同样的代码生成方式。<code>transform</code>的作用就在于此，一方面解析原始<code>AST</code>的语义，另一方面要为生成代码做准备. transfrom 是整个vue compiler模块中最复杂的部分</p><p>codegen: 即是 <code>code generate</code> 遍历 codegenNode 递归地生成最终的渲染函数的代码</p><p><strong>parse实现</strong></p><p>认识AST  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AST Node的类型  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NodeTypes</span> = &#123;</span><br><span class="line">  <span class="attr">ROOT</span>:<span class="string">&#x27;ROOT&#x27;</span>, <span class="comment">// 根节点</span></span><br><span class="line">  <span class="attr">ELEMENT</span>:<span class="string">&#x27;ELEMENT&#x27;</span>, <span class="comment">// 元素节点</span></span><br><span class="line">  <span class="attr">TEXT</span>:<span class="string">&#x27;TEXT&#x27;</span>, <span class="comment">// 文本节点</span></span><br><span class="line">  <span class="attr">SIMPLE_EXPRESSION</span>:<span class="string">&#x27;SIMPLE_EXPRESSION&#x27;</span>, <span class="comment">// 简单表达式</span></span><br><span class="line">  <span class="attr">INTERPOLATION</span>:<span class="string">&#x27;INTERPOLATION&#x27;</span>, <span class="comment">// 插值表达式</span></span><br><span class="line">  <span class="attr">ATTRIBUTE</span>:<span class="string">&#x27;ATTRIBUTE&#x27;</span>, <span class="comment">// 属性节点</span></span><br><span class="line">  <span class="attr">DIRECTIVE</span>:<span class="string">&#x27;DIRECTIVE&#x27;</span>, <span class="comment">// 指令节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ElementTypes</span> = &#123;</span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="string">&#x27;ELEMENT&#x27;</span>, <span class="comment">// 普通元素</span></span><br><span class="line">  <span class="attr">COMPONENT</span>: <span class="string">&#x27;COMPONENT&#x27;</span>, <span class="comment">// 组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ROOT</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">TemplateChildNode</span>[], <span class="comment">// 子节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>纯文本节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">TEXT</span>,</span><br><span class="line"><span class="attr">content</span>: string</span><br></pre></td></tr></table></figure><ol start="3"><li>表达式节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>,</span><br><span class="line">  <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">  <span class="comment">// 静态即content就是一段字符串,动态的content指的是一个变量，或一段js表达式</span></span><br><span class="line">  <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>插值节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">INTERPOLATION</span>,</span><br><span class="line">  <span class="attr">content</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>,</span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">    <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>元素节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ELEMENT</span>,</span><br><span class="line">  <span class="attr">tag</span>: string, <span class="comment">// 标签名</span></span><br><span class="line">  <span class="attr">tagType</span>: <span class="title class_">ElementTypes</span>, <span class="comment">// 元素类型(组件还是原生元素)</span></span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">Array</span>&lt;<span class="title class_">AttributeNode</span> | <span class="title class_">DirectiveNode</span>&gt;, <span class="comment">// 属性</span></span><br><span class="line">  <span class="attr">directives</span>: <span class="title class_">DirectiveNode</span>[], <span class="comment">// 指令数组</span></span><br><span class="line">  <span class="attr">isSelfClosing</span>: boolean, <span class="comment">// 是否自闭合</span></span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">TemplateChildNode</span>[], <span class="comment">// 子节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>属性节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ATTRIBUTE</span>,</span><br><span class="line">  <span class="attr">name</span>: string, <span class="comment">// 属性名</span></span><br><span class="line">  <span class="attr">value</span>: <span class="literal">undefined</span> | &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">TEXT</span> | , <span class="comment">// 属性值类型</span></span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 属性值</span></span><br><span class="line">  &#125; <span class="comment">// 纯文本节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>指令节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">DIRECTIVE</span>,</span><br><span class="line">  <span class="attr">name</span>: string, <span class="comment">// 指令名</span></span><br><span class="line">  <span class="attr">exp</span>: <span class="literal">undefined</span> | &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>, <span class="comment">// 表达式类型</span></span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">    <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">  &#125;, <span class="comment">// 表达式节点</span></span><br><span class="line">  <span class="attr">arg</span>: <span class="literal">undefined</span> | &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>, <span class="comment">// 表达式类型</span></span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">    <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">  &#125;, <span class="comment">// 表达式节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;myClass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name:bind arg:class exp:myClass --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name:on arg:click exp:handleClick --&gt;</span></span><br></pre></td></tr></table></figure><p>最终展示结果<br><code>&lt;div id=&quot;foo&quot; v-if=&quot;ok&quot;&gt;hello &#123;&#123;name&#125;&#125;&lt;/div&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ROOT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">      <span class="attr">tagType</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="attr">props</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;ATTRIBUTE&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;TEXT&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">directives</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;DIRECTIVE&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;if&quot;</span>,</span><br><span class="line">          <span class="attr">exp</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;SIMPLE_EXPRESSION&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">            <span class="attr">isStatic</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">isSelfClosing</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;TEXT&quot;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;hello &quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;INTERPOLATION&quot;</span>,</span><br><span class="line">          <span class="attr">content</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;SIMPLE_EXPRESSION&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="attr">isStatic</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ast.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NodeTypes</span> = &#123;</span><br><span class="line"><span class="attr">ROOT</span>: <span class="string">&quot;ROOT&quot;</span>, <span class="comment">// 根节点</span></span><br><span class="line"><span class="attr">ELEMENT</span>: <span class="string">&quot;ELEMENT&quot;</span>, <span class="comment">// 元素节点</span></span><br><span class="line"><span class="attr">TEXT</span>: <span class="string">&quot;TEXT&quot;</span>, <span class="comment">// 文本节点</span></span><br><span class="line"><span class="attr">SIMPLE_EXPRESSION</span>: <span class="string">&quot;SIMPLE_EXPRESSION&quot;</span>, <span class="comment">// 简单表达式</span></span><br><span class="line"><span class="attr">INTERPOLATION</span>: <span class="string">&quot;INTERPOLATION&quot;</span>, <span class="comment">// 插值表达式</span></span><br><span class="line"><span class="attr">ATTRIBUTE</span>: <span class="string">&quot;ATTRIBUTE&quot;</span>, <span class="comment">// 属性节点</span></span><br><span class="line"><span class="attr">DIRECTIVE</span>: <span class="string">&quot;DIRECTIVE&quot;</span>, <span class="comment">// 指令节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ElementTypes</span> = &#123;</span><br><span class="line"><span class="attr">ELEMENT</span>: <span class="string">&quot;ELEMENT&quot;</span>, <span class="comment">// 普通元素</span></span><br><span class="line"><span class="attr">COMPONENT</span>: <span class="string">&quot;COMPONENT&quot;</span>, <span class="comment">// 组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRoot</span>(<span class="params">children</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ROOT</span>,</span><br><span class="line"><span class="attr">children</span>: children,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>parse.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NodeTypes</span>, <span class="title class_">ElementTypes</span>, createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;./ast&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">content</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> context = <span class="title function_">createParserContext</span>(content)</span><br><span class="line"><span class="keyword">const</span> children = <span class="title function_">parseChildren</span>(context)</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createRoot</span>(children)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createParserContext</span>(<span class="params">content</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">options</span>: &#123;</span><br><span class="line"><span class="attr">delimiters</span>: [<span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>], <span class="comment">// 插值表达式的分隔符</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">source</span>: content,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseChildren</span>(<span class="params">context</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> s = context.<span class="property">source</span></span><br><span class="line"><span class="keyword">if</span> (s.<span class="title function_">startsWith</span>(context.<span class="property">options</span>.<span class="property">delimiters</span>[<span class="number">0</span>])) &#123;</span><br><span class="line"><span class="comment">// parseInterpolation</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] === <span class="string">&quot;&lt;&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// parseElement</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// parseText</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">advanceBy</span>(<span class="params">context, numberOfCharacters</span>) &#123;</span><br><span class="line">context.<span class="property">source</span> = context.<span class="property">source</span>.<span class="title function_">slice</span>(numberOfCharacters)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">advanceSpaces</span>(<span class="params">context</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> match = <span class="regexp">/^[\t\r\n\f ]+/</span>.<span class="title function_">exec</span>(context.<span class="property">source</span>)</span><br><span class="line"><span class="keyword">if</span> (match) &#123;</span><br><span class="line"><span class="title function_">advanceBy</span>(context, match[<span class="number">0</span>].<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git、PM2、Linux指令使用合集</title>
      <link href="/2023/11/25/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/11/25/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h1><h2 id="git使用基本指令"><a href="#git使用基本指令" class="headerlink" title="git使用基本指令"></a>git使用基本指令</h2><ul><li><p><code>git init</code>：初始化项目文件夹,为改项目的根目录下面添加.git文件</p></li><li><p><code>git add .</code> : 将改项目的所有文件添加到暂存区里面(<strong>可以方便merge和commit</strong>)</p></li><li><p><code>git commit -m &#39;&lt;commitMessage&gt;&#39;</code> : <strong>commitMessage</strong> 是你提交要说明的消息,提交的备注</p></li><li><p><code>git remote add &lt;remoteName&gt; &lt;远程地址&gt;</code> : <strong>remoteName：为远程仓库取的名称 通常是origin</strong> 本地的git文件关联到远程的Github仓库</p></li><li><p><code>git pull</code> : 拉取远程分支的信息，并可以与本地合并信息</p></li><li><p><code>git push -f </code>: 提交到远程仓库,-f是强制推送</p></li><li><p><code>git clone</code>：克隆项目到本地</p></li></ul><blockquote><p>注意：当我们使用 <code>git clone</code>若是克隆了很大的库，我们的互联网很慢，很常见的问题就是连接关闭整个克隆取消如同下面的报错</p><p>Cloning into ‘large-repository’…<br>remote: Counting objects: 20248, done.<br>remote: Compressing objects: 100% (10204&#x2F;10204), done.<br>error: RPC failed; curl 18 transfer closed with outstanding read data remaining<br>fatal: The remote end hung up unexpectedly<br>fatal: early EOF<br>fatal: index-pack failed</p></blockquote><p>要想解决这个问题我们可以先clone小一点的版本之后在<code>git fetch</code> 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://github.com/large-repository --depth 1</span><br><span class="line">git fetch --unshallow</span><br></pre></td></tr></table></figure><h2 id="git的远程分支和本地分支"><a href="#git的远程分支和本地分支" class="headerlink" title="git的远程分支和本地分支"></a>git的远程分支和本地分支</h2><p>git管理的创库最大的好处就是多人可以协同开发，这里我们可以分成远程分支(<strong>remote</strong>)和本地分支(<strong>local</strong>)<br><code>git branch -a</code> 可以观察出项目存在的那些分支,一般红色字体表示的是远程分支</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/git_1.png" alt="不同的分支。"/></div><span class="image-caption">不同的分支。</span></div><blockquote><p>本地分支: 本地存在的不同分支版本<br>远程分支: 项目中存在的不同的版本</p></blockquote><p>创建本地分支：<code>git checkout -b explosion:</code> 创建叫<strong>explosion</strong>分支<br>删除本地分支：<code>git branch -d explosion:</code> 删除<strong>explosion</strong>分支<br>创建远程分支：<code>git push &lt;remoteName&gt; &lt;localBranch&gt;:&lt;remoteBranch&gt;</code> 提交本地分支到想要的远程分支<br>删除远程分支：<code>git push &lt;remoteName&gt; –-delete explosion：</code>删除 explosion  </p><p>如何查看分支  </p><ul><li><code>git branch</code> : 查看本地分支</li><li><code>git branch -r</code> : 查看远程分支</li><li><code>git branch -a</code> : 查看所有分支</li><li><code>git branch -vv：</code>查看本地分支和远程分支的关联</li></ul><p>将本地分支与远程分支关联起来：<code>git branch --set-upstream-to &lt;remoteName&gt; explosion</code> 将本地分支关联到远程分支</p><p><strong>推送分支</strong></p><p><code>git push &lt;remoteName&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</code>推送指定分支到指定远程分支<br><code>git push &lt;remoteName&gt; &lt;localBranch&gt;</code> 将指定分支推送到同名远程分支<br><code>git push -u &lt;remoteName&gt; &lt;localBranch&gt;</code> 创建与本地同名远程分支</p><p><strong>拉取分支</strong></p><p><code>git pull &lt;remoteName&gt; &lt;remoteBranch&gt;:&lt;localBranch&gt;</code> 拉取远程分支到指定本地分支操作</p><h2 id="git的解决冲突merge"><a href="#git的解决冲突merge" class="headerlink" title="git的解决冲突merge"></a>git的解决冲突merge</h2><p>当我们完成自己写的代码的时候需要提交到主分支上面，有时候就不得不去merge，merge是一个技术活，很容易一不小心就把别人写的代码覆盖掉</p><blockquote><p>第一种情况就是你正在主分支上面写东西要提交到主分支上面但是你写之前不知道你的版本是否跟库里面的版本相同，你可以手动merge</p></blockquote><p><code>git add .</code><br><code>git commit -m &#39;xxx&#39;</code><br><code>git pull</code><br>输入三个指令之后会在本地生成待合并的文件，可以手动解决完冲突，重新push即可</p><blockquote><p>第二种情况就是你提交在你自己写的分支上面然后需要合并到主分支上面下面假设我自己的分支名词叫 <code>yueyun</code> 主分支名词叫<code>master</code><br>注意是<code>master</code>需要合并<code>yueyun</code> </p></blockquote><p><code>git checkout master</code> （切换到主分支master上面）<br><code>git merge yueyun</code> (将现在的master分支合并yueyun)<br><code>git push origin master</code> (把本地的分支master同步到远程)<br><strong>注意：此时的yueyun和master都是本地分支存在的不能直接用远程分支来操控,将本地分支合并完成后在提交到远程分支覆盖既可</strong></p><h2 id="git的指令回退版本"><a href="#git的指令回退版本" class="headerlink" title="git的指令回退版本"></a>git的指令回退版本</h2><p><code>git log</code> : 控制台输入git log 可以看到之前的版本信息</p><p><code>git reset -- hard HEAD^</code> : 回退到上个版本<br><code>git reset -- hard HEAD~3</code> : 回退到前3次提交之前,以此类推<br><code>git reset -- hard commit-id</code> : 回退&#x2F;进到 指定的commit的id码<br><code>commit-id</code> : 不同的仓库管理会生成不同的commit-id</p><h2 id="git的一些好用的操作"><a href="#git的一些好用的操作" class="headerlink" title="git的一些好用的操作"></a>git的一些好用的操作</h2><p>1.如果发现有人更改过仓库但是没有merge而本地的是自己辛辛苦苦写好的那么我们可以直接<br><strong><code>git push -f</code></strong> </p><h1 id="PM2指令"><a href="#PM2指令" class="headerlink" title="PM2指令"></a>PM2指令</h1><p><strong>PM2是node进程管理工具，可以利用其简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等</strong></p><ul><li><p>首先是安装<code>PM2</code> (确保你的电脑中有node环境)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br><span class="line"># or</span><br><span class="line">yarn <span class="variable language_">global</span> add pm2</span><br></pre></td></tr></table></figure></li><li><p>pm2启动应用<br><code>pm2 start app.js</code> 即启动，守护和监视应用程序的简单方法</p></li><li><p>pm2启动其他的应用程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pm2 start clash.sh</span><br><span class="line">pm2 start python-app.py --watch</span><br><span class="line">pm2 start binary-file -- --port 1520</span><br><span class="line">pm2 start yarn -n <span class="string">&quot;explosion&quot;</span> -- start</span><br><span class="line">pm2 start ./gocq</span><br><span class="line"><span class="comment"># 等等等</span></span><br></pre></td></tr></table></figure></li><li><p>常用命令的参数说明:</p><ul><li><code>--watch</code>: 监听应用目录的变化，一旦发生变化，自动重启。如要准确监听深文件，可以自定义配置文件</li><li><code>-i --instances</code>: 启用多少个实例，可以用于负载均衡，如果是<code>-i 0</code>或者<code>-i max</code>,则根据当前机器的核数确定实例数目</li><li><code>--ignore-watch</code>:排除监听的目录&#x2F;文件，可以是特定的文件名，也可以是正则。比如 <code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;</code></li><li><code>-n --name</code>：应用的名称。查看应用信息的时候可以用到。</li><li><code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li><li><code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li><li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用。</li></ul></li><li><p>管理应用程序状态很简单，下面是一些常用的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 restart app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 reload app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 stop app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 delete app_name|app_id</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有任务</span></span><br><span class="line">pm2 stop all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看进程状态</span></span><br><span class="line">pm2 ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个进程信息</span></span><br><span class="line">pm2 describe 0</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><ul><li><p>配置文件里的设置项，跟命令参数基本是一一对应好的</p></li><li><p>可以选择<code>yaml</code> 和 <code>json</code> 文件</p></li><li><p><code>json</code>格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。</p></li><li><p>如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如–env）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span>        <span class="punctuation">:</span> <span class="string">&quot;fis-receiver&quot;</span><span class="punctuation">,</span>  <span class="comment">// 应用名称</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span>      <span class="punctuation">:</span> <span class="string">&quot;./bin/www&quot;</span><span class="punctuation">,</span>  <span class="comment">// 实际启动脚本</span></span><br><span class="line">  <span class="attr">&quot;cwd&quot;</span>         <span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span>  <span class="comment">// 当前工作路径</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">// 监控变化的目录，一旦变化，自动重启</span></span><br><span class="line">    <span class="string">&quot;bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;routers&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignore_watch&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">// 从监控目录中排除</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="string">&quot;logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watch_options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;followSymlinks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_file&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;./logs/app-err.log&quot;</span><span class="punctuation">,</span>  <span class="comment">// 错误日志路径</span></span><br><span class="line">  <span class="attr">&quot;out_file&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;./logs/app-out.log&quot;</span><span class="punctuation">,</span>  <span class="comment">// 普通日志路径</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;NODE_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production&quot;</span>  <span class="comment">// 环境参数，当前指定为生产环境</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
            <tag> PM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript语言学习</title>
      <link href="/2023/11/21/Javascript%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/11/21/Javascript%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVASCRIPT-简介"><a href="#JAVASCRIPT-简介" class="headerlink" title="JAVASCRIPT 简介"></a>JAVASCRIPT 简介</h1><p>javascript最初被创建的原因是作在浏览器环境中使得浏览器的交互效果更加生动</p><p>javascript这种编程语言写出来的程序称之为<mark class="hl-label blue">脚本</mark> ，即是可以被直接写在网页的 HTML 中，在页面加载的时候自动执行。脚本被以纯文本的形式提供和执行。它们不需要特殊的准备或编译即可运行</p><p>发展到如今 JavaScript不仅能在浏览器中执行，也可以在服务端执行，甚至可以在任意存在Javascript引擎的设置中执行</p><p>浏览器中嵌入了 JavaScript 引擎，有时也称作“JavaScript 虚拟机”。</p><p>比如：<strong>V8</strong>(<code>javascript engine</code>)、<strong>SpiderMonkey</strong> 等</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>引擎是如何工作的？</strong></p></div><blockquote><p>引擎很复杂，但是基本原理很简单。</p><ul><li>引擎（如果是浏览器，则引擎被嵌入在其中）读取（“解析”）脚本。</li><li>然后，引擎将脚本转化（“编译”）为机器语言。</li><li>然后，机器代码快速地执行。</li></ul><p>引擎会对流程中的每个阶段都进行优化。它甚至可以在编译的脚本运行时监视它，分析流经该脚本的数据，并根据获得的信息进一步优化机器代码。</p></blockquote><h2 id="浏览器中的JavaScript能做什么？"><a href="#浏览器中的JavaScript能做什么？" class="headerlink" title="浏览器中的JavaScript能做什么？"></a>浏览器中的JavaScript能做什么？</h2><p>现代的 JavaScript 是一种“安全的”编程语言。它不提供对内存或 CPU 的底层访问，因为它最初是为浏览器创建的，不需要这些功能。</p><p>JavaScript 的能力很大程度上取决于它运行的环境。例如，<a href="https://wikipedia.org/wiki/Node.js">Node.js</a> 支持允许 JavaScript 读取&#x2F;写入任意文件，执行网络请求等的函数。</p><h2 id="JavaScript的上层语言"><a href="#JavaScript的上层语言" class="headerlink" title="JavaScript的上层语言"></a>JavaScript的上层语言</h2><p>不同的人想要不同的功能。JavaScript 的语法也不能满足所有人的需求。</p><p>这是正常的，因为每个人的项目和需求都不一样。</p><p>因此，最近出现了许多新语言，这些语言在浏览器中执行之前，都会被 <strong>编译</strong>（转化）成 JavaScript。</p><p>现代化的工具使得编译速度非常快且透明，实际上允许开发者使用另一种语言编写代码并会将其“自动转换”为 JavaScript。</p><p>此类语言的示例有：</p><ul><li><a href="https://coffeescript.org/">CoffeeScript</a> 是 JavaScript 的一种语法糖。它引入了更加简短的语法，使我们可以编写更清晰简洁的代码。</li><li><a href="https://www.typescriptlang.org/">TypeScript</a> 专注于添加“严格的数据类型”以简化开发，以更好地支持复杂系统的开发。由微软开发。</li><li><a href="https://flow.org/">Flow</a> 也添加了数据类型，但是以一种不同的方式。由 Facebook 开发。</li><li><a href="https://www.dartlang.org/">Dart</a> 是一门独立的语言。它拥有自己的引擎，该引擎可以在非浏览器环境中运行（例如手机应用），它也可以被编译成 JavaScript。由 Google 开发。</li><li><a href="https://brython.info/">Brython</a> 是一个 Python 到 JavaScript 的转译器，让我们可以在不使用 JavaScript 的情况下，以纯 Python 编写应用程序。</li><li><a href="https://kotlinlang.org/docs/reference/js-overview.html">Kotlin</a> 是一个现代、简洁且安全的编程语言，编写出的应用程序可以在浏览器和 Node 环境中运行。</li></ul><p>这样的语言还有很多。当然，即使我们在使用此类编译语言，我们也需要了解 JavaScript。因为了解 JavaScript 才能让我们真正明白我们在做什么。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript中的数据类型"><a href="#JavaScript中的数据类型" class="headerlink" title="JavaScript中的数据类型"></a>JavaScript中的数据类型</h2><p><strong>原始数据类型：</strong></p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a><strong>Number</strong></h3><p>number类型代表整数和浮点数<br>除了常规的数字，还包括所谓的“特殊数值（“special numeric values”）”也属于这种类型：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>  </p><ul><li><p><code>Infinity</code>表示数学概念上的无穷大∞ <code>console.log(1/0) || console.log(Infinity)</code></p></li><li><p><code>NaN</code>代表一个计算错误它是一个不正确的或者一个未定义的数学操作所得到的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;not a number&quot;</span> / <span class="number">2</span> ) <span class="comment">//NaN </span></span><br></pre></td></tr></table></figure><p><code>NaN</code> 是粘性的。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="title class_">NaN</span> + <span class="number">1</span> ); <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="number">3</span> * <span class="title class_">NaN</span> ); <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;not a number&quot;</span> / <span class="number">2</span> - <span class="number">1</span> ); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>数学运算是安全的</strong>,脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 <code>NaN</code> 的结果。</p></div></li></ul><p><strong>编写数字的更多方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> billion = <span class="number">1000000000</span></span><br><span class="line"><span class="comment">// 可以使用 _ 这种语法糖</span></span><br><span class="line">billio = <span class="number">1_000_000_000</span></span><br><span class="line"><span class="comment">// 使用 e 来缩短</span></span><br><span class="line">billio = <span class="number">1e9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7.3e9</span>)</span><br><span class="line"><span class="keyword">let</span> msc = <span class="number">0.000001</span></span><br><span class="line">msc = <span class="number">1e-6</span></span><br></pre></td></tr></table></figure><p><strong>十进制、二进制、八进制</strong></p><p><a href="https://en.wikipedia.org/wiki/Hexadecimal">十六进制</a> 数字在 JavaScript 中被广泛用于表示颜色，编码字符以及其他许多东西。所以自然地，有一种较短的写方法：<code>0x</code>，然后是数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">0xff</span> ); <span class="comment">// 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">0xFF</span> ); <span class="comment">// 255（一样，大小写没影响）</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0b11111111</span>; <span class="comment">// 二进制形式的 255</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0o377</span>; <span class="comment">// 八进制形式的 255</span></span><br></pre></td></tr></table></figure><p><strong>toString(base)</strong></p><p>方法 <code>num.toString(base)</code> 返回在给定 <code>base</code> 进制数字系统中 <code>num</code> 的字符串表示形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toString</span>(<span class="number">16</span>) );  <span class="comment">// ff</span></span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toString</span>(<span class="number">2</span>) );   <span class="comment">// 11111111</span></span><br></pre></td></tr></table></figure><p><code>base</code> 的范围可以从 <code>2</code> 到 <code>36</code>。默认情况下是 <code>10</code>。</p><p><strong>舍入</strong></p><ul><li><p><strong><code>Math.floor</code></strong>: 向下舍入 </p></li><li><p><strong><code>Math.ceil</code></strong>: 向上舍入</p></li><li><p><strong><code>Math.round</code></strong>: 最近舍入</p></li><li><p><strong><code>Math.trunc</code></strong>: 移除小数点后的所有内容</p></li><li><p><strong><code>toFixed(n)</code></strong>: 将数字舍入到小数点后 <code>n</code> 位，并以字符串形式返回结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12.34</span>;</span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toFixed</span>(<span class="number">1</span>) ); <span class="comment">// &quot;12.3&quot;</span></span><br><span class="line">num = <span class="number">12.36</span>;</span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toFixed</span>(<span class="number">1</span>) ); <span class="comment">// &quot;12.4&quot;</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">12.34</span>;</span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toFixed</span>(<span class="number">5</span>) ); <span class="comment">// &quot;12.34000&quot;，在结尾添加了 0，以达到小数点后五位</span></span><br></pre></td></tr></table></figure><p>我们可以使用一元加号或 <code>Number()</code> 调用，将其转换为数字，例如 <code>+ num.toFixed(5)</code></p></li></ul><p><strong>不精确的计算：</strong><br>在内部，数字是以64位格式<code>IEEE-754</code>，如果一个如果一个数字真的很大，则可能会溢出 64 位存储，变成一个特殊的数值 <code>Infinity</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span>+<span class="number">0.2</span>==<span class="number">0.3</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>) <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>一个数字以其二进制的形式存储在内存中，一个 1 和 0 的序列。但是在十进制数字系统中看起来很简单的 <code>0.1</code>，<code>0.2</code> 这样的小数，实际上在二进制形式中是无限循环小数。  </p><p>使用二进制数字系统无法 <strong>精确</strong> 存储 <em>0.1</em> 或 <em>0.2</em>，就像没有办法将三分之一存储为十进制小数一样。<br>IEEE-754 数字格式通过将数字舍入到最接近的可能数字来解决此问题。这些舍入规则通常不允许我们看到“极小的精度损失”，但是它确实存在。</p><p>最可靠的方法是借助方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed(n)</a> 对结果进行舍入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="title function_">alert</span>( sum.<span class="title function_">toFixed</span>(<span class="number">2</span>) ); <span class="comment">// &quot;0.30&quot;</span></span><br></pre></td></tr></table></figure><p><strong>isNaN和isFinite</strong></p><ul><li><p><code>isNaN(value)</code> 将其参数转换为数字，然后测试它是否为 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">isNaN</span>(<span class="title class_">NaN</span>) ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">isNaN</span>(<span class="string">&quot;str&quot;</span>) ); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;123&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">NaN</span> === <span class="title class_">NaN</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>isFinite(value)</code> 将其参数转换为数字，如果是常规数字而不是 <code>NaN/Infinity/-Infinity</code>，则返回 <code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">isFinite</span>(<span class="string">&quot;15&quot;</span>) ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">isFinite</span>(<span class="string">&quot;str&quot;</span>) ); <span class="comment">// false，因为是一个特殊的值：NaN</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>) ); <span class="comment">// false，因为是一个特殊的值：Infinity</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>parseInt 和 pareseFloat：</strong></p><p>使用加号 <code>+</code> 或 <code>Number()</code> 的数字转换是严格的。如果一个值不完全是一个数字，就会失败：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( +<span class="string">&quot;100px&quot;</span> ); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>但在现实生活中，我们经常会有带有单位的值，例如 CSS 中的 <code>&quot;100px&quot;</code> 或 <code>&quot;12pt&quot;</code>。</p><p>它们可以从字符串中“读取”数字，直到无法读取为止。如果发生 error，则返回收集到的数字。函数 <code>parseInt</code> 返回一个整数，而 <code>parseFloat</code> 返回一个浮点数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;100px&#x27;</span>) ); <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseFloat</span>(<span class="string">&#x27;12.5em&#x27;</span>) ); <span class="comment">// 12.5</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;12.3&#x27;</span>) ); <span class="comment">// 12，只有整数部分被返回了</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseFloat</span>(<span class="string">&#x27;12.3.4&#x27;</span>) ); <span class="comment">// 12.3，在第二个点出停止了读取</span></span><br></pre></td></tr></table></figure><p>某些情况下，<code>parseInt/parseFloat</code> 会返回 <code>NaN</code>。当没有数字可读时会发生这种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;a123&#x27;</span>) ); <span class="comment">// NaN，第一个符号停止了读取</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>parseInt(str, radix) 的第二个参数</strong></p></div><p><code>parseInt()</code> 函数具有可选的第二个参数。它指定了数字系统的基数，因此 <code>parseInt</code> 还可以解析十六进制数字、二进制数字等的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>) ); <span class="comment">// 255</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;ff&#x27;</span>, <span class="number">16</span>) ); <span class="comment">// 255，没有 0x 仍然有效</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;2n9c&#x27;</span>, <span class="number">36</span>) ); <span class="comment">// 123456</span></span><br></pre></td></tr></table></figure><p><strong>其他数学函数：</strong></p><p><strong><code>Math.random()</code>：</strong>返回一个从 0 到 1 的随机数（不包括 1</p><p><strong><code>Math.max(a, b, c...)和Math.min(a, b, c...)</code>：</strong> 从任意数量的参数中返回最大值和最小值。</p><p><strong><code>Math.pow(n, power)</code>：</strong>返回 <code>n</code> 的给定（power）次幂。</p><p><strong><code>Math.sqrt(100)</code>：</strong> 取根号</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><strong>单引号：</strong> <code>let str = &#39;hello&#39;</code></li><li><strong>双引号：</strong><code>let str = &quot;hello&quot;</code></li><li><strong>反引号：</strong> let str &#x3D; `hello`</li></ul><h4 id="字符串中的方法"><a href="#字符串中的方法" class="headerlink" title="字符串中的方法"></a>字符串中的方法</h4><h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><ul><li><p><code>toUpperCase() || toLowerCase()：</code>改变大小写</p></li><li><p><code>substring(start||0,end?length)：</code>获得子串</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>MDN已经不推荐使用 <code>substr</code> 方法了 属于遗留特性 建议使用<code>slice</code></p></div></li><li><p><code>slice(start,end): </code>参数可以为负数，不破坏原来的串返回新的串</p></li><li><p><code>replace(pattern:(string|regex,replacement:(string|function)))：</code>替换(pattern是如果是string,则只会替换第一项)  –&gt; <code>replaceAll</code></p></li><li><p><code>split(separator:(undefined||string||regex),limit?)：</code>分割字符形成数组，如果<code>separator</code>为<code>undefined</code>则会形成<code>[&#39;str&#39;]</code></p></li><li><p><code>includes(searchString,position?):boolean：</code> 查找是否包含</p></li><li><p><code>indexof(serchValue,position?):index||-1：</code>查找的字符串 <code>searchValue</code> 的第一次出现的索引，如果没有找到，则返回 <code>-1</code>。</p></li><li><p><code>lastIndexOf(serchValue,position?)</code></p></li></ul><h5 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h5><ul><li><code>at()</code></li><li><code>charAt</code></li><li><code>charCodeAt()</code></li><li><code>match(regexp)</code></li><li><code>startsWith(searchString,position?)</code></li><li><code>endsWith(...)</code></li><li><code>trim()</code></li></ul><h3 id="Boolean-逻辑类型"><a href="#Boolean-逻辑类型" class="headerlink" title="Boolean(逻辑类型)"></a>Boolean(逻辑类型)</h3><h4 id="布尔转换时"><a href="#布尔转换时" class="headerlink" title="布尔转换时"></a>布尔转换时</h4><ul><li><strong>空</strong>值：即 0、” “、undefined、NaN、null   转换为<code>false</code></li><li>其余为 <code>true</code></li></ul><blockquote><p>注意 “0” 是 true 噢</p></blockquote><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><h5 id="或运算"><a href="#或运算" class="headerlink" title="或运算(||)"></a>或运算(||)</h5><p>传统的比如 <code>if</code>中使用 就不提了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = value1 || value2 || value3</span><br><span class="line"><span class="comment">// 处理每一个操作数时，都将其转化为布尔值。如果结果是 true，就停止计算，返回这个操作数的初始值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用处理逻辑</span></span><br><span class="line">flag || <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line"><span class="literal">false</span> || <span class="title function_">alert</span>(<span class="string">&quot;printed&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="与运算"><a href="#与运算" class="headerlink" title="与运算(&amp;&amp;)"></a><strong>与运算(&amp;&amp;)</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">1</span> &amp;&amp; <span class="number">0</span> ); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">1</span> &amp;&amp; <span class="number">5</span> ); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 在处理每一个操作数时，都将其转化为布尔值。如果结果是 false，就停止计算，并返回这个操作数的初始值。</span></span><br></pre></td></tr></table></figure><h5 id="非运算"><a href="#非运算" class="headerlink" title="非运算(!)"></a><strong>非运算(!)</strong></h5><p>两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( !!<span class="string">&quot;non-empty string&quot;</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( !!<span class="literal">null</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="值比较"><a href="#值比较" class="headerlink" title="值比较"></a>值比较</h4><h5 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等"></a>严格相等</h5><p>普通的相等性检查 <code>==</code> 存在一个问题，会先转换类型才会进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>严格相等运算符 <code>===</code> 在进行比较时不会做任何的类型转换。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="number">0</span> === <span class="literal">false</span> ); <span class="comment">// false，因为被比较值的数据类型不同</span></span><br></pre></td></tr></table></figure><h5 id="null和undefined进行比较"><a href="#null和undefined进行比较" class="headerlink" title="null和undefined进行比较"></a><code>null</code>和<code>undefined</code>进行比较</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> === <span class="literal">undefined</span> ); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> &gt; <span class="number">0</span> );  <span class="comment">// (1) false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> == <span class="number">0</span> ); <span class="comment">// (2) false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> &gt;= <span class="number">0</span> ); <span class="comment">// (3) true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">undefined</span> &gt; <span class="number">0</span> ); <span class="comment">// false (1)</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">undefined</span> &lt; <span class="number">0</span> ); <span class="comment">// false (2)</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">undefined</span> == <span class="number">0</span> ); <span class="comment">// false (3)</span></span><br></pre></td></tr></table></figure><h5 id="和-运算符"><a href="#和-运算符" class="headerlink" title="?和??运算符"></a><code>?</code>和<code>??</code>运算符</h5><p>?运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = condition ? value1 : value2</span><br><span class="line"><span class="comment">// 计算条件结果，如果结果为真，则返回 value1，否则返回 value2。</span></span><br><span class="line"><span class="keyword">let</span> accessAllowed = (age &gt; <span class="number">18</span>) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="comment">// 上面写法有点多余 因为 accessAllowed 如果写成 age &gt; 18 本来就会返回一个boolean</span></span><br></pre></td></tr></table></figure><p>使用一系列问号 <code>?</code> 运算符可以返回一个取决于多个条件的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;age?&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = (age &lt; <span class="number">3</span>) ? <span class="string">&#x27;Hi, baby!&#x27;</span> :</span><br><span class="line">  (age &lt; <span class="number">18</span>) ? <span class="string">&#x27;Hello!&#x27;</span> :</span><br><span class="line">  (age &lt; <span class="number">100</span>) ? <span class="string">&#x27;Greetings!&#x27;</span> :</span><br><span class="line">  <span class="string">&#x27;What an unusual age!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( message );</span><br></pre></td></tr></table></figure><p><strong>?</strong> 有时候能代替<strong>if</strong>但是可读性并不强 赋值的时可以考虑使用 <strong>?</strong> 做逻辑判断的时候 <strong>if</strong> 更佳</p><p><strong>空值合并运算符<code>??</code></strong></p><p>对待 <code>null</code> 和 <code>undefined</code> 的方式类似,所以当一个值既不是 <code>null</code> 也不是 <code>undefined</code> 时，我们将其称为“已定义的（defined）否则为未定义</p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = (a !== <span class="literal">null</span> &amp;&amp; a !== <span class="literal">undefined</span>) ? a : b;</span><br><span class="line"><span class="keyword">let</span> user;</span><br><span class="line"><span class="title function_">alert</span>(user ?? <span class="string">&quot;匿名&quot;</span>); <span class="comment">// 匿名（user 未定义）</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(user ?? <span class="string">&quot;匿名&quot;</span>); <span class="comment">// John（user 已定义）</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> nickName = <span class="string">&quot;Supercoder&quot;</span>;</span><br><span class="line"><span class="comment">// 显示第一个已定义的值：</span></span><br><span class="line"><span class="title function_">alert</span>(firstName ?? lastName ?? nickName ?? <span class="string">&quot;匿名&quot;</span>); <span class="comment">// Supercoder</span></span><br></pre></td></tr></table></figure><p><strong>与||比较</strong></p><p>它们之间重要的区别是：</p><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。</li><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul><p>换句话说，<code>||</code> 无法区分 <code>false</code>、<code>0</code>、空字符串 <code>&quot;&quot;</code> 和 <code>null/undefined</code>。它们都一样 —— 假值（falsy values）。如果其中任何一个是 <code>||</code> 的第一个参数，那么我们将得到第二个参数作为结果。</p><p>不过在实际中，我们可能只想在变量的值为 <code>null/undefined</code> 时使用默认值。也就是说，当该值确实未知或未被设置时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(height || <span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">alert</span>(height ?? <span class="number">100</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>特殊的<code>null</code>值不属于任何一种类型构成了独立类型，仅代表无、空、值未知等状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 表示age是未知的</span></span><br></pre></td></tr></table></figure><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型。<br>如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="title function_">alert</span>(age); <span class="comment">// 弹出 &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><p>通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值。</p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>“symbol” 值表示唯一的标识符,可以使用 <code>Symbol()</code> 来创建这种类型的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h4><p>symbol 允许我们创建对象的“隐藏”属性，代码的任何其他部分都不能意外访问或重写这些属性。</p><p>例如，如果我们使用的是属于第三方代码的 <code>user</code> 对象，我们想要给它们添加一些标识符。</p><p>我们可以给它们使用 symbol 键：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="comment">// 属于另一个代码</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">user[id] = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( user[id] ); <span class="comment">// 我们可以使用 symbol 作为键来访问数据</span></span><br></pre></td></tr></table></figure><p>我们的标识符和它们的标识符之间不会有冲突，因为 symbol 总是不同的，即使它们有相同的名字。</p><h4 id="对象字面量中的symbol"><a href="#对象字面量中的symbol" class="headerlink" title="对象字面量中的symbol"></a>对象字面量中的symbol</h4><p>如果我们要在对象字面量 <code>&#123;...&#125;</code> 中使用 symbol，则需要使用方括号把它括起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  [id]: <span class="number">123</span> <span class="comment">// 而不是 &quot;id&quot;：123</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Symbol会在for-in-中跳过"><a href="#Symbol会在for-in-中跳过" class="headerlink" title="Symbol会在for in 中跳过"></a>Symbol会在for in 中跳过</h4><p>symbol 属性不参与 <code>for..in</code> 循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  [id]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) <span class="title function_">alert</span>(key); <span class="comment">// name, age（没有 symbol）</span></span><br><span class="line"><span class="comment">// 使用 symbol 任务直接访问</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Direct: &quot;</span> + user[id]); <span class="comment">// Direct: 123</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys(user)</a> 也会忽略它们。这是一般“隐藏符号属性”原则的一部分。如果另一个脚本或库遍历我们的对象，它不会意外地访问到符号属性。</p><p>相反，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a> 会同时复制字符串和 symbol 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  [id]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, user);</span><br><span class="line"><span class="title function_">alert</span>( clone[id] ); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h4 id="全局Symbol"><a href="#全局Symbol" class="headerlink" title="全局Symbol"></a>全局Symbol</h4><p>要从注册表中读取（不存在则创建）symbol，请使用 <code>Symbol.for(key)</code>。<br>该调用会检查全局注册表，如果有一个描述为 <code>key</code> 的 symbol，则返回该 symbol，否则将创建一个新 symbol（<code>Symbol(key)</code>），并通过给定的 <code>key</code> 将其存储在注册表中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从全局注册表中读取</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;id&quot;</span>); <span class="comment">// 如果该 symbol 不存在，则创建它</span></span><br><span class="line"><span class="comment">// 再次读取（可能是在代码中的另一个位置）</span></span><br><span class="line"><span class="keyword">let</span> idAgain = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">// 相同的 symbol</span></span><br><span class="line"><span class="title function_">alert</span>( id === idAgain ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor"></a>Symbol.keyFor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 name 获取 symbol</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">// 通过 symbol 获取 name</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(sym) ); <span class="comment">// name</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(sym2) ); <span class="comment">// id</span></span><br></pre></td></tr></table></figure><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p><code>BigInt</code> 是一种特殊的数字类型，它提供了对任意长度整数的支持。</p><p>创建 bigint 的方式有两种：在一个整数字面量后面加 <code>n</code> 或者调用 <code>BigInt</code> 函数，该函数从字符串、数字等中生成 bigint。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigint = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br><span class="line"><span class="keyword">const</span> sameBigint = <span class="title class_">BigInt</span>(<span class="string">&quot;1234567890123456789012345678901234567890&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bigintFromNumber = <span class="title class_">BigInt</span>(<span class="number">10</span>); <span class="comment">// 与 10n 相同</span></span><br></pre></td></tr></table></figure><details class="folding-tag" cyan><summary> 基本类型和引用类型 </summary>              <div class='content'>              <ol><li><p><code>Javascript</code>中栈和堆</p><ul><li>栈(<strong>stack</strong>)：自动分配固定大小的内存空间，并由系统自动释放，栈数据结构遵从先进后出的原则</li><li>堆(<strong>heap</strong>)：堆内存，动态分配内存，内存大小不固定，也不会自动释放，堆数据结构是一种无序的树状结构，满足<code>key-value</code>键值对我们只用知道key名，就能通过key查找到对应的value。比较经典的就是书架存书的例子，我们知道书名，就可以找到对应的书籍</li></ul><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascript1.png"></p></li><li><p>引用类型的引用和复制</p><p><strong>当一个对象变量被复制 —— 引用被复制，而该对象自身并没有被复制。</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line"><span class="comment">// 这里在堆内存中并没有新new 一份 &#123;name: &#x27;月晕&#x27;, age: 18&#125;,而只是把b的内容地址指向a的地址 指向堆内存中的同一份</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><p><strong>非原始数据类型:</strong></p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="Object表示"><a href="#Object表示" class="headerlink" title="Object表示"></a>Object表示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// “构造函数” 的语法</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;&#125;;  <span class="comment">// “字面量” 的语法</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这将提示有语法错误</span></span><br><span class="line">user.<span class="property">likes</span> birds = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 下面这样不会报错</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">user[<span class="string">&quot;likes birds&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="title function_">alert</span>(user[<span class="string">&quot;likes birds&quot;</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> user[<span class="string">&quot;likes birds&quot;</span>];</span><br></pre></td></tr></table></figure><p><strong>object中key 的计算属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="title function_">prompt</span>(<span class="string">&quot;Which fruit to buy?&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> bag = &#123;</span><br><span class="line">  [fruit]: <span class="number">5</span>, <span class="comment">// 属性名是从 fruit 变量中得到的</span></span><br><span class="line">  [fruit + <span class="string">&#x27;Computers&#x27;</span>]: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">alert</span>( bag.<span class="property">apple</span> ); <span class="comment">// 5 如果 fruit=&quot;apple&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Object的引用和复制"><a href="#Object的引用和复制" class="headerlink" title="Object的引用和复制"></a>Object的引用和复制</h4><p>对象与原始类型的根本区别之一是，对象是“通过引用”存储和复制的，而原始类型：字符串、数字、布尔值等 —— 总是“作为一个整体”复制。</p><p><strong>当一个对象变量被复制 —— 引用被复制，而该对象自身并没有被复制。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> admin = user; <span class="comment">// 复制引用</span></span><br></pre></td></tr></table></figure><p><img src="https://zh.javascript.info/article/object-copy/variable-copy-reference.svg"></p><p><strong>克隆和合并,Object.assign</strong></p><p>拷贝一个对象变量会又创建一个对相同对象的引用,复制一个对象，那该怎么做呢？<br>最先想到的就是遍历一份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> clone = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line">    clone[key] = user[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 es6 对象展开符</span></span><br><span class="line"><span class="keyword">let</span> clone1 = &#123;...user&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a>来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.assign(dest, src1, src2, src3,...)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;yueyun&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> permissions1 = &#123; <span class="attr">canView</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> permissions2 = &#123; <span class="attr">canEdit</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="comment">// 将 permissions1 和 permissions2 中的所有属性都拷贝到 user 中</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(user, permissions1, permissions2);</span><br><span class="line"><span class="comment">// 现在 user = &#123; name: &quot;John&quot;, canView: true, canEdit: true &#125;</span></span><br><span class="line"><span class="comment">// 如果被拷贝的属性的属性名已经存在，那么它会被覆盖</span></span><br></pre></td></tr></table></figure><p><strong>深层克隆：</strong></p><p>到现在为止，我们都假设 <code>user</code> 的所有属性均为原始类型。但属性可以是对其他对象的引用。<br>当数组中存在对象抑或是对象中存在对象就要使用深拷贝</p><p>深拷贝可以使用JSON序列化(有优缺点)来做或者是自己手写一个深拷贝函数</p><p><strong>lodash</strong>库中的<code>.cloneDeep(obj)</code></p><p>使用 <code>structuredClone()</code> 去拷贝</p><h4 id="Object中的this"><a href="#Object中的this" class="headerlink" title="Object中的this"></a>Object中的this</h4><p>this即是函数的上下文，this出现的值取决于它出现的上下文：函数、类或全局</p><p>函数写在对象中称之为对象的方法</p><h5 id="方法中的this"><a href="#方法中的this" class="headerlink" title="方法中的this"></a>方法中的<code>this</code></h5><p>通常, 对象方法需要访问对象中存储的信息才能完成其工作。<br>this会指向一个对象：</p><ul><li>以函数形式调用时、this指向的是widow(浏览器环境)&#x2F;<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis">globalThis</a>(nodejs环境)</li><li>以方法的形式调用、this指向的是调用方法的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// this 指的是当前对象 John</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this</code> 的值是在代码运行时计算出来的，它取决于代码上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">&quot;Admin&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>( <span class="variable language_">this</span>.<span class="property">name</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在两个对象中使用相同的函数</span></span><br><span class="line">user.<span class="property">f</span> = sayHi;</span><br><span class="line">admin.<span class="property">f</span> = sayHi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个调用有不同的 this 值</span></span><br><span class="line"><span class="comment">// 函数内部的 &quot;this&quot; 是“点符号前面”的那个对象</span></span><br><span class="line">user.<span class="title function_">f</span>(); <span class="comment">// John（this == user）</span></span><br><span class="line">admin.<span class="title function_">f</span>(); <span class="comment">// Admin（this == admin）</span></span><br><span class="line">admin[<span class="string">&#x27;f&#x27;</span>](); <span class="comment">// Admin（使用点符号或方括号语法来访问这个方法，都没有关系。）</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数没有自己的this"><a href="#箭头函数没有自己的this" class="headerlink" title="箭头函数没有自己的this"></a><strong>箭头函数没有自己的<code>this</code></strong></h5><p>箭头函数有些特别：它们没有自己的 <code>this</code>。如果我们在这样的函数中引用 <code>this</code>，<code>this</code> 值取决于外部“正常的”函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Ilya&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">firstName</span>);</span><br><span class="line">    <span class="title function_">arrow</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="title function_">sayHi</span>(); <span class="comment">// Ilya</span></span><br></pre></td></tr></table></figure><h4 id="可选链？"><a href="#可选链？" class="headerlink" title="可选链？"></a>可选链？</h4><p>可选链<code>?.</code> 是一种访问嵌套对象属性的安全的方式，即使中间属性不存在也不会出现错误</p><p><strong>不存在属性问题：</strong></p><p>如果我们有很多个 <code>user</code> 对象其中存储了我们的用户数据，我们大多数用户的地址都存储在 <code>user.address</code> 中，街道地址存储在 <code>user.address.street</code> 中，但有些用户没有提供这些信息。在这种情况下，当我们尝试获取 <code>user.address.street</code>，而该用户恰好没提供地址信息，我们则会收到一个错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;; <span class="comment">// 一个没有 &quot;address&quot; 属性的 user 对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>.<span class="property">street</span>); <span class="comment">// Error!</span></span><br></pre></td></tr></table></figure><p>javascritp会把 <code>user.address</code> 识别为 <code>undefined</code> 尝试读取<code>user.address.street</code> 即是<code>undefined.street</code>自然是会失败并返回一个错误</p><p>在 Web 开发中，我们可以使用特殊的方法调用（例如 <code>document.querySelector(&#39;.elem&#39;)</code>）以对象的形式获取一个网页元素，如果没有这种对象，则返回 <code>null</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.elem&#x27;</span>).<span class="property">innerHTML</span>;</span><br><span class="line"><span class="comment">// 如果 document.querySelector(&#x27;.elem&#x27;) 的结果为 null，则会出现错误</span></span><br></pre></td></tr></table></figure><p>同样，如果该元素不存在，则访问 <code>null</code> 的 <code>.innerHTML</code> 属性时会报错。在某些情况下，当元素的缺失是没问题的时候，我们希望避免出现这种错误，而是接受 <code>html = null</code> 作为结果。</p><p>首先我们想到的肯定是可以用<code>if</code>条件语句判断或者<code>?</code>运算符来解决 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span> ? user.<span class="property">address</span>.<span class="property">street</span> : <span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure><p>当层级多了之后显示会很臃肿而且不优雅 即引入了<strong>可选链?</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;; <span class="comment">// user 没有 address 属性</span></span><br><span class="line"><span class="title function_">alert</span>( user?.<span class="property">address</span>?.<span class="property">street</span> ); <span class="comment">// undefined（不报错）</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.elem&#x27;</span>)?.<span class="property">innerHTML</span>; </span><br><span class="line"><span class="comment">// 如果没有符合的元素，则为 undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>如果未声明变量 <code>user</code>，那么 <code>user?.anything</code> 会触发一个错误<br><code>?.</code> 前的变量必须已声明（例如 <code>let/const/var user</code> 或作为一个函数参数）。可选链仅适用于已声明的变量。</p></blockquote><p>当然也存在***<code>?.()</code>** 和 <strong><code>?.[]</code></strong></p><h2 id="Javascript中的方法"><a href="#Javascript中的方法" class="headerlink" title="Javascript中的方法"></a>Javascript中的方法</h2><h3 id="原始类型的方法"><a href="#原始类型的方法" class="headerlink" title="原始类型的方法"></a>原始类型的方法</h3><p><code>string</code> <code>number</code> <code>bigInt</code> <code>boolean</code> <code>symbol</code> <code>null</code> <code>undefined</code> </p><p>比如下面的这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>())</span><br></pre></td></tr></table></figure><p><code>str.toUpperCase()</code>中实际发生的情况</p><ul><li>字符串<code>str</code>是一个原始值。因此，在访问其属性时，会创建一个包含字符串字面值的特殊对象，并且具有可用的方法，例如 <code>toUpperCase()</code>。</li><li>该方法运行并返回一个新的字符串（由 <code>console.log</code> 显示）。</li><li>特殊对象被销毁，只留下原始值 <code>str</code>。</li></ul><p>所以原始类型可以提供方法，但它们依然是轻量级的。</p><p>JavaScript 引擎高度优化了这个过程。它甚至可能跳过创建额外的对象。但是它仍然必须遵守规范，并且表现得好像它创建了一样。</p><p>数字有其自己的方法，例如，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed(n)</a> 将数字舍入到给定的精度</p><h3 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h3><p>但很多时候我们发现还需要 <strong>有序集合</strong>，里面的元素都是按顺序排列的。例如，我们可能需要存储一些列表，比如用户、商品以及 HTML 元素等，这时一个特殊的数据结构数组（<code>Array</code>）就派上用场了，它能存储有序的集合。</p><blockquote><p>从JS的数据类型本质上面来说 数组属于是一种特殊的对象 </p></blockquote><ul><li>添加&#x2F;删除元素<ul><li><code>push(...items)</code> —— 向尾端添加元素，</li><li><code>pop()</code> —— 从尾端提取一个元素，</li><li><code>shift()</code> —— 从首端提取一个元素，</li><li><code>unshift(...items)</code> —— 向首端添加元素，</li><li><code>splice(pos, deleteCount, ...items)</code> —— 从 <code>pos</code> 开始删除 <code>deleteCount</code> 个元素，并插入 <code>items</code>。</li><li><code>slice(start, end)</code> —— 创建一个新数组，将从索引 <code>start</code> 到索引 <code>end</code>（但不包括 <code>end</code>）的元素复制进去。</li><li><code>concat(...items)</code> —— 返回一个新数组：复制当前数组的所有元素，并向其中添加 <code>items</code>。如果 <code>items</code> 中的任意一项是一个数组，那么就取其元素。</li></ul></li><li>搜索元素<ul><li><code>indexOf/lastIndexOf(item, pos)</code> —— 从索引 <code>pos</code> 开始搜索 <code>item</code>，搜索到则返回该项的索引，否则返回 <code>-1</code>。</li><li><code>includes(value)</code> —— 如果数组有 <code>value</code>，则返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>find/filter(func)</code> —— 通过 <code>func</code> 过滤元素，返回使 <code>func</code> 返回 <code>true</code> 的第一个值&#x2F;所有值。</li><li><code>findIndex</code> 和 <code>find</code> 类似，但返回索引而不是值。</li></ul></li><li>遍历元素<ul><li><code>forEach(func)</code> —— 对每个元素都调用 <code>func</code>，不返回任何内容。</li></ul></li><li>转换数组<ul><li><code>map(func)</code> —— 根据对每个元素调用 <code>func</code> 的结果创建一个新数组。</li><li><code>sort(func)</code> —— 对数组进行原位（in-place）排序，然后返回它。</li><li><code>reverse()</code> —— 原位（in-place）反转数组，然后返回它。</li><li><code>split/join</code> —— 将字符串转换为数组并返回。</li><li><code>reduce/reduceRight(func, initial)</code> —— 通过对每个元素调用 <code>func</code> 计算数组上的单个值，并在调用之间传递中间结果。</li></ul></li><li>其他方法<ul><li><code>Array.isArray(value)</code> 检查 <code>value</code> 是否是一个数组，如果是则返回 <code>true</code>，否则返回 <code>false</code>。</li></ul></li></ul><p>请注意，<code>sort</code>，<code>reverse</code> 和 <code>splice</code> 方法修改的是数组本身。</p><ul><li>杂<ul><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/some">arr.some(fn)</a>&#x2F;<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/every">arr.every(fn)</a> 检查数组</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">arr.fill(value, start, end)</a> —— 从索引 <code>start</code> 到 <code>end</code>，用重复的 <code>value</code> 填充数组。</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">arr.copyWithin(target, start, end)</a> —— 将从位置 <code>start</code> 到 <code>end</code> 的所有元素复制到 <strong>自身</strong> 的 <code>target</code> 位置（覆盖现有元素）。</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">arr.flat(depth)</a>&#x2F;<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">arr.flatMap(fn)</a> 从多维数组创建一个新的扁平数组。</li></ul></li></ul><h1 id="规范和调试"><a href="#规范和调试" class="headerlink" title="规范和调试"></a>规范和调试</h1><h1 id="高级内容"><a href="#高级内容" class="headerlink" title="高级内容"></a>高级内容</h1><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h1 id="浏览器中的JS"><a href="#浏览器中的JS" class="headerlink" title="浏览器中的JS"></a>浏览器中的JS</h1><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本用法</title>
      <link href="/2023/11/21/Nginx%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/11/21/Nginx%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx作用"><a href="#Nginx作用" class="headerlink" title="Nginx作用"></a>Nginx作用</h1><p>Nginx 是一个高性能<strong>HTTP</strong>和反向代理的Web服务器，可以将服务器上的静态文件(如HTML、图片)等通过<strong>HTTP</strong>协议展现给客户端，占用内存少、并发能力强</p><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>进入nginx官网 (<a href="https://nginx.org/en/">https://nginx.org/en/</a>)</p><p>window系统选择下载 .exe</p><p>linux系统下载pgp</p><p>linux解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.22.1 tar.gz</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><blockquote><p>如果是使用linux上面 推荐使用apt-get 或者 yum 等 去下载，<strong>下载之前请先系统上是否存在nginx</strong><br>下面演示是在 linux发行版 ubuntu-22.04 使用 apt-get下载的nginx</p></blockquote><p><strong>如果失败请加上sudo</strong></p><h1 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h1><p>进入安装好的目录 <code>/usr/sbin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/sbin <span class="comment"># 进入可执行文件目录</span></span><br><span class="line">./nginx  <span class="comment">#启动</span></span><br><span class="line">./nginx -s stop <span class="comment">#快速停止</span></span><br><span class="line">./nginx -s quit <span class="comment">#优雅关闭，在关闭前已经接受连接请求</span></span><br><span class="line">./nginx -s reload <span class="comment">#重新加载配置</span></span><br><span class="line">./nginx -t <span class="comment">#检查nginx配置是否正确</span></span><br><span class="line">ps -ef|grep nginx <span class="comment">#查看nginx状态</span></span><br></pre></td></tr></table></figure><h1 id="Nginx的目录"><a href="#Nginx的目录" class="headerlink" title="Nginx的目录"></a>Nginx的目录</h1><p>Nginx一般安装在<code>/etc/nginx</code>目录下（安装时–prefix可指定安装目录）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">conf #配置文件</span><br><span class="line">｜-nginx.conf # 主配置文件</span><br><span class="line">｜-其他配置文件 # 可通过那个include关键字，引入到了nginx.conf生效</span><br><span class="line"></span><br><span class="line">html #静态页面</span><br><span class="line"></span><br><span class="line">logs</span><br><span class="line">｜-access.log #访问日志(每次访问都会记录)</span><br><span class="line">｜-error.log #错误日志</span><br><span class="line">｜-nginx.pid #进程号</span><br><span class="line"></span><br><span class="line">sbin</span><br><span class="line">｜-nginx #主进程文件</span><br><span class="line"></span><br><span class="line">*_temp #运行时，生成临时文件</span><br></pre></td></tr></table></figure><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Linux/image-20220502111337135.png" alt="image-20220502111337135"></p><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p><strong>简化版的Nginx.conf</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1; # 启动的worker进程数</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; #每个worker进程的连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types; #include是引入关键字，这里引入了mime.types这个配置文件（同在conf目录下，mime.types是用来定义，请求返回的content-type）</span><br><span class="line">    default_type  application/octet-stream; #mime.types未定义的，使用默认格式application/octet-stream (指浏览器)</span><br><span class="line"></span><br><span class="line">    sendfile        on; #详情，见下文</span><br><span class="line">    keepalive_timeout  65; #长链接超时时间</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一个nginx可以启用多个server（虚拟服务器） -vhost</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;#监听端口80</span><br><span class="line">        server_name  localhost;  #接收的域名,主机名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">http://localhost.com/xxoo/index.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以存在多个location 互相不干扰</span></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html; #根目录指向html目录</span><br><span class="line">            index  index.html index.htm; #域名/index 指向 index.html index.htm文件</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">http://localhost.com/50x.html</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html; # 服务器错误码为500 502 503 504，转到&quot;域名/50x.html&quot;</span><br><span class="line">        location = /50x.html &#123;# 指定到html文件夹下找/50x.htm</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sendfile</strong></p><p>打开sendfile，用户请求的数据不用再加载到nginx的内存中，而是直接发送</p><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502113913235.png" alt="image-20220502113913235"></p><h1 id="Nginx配置使用场景"><a href="#Nginx配置使用场景" class="headerlink" title="Nginx配置使用场景"></a>Nginx配置使用场景</h1><p>修改Nginx配置文件后，记得重新加载nginx</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx <span class="literal">-s</span> reload</span><br></pre></td></tr></table></figure><p>不同二级域名，映射到不同静态网页<br>可以写多个server字段，从前向后匹配，先匹配到那个就用那个<br>用户访问<code>pro.hedaodao.ltd</code>，就会走到第一个server配置；<code>test.hedaodao.ltd</code>走到第二个配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> http &#123;</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">....其他属性</span></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  pro.hedaodao.ltd;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/pro; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  test.hedaodao.ltd;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/test; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不同域名，映射到同一静态页面</strong></p><p>server_name</p><ul><li>可以写多个，用空格分开</li><li>使用通配符（*）</li><li>使用正则表达式（<a href="https://blog.csdn.net/yangyelin/article/details/112976539">https://blog.csdn.net/yangyelin/article/details/112976539</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http&#123; </span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  *.hedaodao.ltd  ~^[0-9]+\.hedaodao\.ltd$; # &quot;\.&quot;是转译&quot;.&quot;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/test; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反向代理与负载均衡"><a href="#反向代理与负载均衡" class="headerlink" title="反向代理与负载均衡"></a>反向代理与负载均衡</h1><p><strong>反向代理</strong>：这种代理方式叫做，隧道代理。有性能瓶颈，因为所有的数据都经过Nginx，所以Nginx服务器的性能至关重要<br><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502173846436.png" alt="image-20220502173846436"></p><p><strong>负载均衡</strong>：把请求，按照一定算法规则，分配给多台业务服务器（即使其中一个坏了&#x2F;维护升级，还有其他服务器可以继续提供服务）<br><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502174023144.png" alt="image-20220502174023144"></p><h1 id="反向代理-负载均衡"><a href="#反向代理-负载均衡" class="headerlink" title="反向代理+负载均衡"></a>反向代理+负载均衡</h1><p><strong>nginx.conf配置文件</strong></p><p>启用proxy_pass，root和index字段就会失效</p><p>proxy_pass后的地址必须写完整 <code>http://xxx</code>，不支持https</p><p>当访问localhost时（Nginx服务器），网页打开的是<code>http://xxx</code>（应用服务器），网页地址栏写的还是localhost</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http&#123; </span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        proxy_pass http://xxx;</span><br><span class="line">            #root   html/test; </span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义地址别名</strong></p><p>使用upstream定义一组地址【在server字段下】</p><p>访问localhost，访问都会代理到<code>192.168.174.133:80</code>和<code>192.168.174.134:80</code>这两个地址之一，每次访问这两个地址轮着切换（后面讲到，因为默认权重相等）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80; #如果是80端口，可以省略不写</span><br><span class="line">server 192.168.174.134:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        proxy_pass http://httpds;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置权重</strong></p><p>访问使用哪个地址的权重</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10;</span><br><span class="line">server 192.168.174.134:80 weight=80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10 down;</span><br><span class="line">server 192.168.174.134:80 weight=80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备用机</strong></p><p>如果<code>192.168.174.133:80</code>出现故障，无法提供服务，就用使用backup的这个机器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10;</span><br><span class="line">server 192.168.174.134:80 weight=80 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx-的一些报错"><a href="#Nginx-的一些报错" class="headerlink" title="Nginx 的一些报错"></a>Nginx 的一些报错</h1><p><strong>nginx: [error] invalid PID number “” in “&#x2F;run&#x2F;nginx.pid”</strong></p><p>解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>could not open error log file: open() “&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log” failed (13: Permission denied)</strong></p><p>解决办法</p><blockquote><p>在指令前面加上 <code>sudo</code> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫爬取图片</title>
      <link href="/2023/11/20/python%E7%88%AC%E8%99%AB%E5%9B%BE%E7%89%87/"/>
      <url>/2023/11/20/python%E7%88%AC%E8%99%AB%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="python爬虫简单基础"><a href="#python爬虫简单基础" class="headerlink" title="python爬虫简单基础"></a>python爬虫简单基础</h1><h2 id="使用Request库"><a href="#使用Request库" class="headerlink" title="使用Request库"></a>使用Request库</h2><p>优点：简单、发送网络请求快</p><p>缺点：容易被反爬策略针对</p><h3 id="request库的使用"><a href="#request库的使用" class="headerlink" title="request库的使用"></a>request库的使用</h3><h4 id="携带Headers去发送网络请求"><a href="#携带Headers去发送网络请求" class="headerlink" title="携带Headers去发送网络请求"></a>携带Headers去发送网络请求</h4><blockquote><p>模拟浏览器环境、欺骗服务器、获取和浏览器一致的内容</p></blockquote><p>比较重要的就是<code>ua</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">request.get(url,headers=headers)</span><br></pre></td></tr></table></figure><h4 id="发送携带参数的请求"><a href="#发送携带参数的请求" class="headerlink" title="发送携带参数的请求"></a>发送携带参数的请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yueyun&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">request.get(url,params=kw)</span><br></pre></td></tr></table></figure><blockquote><p>在 url 地址中，很多参数是没有用的，比如百度搜索的 url 地址，其中参数只有一个字段有用，其他的都可以删除</p></blockquote><h4 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h4><ul><li>登录注册</li><li>需要传输大文本内容的时候</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;yueyun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">&quot;http://www.baidu.com/&quot;</span>, data = data,headers=headers)</span><br></pre></td></tr></table></figure><h4 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h4><p><strong>使用代理原因：</strong></p><ul><li>让服务器以为不是同一个客户端在请求</li><li>隐藏真实地址</li></ul><p><strong>正向代理和反向代理：</strong></p><ul><li>正向代理：即是**”代理服务器”代理了”客户端”，去和”目标服务器”进行交互**，例如<code>VPN</code></li><li>反向代理：代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例如<code>Nginx</code></li></ul><p><strong>代理使用:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123; </span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:7890&quot;</span>, </span><br><span class="line">    <span class="string">&quot;https&quot;</span>: <span class="string">&quot;https://127.0.0.1:7890&quot;</span>, </span><br><span class="line">    &#125;</span><br><span class="line">requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>,proxies=proxies)</span><br></pre></td></tr></table></figure><h4 id="代理-IP-使用的注意点"><a href="#代理-IP-使用的注意点" class="headerlink" title="代理 IP 使用的注意点"></a>代理 IP 使用的注意点</h4><ul><li><p>反反爬<br>使用代理 ip 是非常必要的一种<code>反反爬</code>的方式，但是即使使用了代理 ip，对方服务器任然会有很多的方式来检测我们是否是一个爬虫</p><ul><li>一段时间内，检测 IP 访问的频率，访问太多频繁会屏蔽</li><li>检查 Cookie，User-Agent，Referer 等 header 参数，若没有则屏蔽</li><li>服务方购买所有代理提供商，加入到反爬虫数据库里，若检测是代理则屏蔽</li></ul><p>所以更好的方式是购买质量更高的代理，或者自己搭建代理服务器，组装自己的<code>代理IP池</code>，同时在使用的时候使用随机的方式进行选择使用，不要每次都用一个代理 ip，没事没有任何效果的</p></li><li><p>代理IP池更新</p></li></ul><h3 id="使用Request处理cookie等相关的请求"><a href="#使用Request处理cookie等相关的请求" class="headerlink" title="使用Request处理cookie等相关的请求"></a>使用Request处理cookie等相关的请求</h3><h4 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h4><ul><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 不是很安全，别人可以分析存放在本地的 cookie 并进行 cookie 欺骗。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。</li><li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ul><h4 id="处理cookie请求方式-session"><a href="#处理cookie请求方式-session" class="headerlink" title="处理cookie请求方式 - session"></a>处理cookie请求方式 - session</h4><ul><li><p>Requests提供了一个叫做<code>session</code>类，来实现客户端和服务端的<code>会话保持</code></p></li><li><p>会话保持有两个内涵：</p><ul><li>保存 cookie</li><li>实现和服务端的长连接</li></ul></li><li><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">response = session.get(url,headers)</span><br></pre></td></tr></table></figure><p>session 实例在请求了一个网站后，对方服务器设置在本地的 cookie 会保存在 session 中，下一次再使用 session 请求对方服务器的时候，会带上前一次的 cookie</p></li></ul><h4 id="处理cookie请求方式-headers"><a href="#处理cookie请求方式-headers" class="headerlink" title="处理cookie请求方式 - headers"></a>处理cookie请求方式 - headers</h4><p>headers中的cookie：</p><ul><li>使用分号 (;) 隔开</li><li>分号两边的类似 a&#x3D;b 形式的表示一条 cookie</li><li>a&#x3D;b 中，a 表示键（name），b 表示值（value）</li><li>headers 中仅仅使用了 cookie 的 name 和 value</li></ul><p>cookie 的具体组成的字段</p><p>由于 headers 中对 cookie 仅仅使用它的 name 和 value，所以在代码中我们仅仅需要 cookie 的 name 和 value 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot; Pycharm-26c2d973=dbb9b300-2483-478f-9f5a-16ca4580177e; Hm_lvt_98b9d8c2fd6608d564bf2ac2ae642948=1512607763; Pycharm-26c2d974=f645329f-338e-486c-82c2-29e2a0205c74; _xsrf=2|d1a3d8ea|c5b07851cbce048bd5453846445de19d|1522379036&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">requests.get(url,headers=headers)</span><br></pre></td></tr></table></figure><p>cookie 有过期时间，所以直接复制浏览器中的 cookie 可能意味着下一程序继续运行的时候需要替换代码中的 cookie，对应的我们也可以通过一个程序专门来获取 cookie 供其他程序使用；当然也有很多网站的 cookie 过期时间很长，这种情况下，直接复制 cookie 来使用更加简单</p><h4 id="处理cookie请求方式-使用-cookies-参数"><a href="#处理cookie请求方式-使用-cookies-参数" class="headerlink" title="处理cookie请求方式 - 使用 cookies 参数"></a>处理cookie请求方式 - 使用 cookies 参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookies = &#123;<span class="string">&quot;cookie的name&quot;</span>:<span class="string">&quot;cookie的value&quot;</span>&#125;</span><br><span class="line">requests.get(url,headers=headers,cookies=cookie_dict&#125;</span><br></pre></td></tr></table></figure><p><code>requests.utils.dict_from_cookiejar</code>: 把 cookiejar 对象转化为字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies))</span><br><span class="line"></span><br><span class="line">cookies = requests.utils.dict_from_cookiejar(response.cookies)</span><br><span class="line"><span class="built_in">print</span>(cookies)</span><br></pre></td></tr></table></figure><h3 id="Request常见参数"><a href="#Request常见参数" class="headerlink" title="Request常见参数"></a>Request常见参数</h3><p><strong>ssl证书</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.12306.cn/mormhweb/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssl.CertificateError ...</span></span><br><span class="line"><span class="comment"># 添加false</span></span><br><span class="line">response = requests.get(url,verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>超时参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(url,timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>retrying 模块的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parse.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line">headers = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop_max_attempt_number=<span class="number">3</span></span>) </span><span class="comment">#最大重试3次，3次全部报错，才会报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_parse_url</span>(<span class="params">url</span>)</span><br><span class="line">    response = requests.get(url, headers=headers, timeout=<span class="number">3</span>) <span class="comment">#超时的时候回报错并重试</span></span><br><span class="line">    <span class="keyword">assert</span> response.status_code == <span class="number">200</span> <span class="comment">#状态码不是200，也会报错并充实</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_url</span>(<span class="params">url</span>)</span><br><span class="line">    <span class="keyword">try</span>: <span class="comment">#进行异常捕获</span></span><br><span class="line">        response = _parse_url(url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="使用无头浏览器selenium"><a href="#使用无头浏览器selenium" class="headerlink" title="使用无头浏览器selenium"></a>使用无头浏览器selenium</h2><p>… </p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>… </p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>爬取 <strong><a href="https://www.vilipix.com/">vilipix</a>上面的图片</strong></p><p>需要使用到的依赖:</p><ul><li><code>pip install requests</code></li><li><code>pip install pyquery</code></li><li><code>pip install fake-useragent</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">ua = UserAgent(verify_ssl=<span class="literal">False</span>, path=<span class="string">&#x27;./fake_useragent0.1.11.json&#x27;</span>)</span><br><span class="line"><span class="comment"># 网站url</span></span><br><span class="line">base_url = <span class="string">&#x27;https://www.vilipix.com&#x27;</span></span><br><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="comment"># 获取昨天的日期，并用于构建url</span></span><br><span class="line">today_str = (datetime.date.today() + datetime.timedelta(days=-<span class="number">1</span>)).strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mark = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择要下载的榜单\n0---每日榜单\n1---每周榜单\n2---每月榜单\n&quot;</span>))</span><br><span class="line">mode = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (mark == <span class="number">0</span>):</span><br><span class="line">    mode = <span class="string">&#x27;daily&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> mark == <span class="number">1</span>:</span><br><span class="line">    mode = <span class="string">&#x27;weekly&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> mark == <span class="number">2</span>:</span><br><span class="line">    mode = <span class="string">&#x27;monthly&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入有误，即将退出程序&quot;</span>)</span><br><span class="line">    os._exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 分布创建属于榜单的文件夹(可以自定义更改)</span></span><br><span class="line">path_1 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_1):</span><br><span class="line">    os.mkdir(path_1)</span><br><span class="line"></span><br><span class="line">path_2 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单/<span class="subst">&#123;today&#125;</span>/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_2):</span><br><span class="line">    os.mkdir(path_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头防止被封</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ua_random</span>():</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;use_agent&#x27;</span>: ua.random</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回网页内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrap_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=url, headers=ua_random())</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>不可爬取！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回具体的url地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrap_index</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/ranking?date=<span class="subst">&#123;today_str&#125;</span>&amp;mode=<span class="subst">&#123;mode&#125;</span>&amp;p=<span class="subst">&#123;page&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> scrap_page(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对页面进行解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_index</span>(<span class="params">html</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    <span class="comment"># pQuery 和 web开发中jQuery 差不多 CSS选择器</span></span><br><span class="line">    links = doc(<span class="string">&#x27;#__layout .illust-content li .illust a&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links.items():</span><br><span class="line">        <span class="comment"># 获取link标签的href属性</span></span><br><span class="line">        href = link.attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        name = href.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 详情页名字，由图片id构成，以防重名</span></span><br><span class="line">        <span class="comment"># 详情页url 拼接</span></span><br><span class="line">        detail_url = urljoin(base_url, href)</span><br><span class="line">        page_count = link(<span class="string">&#x27;.page-count span&#x27;</span>).text()</span><br><span class="line">        <span class="comment"># 惰性生成器</span></span><br><span class="line">        <span class="keyword">yield</span> detail_url, page_count, name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片 保存至本地文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">path, name, image</span>):</span><br><span class="line">    save_path = path + name + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情页内仅有一张图片时调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_index_1</span>(<span class="params">html, name, path</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    link = doc(<span class="string">&#x27;.illust-pages li a img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    image = requests.get(url=link, headers=ua_random()).content</span><br><span class="line">    download(path, name, image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情页内有超过一张图片时调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_index_more</span>(<span class="params">html, name, path</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    links = doc(<span class="string">&#x27;.illust-pages li a img&#x27;</span>)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links.items():</span><br><span class="line">        src = link.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        image_name = name + <span class="string">f&#x27;_<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        image = requests.get(url=src, headers=ua_random()).content</span><br><span class="line">        download(path, image_name, image)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载程序入口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">page</span>):</span><br><span class="line">    html = scrap_index(page)</span><br><span class="line">    details = parse_index(html)</span><br><span class="line">    <span class="keyword">for</span> detail <span class="keyword">in</span> details:</span><br><span class="line">        detail_url = detail[<span class="number">0</span>]  <span class="comment"># 详情页的url</span></span><br><span class="line">        num = detail[<span class="number">1</span>]  <span class="comment"># 详情页内图片的数量</span></span><br><span class="line">        name = detail[<span class="number">2</span>]  <span class="comment"># 给详情页命的名</span></span><br><span class="line">        detail_html = scrap_page(detail_url)</span><br><span class="line">        <span class="keyword">if</span> num == <span class="string">&#x27;1&#x27;</span>:  <span class="comment"># 第①种情况</span></span><br><span class="line">            detail_index_1(detail_html, name, path_2)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 第②种情况</span></span><br><span class="line">            path_3 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单/<span class="subst">&#123;today&#125;</span>/<span class="subst">&#123;name&#125;</span>/&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_3):</span><br><span class="line">                os.mkdir(path_3)</span><br><span class="line">            detail_index_more(detail_html, name, path_3)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">10</span>, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>下载完毕！&#x27;</span>, <span class="string">&#x27;*&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># print(&quot;图片下载完成辣，谢谢使用！！&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 主程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pages = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>))</span><br><span class="line">    <span class="comment"># 使用多线程进行加速</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(main, pages)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图片下载完成辣，谢谢使用！！&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器配置代理</title>
      <link href="/2023/11/20/Linux%E4%BB%A3%E7%90%86/"/>
      <url>/2023/11/20/Linux%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下使用Clash科学上网"><a href="#Linux下使用Clash科学上网" class="headerlink" title="Linux下使用Clash科学上网"></a>Linux下使用Clash科学上网</h1><blockquote><p>在 Linux 服务器上通过 Clash 科学上网<br>如果出现权限不足的情况请在指令前面加上 <code>sudo</code> </p></blockquote><h2 id="安装Clash"><a href="#安装Clash" class="headerlink" title="安装Clash"></a><strong>安装<code>Clash</code></strong></h2><ul><li><p>下载当前操作系统与 CPU 架构对应的包文件，我这儿是 X86_64 平台下的Ubuntu所以对应使用的是<a href="https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz">clash-linux-amd64-v1.6.5.gz</a>即ok(当然取github上面找到不同的安装包只要能够对应也ok)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O clash.gz https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz</span><br></pre></td></tr></table></figure></li><li><p>下载好后解压安装包中 clash 到 <code>/usr/local/bin/</code> 目录下，并删除压缩包文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gzip -dc clash.gz &gt; /usr/local/bin/clash</span><br><span class="line">chmod +x /usr/local/bin/clash</span><br><span class="line">rm -f clash.gz</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件目录，并下载 MMDB 文件(注意这一步很可能失败建议直接在网上找Country.mmdb文件下载并手动上传比较好) <a href="https://github.com/Dreamacro/maxmind-geoip/releases">下载网址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/clash</span><br><span class="line">wget -O /etc/clash/Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>systemd</code> 脚本，脚本文件路径为 <code>/etc/systemd/system/clash.service</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=clash daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/local/bin/clash -d /etc/clash/</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>重载 systemctl daemon</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a><strong>配置代理</strong></h2><ul><li><p>导入已有的<code>vpn</code> 链接 (订阅链接啦) </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/clash/config.yaml [你的订阅链接]</span><br></pre></td></tr></table></figure></li><li><p>设置系统代理，添加配置文件 <code>/etc/profile.d/proxy.sh</code> 并在其中写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export https_proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export HTTP_PROXY=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure></li><li><p>重载 <code>/etc/profile</code> 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>启动 <code>clash</code> 服务，并设置为开机自动启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start clash</span><br><span class="line">systemctl enable clash</span><br></pre></td></tr></table></figure></li><li><p>测试 goolge.com 访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl google.com</span></span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;301 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=&quot;http://www.google.com/&quot;&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置web-UI"><a href="#配置web-UI" class="headerlink" title="配置web-UI"></a><strong>配置web-UI</strong></h2><ul><li><p>克隆 <a href="https://github.com/Dreamacro/clash-dashboard">clash-dashboard</a> 项目到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b gh-pages --depth 1 https://github.com/Dreamacro/clash-dashboard /opt/clash-dashboard</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>clash</code> 配置文件中 <code>external-ui</code> 的值为 <code>/opt/clash-dashboard</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/^#\&#123;0,1\&#125; \&#123;0,1\&#125;external-ui.*/external-ui: \/opt\/clash-dashboard/&quot; /etc/clash/config.yaml</span><br></pre></td></tr></table></figure></li><li><p>重启clash服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart clash</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问 <code>localhost:9090/ui</code>，其中 <code>localhost</code> 替换为 clash 部署服务器的 IP</p></li></ul><h2 id="配置定时更新订阅"><a href="#配置定时更新订阅" class="headerlink" title="配置定时更新订阅"></a>配置定时更新订阅</h2><p>使用如下脚本填写相关配置项目并放入 <code>/etc/cron.weekly</code> 目录下，每周自动更新订阅配置文件即可<br><code>sudo vim /etc/cron.weekly/clash.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅链接地址</span></span><br><span class="line">SUBSCRIBE=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">web-ui存放目录，留空则保持默认不修改</span></span><br><span class="line">WEB_UI=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API 端口，留空则保持默认不修改</span></span><br><span class="line">CONTROLLER_API_PROT=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API 口令，留空则保持默认不修改</span></span><br><span class="line">SECRET=&quot;&quot;</span><br><span class="line"></span><br><span class="line">CLASH_CONFIG=&quot;/etc/clash/config.yaml&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ -z &quot;$&#123;SUBSCRIBE&#125;&quot; ]; then</span><br><span class="line">    echo &quot;Subscription address cannot be empty&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">systemctl stop clash</span><br><span class="line"></span><br><span class="line">wget --no-proxy -O $&#123;CLASH_CONFIG&#125; $&#123;SUBSCRIBE&#125;</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;WEB_UI&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^#\&#123;0,1\&#125; \&#123;0,1\&#125;external-ui.*?external-ui: $&#123;WEB_UI&#125;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;CONTROLLER_API_PROT&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^external-controller.*?external-controller: &#x27;0.0.0.0:$&#123;CONTROLLER_API_PROT&#125;&#x27;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;SECRET&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^secret.*?secret: &#x27;$&#123;SECRET&#125;&#x27;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">systemctl start clash</span><br></pre></td></tr></table></figure><p>上述脚本写入 <code>/etc/cron.weekly/clash.sh</code> 并配置好相关变量后，保存退出并赋予可执行权限<br><code>chmod 0755 /etc/cron.weekly/clash.sh</code><br>至此，Linux 下 clash 配置完成啦！！</p>]]></content>
      
      
      <categories>
          
          <category> 服务器知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Clash </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
