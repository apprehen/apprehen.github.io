<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go 语言速成</title>
      <link href="/posts/ac8590ca.html"/>
      <url>/posts/ac8590ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="HelloWorld简单示例"><a href="#HelloWorld简单示例" class="headerlink" title="HelloWorld简单示例"></a><code>HelloWorld</code>简单示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run helloworld.go</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p><code>go run</code>表示直接运行 直接编译 go 语言并执行应用程序，一步完成 也可以先 <code>go build helloworld.go || ./helloworld.go</code> <code>build</code>成静态语言然后在执行</p><blockquote><p>go 语言的语言, 写出规范的一致代码是很重要的 比如写函数的时候’{‘ 必须和函数名在同一行 建议使用 go 的默认格式化程序来约束</p></blockquote><p>上面的执行流程是</p><ul><li><strong>package main</strong>: 定义了包名 必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main 表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包</li><li><strong>import “fmt”</strong>: 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入&#x2F;输出）的函数。</li><li><strong>func main()</strong>: main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）</li><li><strong>fmt.Println(…)</strong>: 可以将字符串输出到控制台，并在最后自动增加换行字符 \n。 使用 fmt.Print(“hello, world\n”) 可以得到相同的结果。 Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。</li></ul><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x, y <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a <span class="type">int</span>  = <span class="number">1</span></span><br><span class="line">    b <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> c, d <span class="type">int</span> = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> e, f = <span class="number">123</span>, <span class="string">&quot;yueyun&quot;</span></span><br><span class="line"><span class="comment">// 这种不带声明格式的只能在函数体内声明</span></span><br><span class="line"><span class="comment">// g, h := 123, &quot;需要在func函数体内实现&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g,h := <span class="number">123</span>, <span class="string">&quot;explosion&quot;</span></span><br><span class="line">    <span class="comment">// 使用 _ 接受不要的参数</span></span><br><span class="line">    _,t = <span class="literal">nil</span>, <span class="string">&#x27;Explosion&#x27;</span></span><br><span class="line">    fmt.Println(g,h.t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明⼀个变量 默认的值是 0 <code>var a int</code><br>声明⼀个变量，初始化⼀个值 <code>var b int = 100</code><br>在初始化的时候，可以省去数据类型，通过值⾃动匹配当前的变量的数据类型 <code>var c = 100</code><br>(常⽤的⽅法) 省去 var 关键字，直接⾃动匹配 <code>e := 100</code> （不支持全局）</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">b <span class="type">int</span>    = <span class="number">20</span></span><br><span class="line">c <span class="type">string</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// iota与const来表示枚举类型</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">BEJing   = <span class="number">10</span> * <span class="literal">iota</span> <span class="comment">//iota=0</span></span><br><span class="line">SHANGHAI             <span class="comment">//iota=1</span></span><br><span class="line">SHENZHEN             <span class="comment">//iota=2</span></span><br><span class="line">)</span><br><span class="line">    <span class="comment">// 按照行来给 iota 来赋值</span></span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">                _           = <span class="literal">iota</span>                   <span class="comment">// ignore first value by assigning to blank identifier</span></span><br><span class="line">                KB ByteSize = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)       <span class="comment">// 1 &lt;&lt; (10*1)</span></span><br><span class="line">                MB                                   <span class="comment">// 1 &lt;&lt; (10*2)</span></span><br><span class="line">                GB                                   <span class="comment">// 1 &lt;&lt; (10*3)</span></span><br><span class="line">                TB                                   <span class="comment">// 1 &lt;&lt; (10*4)</span></span><br><span class="line">                PB                                   <span class="comment">// 1 &lt;&lt; (10*5)</span></span><br><span class="line">                EB                                   <span class="comment">// 1 &lt;&lt; (10*6)</span></span><br><span class="line">                ZB                                   <span class="comment">// 1 &lt;&lt; (10*7)</span></span><br><span class="line">                YB                                   <span class="comment">// 1 &lt;&lt; (10*8)</span></span><br><span class="line">            )</span><br><span class="line">fmt.Println(a, b, c, BEJing, SHANGHAI, SHENZHEN)</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;foo1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回多个返回值 匿名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo2</span><span class="params">(a <span class="type">int</span>, b <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;foo2&quot;</span>, a, b)</span><br><span class="line"><span class="keyword">return</span> a + <span class="number">1</span>, b + <span class="string">&quot;explosion&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo3</span><span class="params">(a <span class="type">int</span>, b <span class="type">string</span>)</span></span> (c <span class="type">int</span>, d <span class="type">string</span>) &#123;</span><br><span class="line"><span class="comment">// c d 属于 foo3的形参 初始的默认值是0 作用域空间是foo3 函数体&#123;&#125;内</span></span><br><span class="line">fmt.Println(<span class="string">&quot;foo3&quot;</span>, a, b, c, d)</span><br><span class="line">c = a + <span class="number">1</span></span><br><span class="line">d = b + <span class="string">&quot;explosion&quot;</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">foo1()</span><br><span class="line">foo2(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">foo3(<span class="number">2</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><p>函数传递参数包括值传递和引用传递</p><p>这里首先介绍一下指针<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/go/01.png"></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/go/02.png"></p><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><p>值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p>默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。</p><p>以下定义了 swap() 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义相互交换值的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   temp = x <span class="comment">/* 保存 x 的值 */</span></span><br><span class="line">   x = y    <span class="comment">/* 将 y 值赋给 x */</span></span><br><span class="line">   y = temp <span class="comment">/* 将 temp 值赋给 y*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，让我们使用值传递来调用 swap() 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 a 的值为 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 b 的值为 : %d\n&quot;</span>, b )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 通过调用函数来交换值 */</span></span><br><span class="line">   swap(a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 b 的值 : %d\n&quot;</span>, b )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义相互交换值的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   temp = x <span class="comment">/* 保存 x 的值 */</span></span><br><span class="line">   x = y    <span class="comment">/* 将 y 值赋给 x */</span></span><br><span class="line">   y = temp <span class="comment">/* 将 temp 值赋给 y*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*以下代码执行结果为：</span></span><br><span class="line"><span class="comment">交换前 a 的值为 : 100</span></span><br><span class="line"><span class="comment">交换前 b 的值为 : 200</span></span><br><span class="line"><span class="comment">交换后 a 的值 : 100</span></span><br><span class="line"><span class="comment">交换后 b 的值 : 200</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="引用传递-指针传递"><a href="#引用传递-指针传递" class="headerlink" title="引用传递(指针传递)"></a>引用传递(指针传递)</h4><p>引用传递指针参数传递到函数内，以下是交换函数 swap() 使用了引用传递：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义交换值函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x *<span class="type">int</span>, y *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">   temp = *x    <span class="comment">/* 保持 x 地址上的值 */</span></span><br><span class="line">   *x = *y      <span class="comment">/* 将 y 值赋给 x */</span></span><br><span class="line">   *y = temp    <span class="comment">/* 将 temp 值赋给 y */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span>= <span class="number">200</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前，a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前，b 的值 : %d\n&quot;</span>, b )</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用 swap() 函数</span></span><br><span class="line"><span class="comment">   * &amp;a 指向 a 指针，a 变量的地址</span></span><br><span class="line"><span class="comment">   * &amp;b 指向 b 指针，b 变量的地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   swap(&amp;a, &amp;b)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后，a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后，b 的值 : %d\n&quot;</span>, b )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x *<span class="type">int</span>, y *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">   temp = *x    <span class="comment">/* 保存 x 地址上的值 */</span></span><br><span class="line">   *x = *y      <span class="comment">/* 将 y 值赋给 x */</span></span><br><span class="line">   *y = temp    <span class="comment">/* 将 temp 值赋给 y */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">以上代码执行结果为：</span></span><br><span class="line"><span class="comment">交换前，a 的值 : 100</span></span><br><span class="line"><span class="comment">交换前，b 的值 : 200</span></span><br><span class="line"><span class="comment">交换后，a 的值 : 200</span></span><br><span class="line"><span class="comment">交换后，b 的值 : 100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="init-函数与导包"><a href="#init-函数与导包" class="headerlink" title="init 函数与导包"></a>init 函数与导包</h3><p>现在在一个 go 的工程目录下有下面的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tree /F /A</span><br><span class="line">E:.</span><br><span class="line">|   main.go</span><br><span class="line">|</span><br><span class="line">+<span class="literal">---lib1</span></span><br><span class="line">|       lib1.go</span><br><span class="line">|</span><br><span class="line">|<span class="literal">---lib2</span></span><br><span class="line">        lib2.go</span><br></pre></td></tr></table></figure><p> <code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;/go/lib1&quot;</span></span><br><span class="line"><span class="string">&quot;/go/lib2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;main()....&quot;</span>)</span><br><span class="line">lib1.Lib1Test()</span><br><span class="line">lib2.Lib2Test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib1.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lib1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出的包必须大写才可见</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lib1Test</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Lib1Test()....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Lib1 init()....&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib2.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lib2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出的包必须大写才可见</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lib2Test</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Lib2Test()....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Lib2 init()....&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>import 导包的时候</p><ul><li>import _ “fmt”: 给 fmt 包起⼀个别名，匿名， ⽆法使⽤当前包的⽅法，但是 会执⾏当前的包内部的 init()⽅法</li><li>import aa “fmt” 给 fmt 包起⼀个别名，aa， aa.Println()来直接调⽤</li><li>import . “fmt” 将当前 fmt 包中的全部⽅法，导⼊到当前本包的作⽤中，fmt 包中 的全部的⽅法可以直接使⽤ API 来调⽤，不需要 fmt.API 来调⽤</li></ul><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><h3 id="defer-的执行顺序"><a href="#defer-的执行顺序" class="headerlink" title="defer 的执行顺序"></a>defer 的执行顺序</h3><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/go/03.png"></p><p>执行顺序是 fun3() –&gt; fun2() –&gt; fun1()</p><h3 id="defter-和-return"><a href="#defter-和-return" class="headerlink" title="defter 和 return"></a>defter 和 return</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferFunc</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;defer func called... &quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnFunc</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;return func called... &quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnAndDefer</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> deferFunc()</span><br><span class="line"><span class="keyword">return</span> returnFunc()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">returnAndDefer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">return func called...</span></span><br><span class="line"><span class="comment">defer func called...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>return 之后的语句先执⾏，defer 后的语句后执⾏</p><h2 id="切片和-slice"><a href="#切片和-slice" class="headerlink" title="切片和 slice"></a>切片和 slice</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组长度是固定的 固定长度的数据在传参的时候是严格匹配数组类型的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myArray1 = [<span class="number">10</span>]<span class="type">int</span> <span class="comment">// 默认值是0</span></span><br><span class="line">    myArray2 := [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">    myArray3 := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray [4]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 值拷贝 而且形参类型固定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态数组-slice"><a href="#动态数组-slice" class="headerlink" title="动态数组 slice"></a>动态数组 slice</h3><p>动态数组的参数上是引用传递 而且不同元素长度的动态数组他们的形参是一致</p><h4 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myArray := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// 动态数组 切片 slice</span></span><br><span class="line"><span class="comment">// 声明slice</span></span><br><span class="line">slice := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="type">int</span>               <span class="comment">// nil slice 声明是一个切片但是没有给slice分配空间</span></span><br><span class="line">slice1 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)        <span class="comment">// 开辟3个空间 默认值是0</span></span><br><span class="line"><span class="keyword">var</span> slice2 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">// 开辟3个空间 默认值是0 5是底层数组的长度 cap</span></span><br><span class="line">slice3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)       <span class="comment">// 常用 隐式 推导</span></span><br><span class="line">fmt.Println(slice, slice1, slice2, slice3)</span><br><span class="line">fmt.Println(myArray)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>切片的容量和追加：切片的长度和容量不同，长度表示左指针至右指针的距离，容量表示左指针至底层数组末尾的距离</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/go/04.png"></p><p>切⽚的扩容机制，append的时候，如果⻓度增加后超过容量，则将容量增加2倍</p><h4 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h4><p>可以通过设置下限及上限来设置截取切片*[lower-bound:upper-bound]*，实例如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 创建切片 */</span></span><br><span class="line">   numbers := []<span class="type">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;   </span><br><span class="line">   printSlice(numbers)</span><br><span class="line">   <span class="comment">/* 打印原始切片 */</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers ==&quot;</span>, numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引1(包含) 到索引4(不包含)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[1:4] ==&quot;</span>, numbers[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认下限为 0*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[:3] ==&quot;</span>, numbers[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认上限为 len(s)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[4:] ==&quot;</span>, numbers[<span class="number">4</span>:])</span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">   printSlice(numbers1)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引  0(包含) 到索引 2(不包含) */</span></span><br><span class="line">   number2 := numbers[:<span class="number">2</span>]</span><br><span class="line">   printSlice(number2)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引 2(包含) 到索引 5(不包含) */</span></span><br><span class="line">   number3 := numbers[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">   printSlice(number3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以上代码输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">len=9 <span class="built_in">cap</span>=9 slice=[0 1 2 3 4 5 6 7 8]</span><br><span class="line">numbers == [0 1 2 3 4 5 6 7 8]</span><br><span class="line">numbers[1:4] == [1 2 3]</span><br><span class="line">numbers[:3] == [0 1 2]</span><br><span class="line">numbers[4:] == [4 5 6 7 8]</span><br><span class="line">len=0 <span class="built_in">cap</span>=5 slice=[]</span><br><span class="line">len=2 <span class="built_in">cap</span>=9 slice=[0 1]</span><br><span class="line">len=3 <span class="built_in">cap</span>=7 slice=[2 3 4]</span><br></pre></td></tr></table></figure><h4 id="append-和-copy-函数"><a href="#append-和-copy-函数" class="headerlink" title="append() 和 copy() 函数"></a>append() 和 copy() 函数</h4><p>如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers []<span class="type">int</span></span><br><span class="line">   printSlice(numbers)</span><br><span class="line">   <span class="comment">/* 允许追加空切片 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">0</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line">   <span class="comment">/* 向切片添加一个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line">   <span class="comment">/* 同时添加多个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    printSlice(numbers)</span><br><span class="line">   <span class="comment">/* 创建切片 numbers1 是之前切片的两倍容量*/</span></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(numbers), (<span class="built_in">cap</span>(numbers))*<span class="number">2</span>)</span><br><span class="line">   <span class="comment">/* 拷贝 numbers 的内容到 numbers1 */</span></span><br><span class="line">   <span class="built_in">copy</span>(numbers1,numbers)</span><br><span class="line">   printSlice(numbers1)   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">len=0 <span class="built_in">cap</span>=0 slice=[]</span><br><span class="line">len=1 <span class="built_in">cap</span>=1 slice=[0]</span><br><span class="line">len=2 <span class="built_in">cap</span>=2 slice=[0 1]</span><br><span class="line">len=5 <span class="built_in">cap</span>=6 slice=[0 1 2 3 4]</span><br><span class="line">len=5 <span class="built_in">cap</span>=12 slice=[0 1 2 3 4]</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//第一种声明</span></span><br><span class="line">    <span class="keyword">var</span> test1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">    <span class="comment">//在使用map前，需要先make，make的作用就是给map分配数据空间</span></span><br><span class="line">    test1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>) </span><br><span class="line">    test1[<span class="string">&quot;one&quot;</span>] = <span class="string">&quot;php&quot;</span></span><br><span class="line">    test1[<span class="string">&quot;two&quot;</span>] = <span class="string">&quot;golang&quot;</span></span><br><span class="line">    test1[<span class="string">&quot;three&quot;</span>] = <span class="string">&quot;java&quot;</span></span><br><span class="line">    fmt.Println(test1) <span class="comment">//map[two:golang three:java one:php]</span></span><br><span class="line">    <span class="comment">//第二种声明</span></span><br><span class="line">    test2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    test2[<span class="string">&quot;one&quot;</span>] = <span class="string">&quot;php&quot;</span></span><br><span class="line">    test2[<span class="string">&quot;two&quot;</span>] = <span class="string">&quot;golang&quot;</span></span><br><span class="line">    test2[<span class="string">&quot;three&quot;</span>] = <span class="string">&quot;java&quot;</span></span><br><span class="line">    fmt.Println(test2) <span class="comment">//map[one:php two:golang three:java]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种声明</span></span><br><span class="line">    test3 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">        <span class="string">&quot;one&quot;</span> : <span class="string">&quot;php&quot;</span>,</span><br><span class="line">        <span class="string">&quot;two&quot;</span> : <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">        <span class="string">&quot;three&quot;</span> : <span class="string">&quot;java&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(test3) <span class="comment">//map[one:php two:golang three:java]</span></span><br><span class="line">    language := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">    language[<span class="string">&quot;php&quot;</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">2</span>)</span><br><span class="line">    language[<span class="string">&quot;php&quot;</span>][<span class="string">&quot;id&quot;</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line">    language[<span class="string">&quot;php&quot;</span>][<span class="string">&quot;desc&quot;</span>] = <span class="string">&quot;php是世界上最美的语言&quot;</span></span><br><span class="line">    language[<span class="string">&quot;golang&quot;</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">2</span>)</span><br><span class="line">    language[<span class="string">&quot;golang&quot;</span>][<span class="string">&quot;id&quot;</span>] = <span class="string">&quot;2&quot;</span></span><br><span class="line">    language[<span class="string">&quot;golang&quot;</span>][<span class="string">&quot;desc&quot;</span>] = <span class="string">&quot;golang抗并发非常good&quot;</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(language) <span class="comment">//map[php:map[id:1 desc:php是世界上最美的语言] golang:map[id:2 desc:golang抗并发非常good]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改查</span></span><br><span class="line">    <span class="comment">// val, key := language[&quot;php&quot;]  //查找是否有php这个子元素</span></span><br><span class="line">    <span class="comment">// if key &#123;</span></span><br><span class="line">    <span class="comment">//     fmt.Printf(&quot;%v&quot;, val)</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     fmt.Printf(&quot;no&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//language[&quot;php&quot;][&quot;id&quot;] = &quot;3&quot; //修改了php子元素的id值</span></span><br><span class="line">    <span class="comment">//language[&quot;php&quot;][&quot;nickname&quot;] = &quot;啪啪啪&quot; //增加php元素里的nickname值</span></span><br><span class="line">    <span class="comment">//delete(language, &quot;php&quot;)  //删除了php子元素</span></span><br><span class="line">    fmt.Println(language)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的网站资源整合</title>
      <link href="/posts/f2d319ed.html"/>
      <url>/posts/f2d319ed.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h1><h2 id="计算机基础知识"><a href="#计算机基础知识" class="headerlink" title="计算机基础知识"></a>计算机基础知识</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><h3 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h3><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><h2 id="web-开发"><a href="#web-开发" class="headerlink" title="web 开发"></a>web 开发</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h1 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h1>]]></content>
      
      
      <categories>
          
          <category> 资源整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源整合 </tag>
            
            <tag> 八股 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 刷题(每日一题) 记录</title>
      <link href="/posts/9c0aba3e.html"/>
      <url>/posts/9c0aba3e.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>2023&#x2F;12&#x2F;27&#x2F;10:56<br><a href="https://leetcode.cn/problems/determine-the-winner-of-a-bowling-game/description/">leetcode 2660 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">player1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">player2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isWinner = <span class="keyword">function</span> (<span class="params">player1, player2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum1 = <span class="number">0</span>,</span><br><span class="line">    sum2 = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">generate</span> = (<span class="params">player, index</span>) =&gt;</span><br><span class="line">    (player[index - <span class="number">1</span>] === <span class="number">10</span> || player[index - <span class="number">2</span>] === <span class="number">10</span> ? <span class="number">2</span> : <span class="number">1</span>) *</span><br><span class="line">    player[index]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; player1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    sum1 += <span class="title function_">generate</span>(player1, i)</span><br><span class="line">    sum2 += <span class="title function_">generate</span>(player2, i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum1 &gt; sum2 ? <span class="number">1</span> : sum1 === sum2 ? <span class="number">0</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;12&#x2F;28&#x2F;13:28<br><a href="https://leetcode.cn/problems/collecting-chocolates/description/">leetcode 2735 mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minCost = <span class="keyword">function</span> (<span class="params">nums, x</span>) &#123;</span><br><span class="line">  <span class="comment">// 遍历出所有的可能情况结果 首先维护一个操作n长度的花费的数组</span></span><br><span class="line">  <span class="keyword">const</span> n = nums.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> s = <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    s[i] = i * x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">// 当前的花费</span></span><br><span class="line">    <span class="keyword">let</span> mn = nums[i]</span><br><span class="line">    <span class="comment">// 往后遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; n + i; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> mn = <span class="title class_">Math</span>.<span class="title function_">min</span>(mn, nums[j % n])</span><br><span class="line">      s[i] += mn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(...s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;12&#x2F;29&#x2F;11:29<br><a href="https://leetcode.cn/problems/buy-two-chocolates/description/">leetcode 2706 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">prices</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">money</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buyChoco = <span class="keyword">function</span> (<span class="params">prices, money</span>) &#123;</span><br><span class="line">  prices.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">let</span> cost = prices[<span class="number">0</span>] + prices[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">return</span> cost &gt; money ? money : money - cost</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;12&#x2F;30&#x2F;14:02<br><a href="https://leetcode.cn/problems/day-of-the-week/description/">leetcode 1185 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dayOfTheWeek = <span class="keyword">function</span> (<span class="params">day, month, year</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;Sunday&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Monday&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tuesday&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Thursday&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Friday&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Saturday&#x27;</span></span><br><span class="line">  ][<span class="keyword">new</span> <span class="title class_">Date</span>(year, month - <span class="number">1</span>, day).<span class="title function_">getDay</span>()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;12&#x2F;31&#x2F;17:56<br><a href="https://leetcode.cn/problems/day-of-the-year/description/">leetcode 1154 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">date</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dayOfYear = <span class="keyword">function</span> (<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">isLeapYear</span> = (<span class="params">year</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span>) || year % <span class="number">400</span> === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [year, month, day] = date.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> monthDays = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">59</span>, <span class="number">90</span>, <span class="number">120</span>, <span class="number">151</span>, <span class="number">181</span>, <span class="number">212</span>, <span class="number">243</span>, <span class="number">273</span>, <span class="number">304</span>, <span class="number">334</span>]</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isLeapYear</span>(+year)) &#123;</span><br><span class="line">    <span class="comment">// return</span></span><br><span class="line">    <span class="keyword">if</span> (+month &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> monthDays[+month] + <span class="number">1</span> + +day</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> monthDays[+month] + +day</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2024&#x2F;1&#x2F;01<br><a href="https://leetcode.cn/problems/maximum-profit-of-operating-a-centennial-wheel/description/">leetcode 1599 mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minOperationsMaxProfit = <span class="keyword">function</span> (<span class="params">customers, boardingCost, runningCost</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> costSum = <span class="number">0</span>,</span><br><span class="line">    prevCostSum = <span class="number">0</span>,</span><br><span class="line">    ans = -<span class="number">1</span></span><br><span class="line">  <span class="comment">// 维护一个队列</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, queue = <span class="number">0</span>; i &lt; customers.<span class="property">length</span> || queue &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; customers.<span class="property">length</span>) &#123;</span><br><span class="line">      queue += customers[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> k = queue &lt; <span class="number">4</span> ? queue : <span class="number">4</span></span><br><span class="line">    queue -= k</span><br><span class="line">    costSum += k * boardingCost - runningCost</span><br><span class="line">    <span class="keyword">if</span> (costSum &lt;= prevCostSum) <span class="keyword">continue</span></span><br><span class="line">    prevCostSum = costSum</span><br><span class="line">    ans = i + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2024&#x2F;1&#x2F;02<br><a href="https://leetcode.cn/problems/count-the-repetitions/description/">leetcode 466 hard</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getMaxRepetitions = <span class="keyword">function</span> (<span class="params">s1, n1, s2, n2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> [len1, len2, index1, index2] = [s1.<span class="property">length</span>, s2.<span class="property">length</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (len1 === <span class="number">0</span> || len2 === <span class="number">0</span> || len1 * n1 &lt; len2 * n2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>(),</span><br><span class="line">    map2 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 遍历整个str1</span></span><br><span class="line">  <span class="keyword">while</span> (index1 / len1 &lt; n1) &#123;</span><br><span class="line">    <span class="comment">// 在S1末尾</span></span><br><span class="line">    <span class="keyword">if</span> (index1 % len1 === len1 - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (map1.<span class="title function_">has</span>(index2 % len2)) &#123;</span><br><span class="line">        <span class="comment">// 每次循环占多少个s1</span></span><br><span class="line">        <span class="keyword">let</span> cycleLen =</span><br><span class="line">          <span class="title class_">Math</span>.<span class="title function_">floor</span>(index1 / len1) -</span><br><span class="line">          <span class="title class_">Math</span>.<span class="title function_">floor</span>(map1.<span class="title function_">get</span>(index2 % len2) / len1)</span><br><span class="line">        <span class="keyword">let</span> cycleNum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(</span><br><span class="line">          (n1 - <span class="number">1</span> - <span class="title class_">Math</span>.<span class="title function_">floor</span>(index1 / len1)) / cycleLen</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">let</span> cycleS2Num =</span><br><span class="line">          <span class="title class_">Math</span>.<span class="title function_">floor</span>(index2 / len2) -</span><br><span class="line">          <span class="title class_">Math</span>.<span class="title function_">floor</span>(map2.<span class="title function_">get</span>(index2 % len2) / len2)</span><br><span class="line"></span><br><span class="line">        index1 += cycleNum * cycleLen * len1</span><br><span class="line">        ans += cycleNum * cycleS2Num</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        map1.<span class="title function_">set</span>(index2 % len2, index1)</span><br><span class="line">        map2.<span class="title function_">set</span>(index2 % len2, index2)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s1[index1 % len1] === s2[index2 % len2]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index2 % len2 === len2 - <span class="number">1</span>) &#123;</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      index2 += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index1 += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(ans / n2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2024&#x2F;01&#x2F;03<br><a href="https://leetcode.cn/problems/remove-nodes-from-linked-list/description/">leetcode 2487 mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNodes = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> p = head</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="keyword">const</span> x = p.<span class="property">val</span></span><br><span class="line">    <span class="keyword">while</span> (stack.<span class="property">length</span> &amp;&amp; stack.<span class="title function_">at</span>(-<span class="number">1</span>) &lt; x) &#123;</span><br><span class="line">      stack.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    stack.<span class="title function_">push</span>(x)</span><br><span class="line">    p = p.<span class="property">next</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> h = <span class="keyword">new</span> <span class="title class_">ListNode</span>()</span><br><span class="line">  <span class="keyword">let</span> cur = h</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> stack) &#123;</span><br><span class="line">    cur.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(x)</span><br><span class="line">    cur = cur.<span class="property">next</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> h.<span class="property">next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;04<br><a href="https://leetcode.cn/problems/maximum-rows-covered-by-columns/description/">leetcode 2397 mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maximumRows = <span class="keyword">function</span> (<span class="params">matrix, numSelect</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> row = matrix.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> col = matrix[<span class="number">0</span>].<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 1 代表选择 0代表不选择 遍历整个 2^col 去选择</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; col; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">resCount</span>(i) !== numSelect) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> coverCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; row; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> canCover = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; col; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[j][k] === <span class="number">1</span> &amp;&amp; ((<span class="number">1</span> &lt;&lt; k) &amp; i) === <span class="number">0</span>) &#123;</span><br><span class="line">          canCover = <span class="literal">false</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      canCover &amp;&amp; coverCount++</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="title class_">Math</span>.<span class="title function_">max</span>(ans, coverCount)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算1的个数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resCount</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      res++</span><br><span class="line">    &#125;</span><br><span class="line">    x &gt;&gt;= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;05<br><a href="https://leetcode.cn/problems/number-of-visible-people-in-a-queue/description/">leetcode 1944 hard</a> (感觉不算是 hard 应该是 mid)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canSeePersonsCount = <span class="keyword">function</span> (<span class="params">heights</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ans = <span class="title class_">Array</span>(heights.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 维护一个栈</span></span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="comment">// 从右向前遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = heights.<span class="property">length</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stack.<span class="property">length</span> &amp;&amp; stack.<span class="title function_">at</span>(-<span class="number">1</span>) &lt; heights[i]) &#123;</span><br><span class="line">      stack.<span class="title function_">pop</span>()</span><br><span class="line">      ans[i]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stack.<span class="property">length</span>) &#123;</span><br><span class="line">      ans[i]++</span><br><span class="line">    &#125;</span><br><span class="line">    stack.<span class="title function_">push</span>(heights[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;06<br><a href="https://leetcode.cn/problems/insert-greatest-common-divisors-in-linked-list/description/">leetcode 2807 mid</a> （感觉算是 easy 题 没什么难度）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> insertGreatestCommonDivisors = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> cur = head; cur.<span class="property">next</span>; cur = cur.<span class="property">next</span>.<span class="property">next</span>) &#123;</span><br><span class="line">    cur.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="title function_">gcd</span>(cur.<span class="property">val</span>, cur.<span class="property">next</span>.<span class="property">val</span>), cur.<span class="property">next</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (a !== <span class="number">0</span>) &#123;</span><br><span class="line">    ;[a, b] = [b % a, a]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;07<br><a href="https://leetcode.cn/problems/ransom-note/description/">leetcode 383 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span> (<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> magazine) &#123;</span><br><span class="line">    arr[a.<span class="title function_">charCodeAt</span>() - <span class="number">97</span>]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> ransomNote) &#123;</span><br><span class="line">    arr[a.<span class="title function_">charCodeAt</span>() - <span class="number">97</span>]--</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">every</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt;= <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;08<br><a href="https://leetcode.cn/problems/number-of-boomerangs/description/">leetcode 477 mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberOfBoomerangs = <span class="keyword">function</span> (<span class="params">points</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> countMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [x1, y1] <span class="keyword">of</span> points) &#123;</span><br><span class="line">    countMap.<span class="title function_">clear</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [x2, y2] <span class="keyword">of</span> points) &#123;</span><br><span class="line">      <span class="keyword">const</span> d = (x1 - x2) ** <span class="number">2</span> + (y1 - y2) ** <span class="number">2</span></span><br><span class="line">      <span class="keyword">const</span> c = countMap.<span class="title function_">get</span>(d) ?? <span class="number">0</span> <span class="comment">// null or undefined  0</span></span><br><span class="line">      ans += c * <span class="number">2</span></span><br><span class="line">      countMap.<span class="title function_">set</span>(d, c + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;09<br><a href="https://leetcode.cn/problems/extra-characters-in-a-string/description/">leetcode 2707 mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用dfs动态规划</span></span><br><span class="line"><span class="keyword">var</span> minExtraChar = <span class="keyword">function</span> (<span class="params">s, dictionary</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = s.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> memo = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="comment">// 从st开始分割</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">st</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (memo.<span class="title function_">has</span>(st)) <span class="keyword">return</span> memo.<span class="title function_">get</span>(st)</span><br><span class="line">    <span class="keyword">let</span> sub = s.<span class="title function_">slice</span>(st)</span><br><span class="line">    <span class="keyword">let</span> res = n - st</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> pattern <span class="keyword">of</span> dictionary) &#123;</span><br><span class="line">      <span class="keyword">let</span> idx = sub.<span class="title function_">indexOf</span>(pattern)</span><br><span class="line">      <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line">      res = <span class="title class_">Math</span>.<span class="title function_">min</span>(res, idx + <span class="title function_">dfs</span>(st + idx + pattern.<span class="property">length</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    memo.<span class="title function_">set</span>(st, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">dfs</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;10<br><a href="https://leetcode.cn/problems/minimum-string-length-after-removing-substrings/description/">leetcode 2696 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minLength = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="title function_">indexOf</span>(<span class="string">&#x27;AB&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      s = s.<span class="title function_">replace</span>(<span class="string">&#x27;AB&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="title function_">indexOf</span>(<span class="string">&#x27;CD&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      s = s.<span class="title function_">replace</span>(<span class="string">&#x27;CD&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2023&#x2F;01&#x2F;11<br><a href="https://leetcode.cn/problems/minimum-additions-to-make-valid-string/description/">leetcode 2654 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addMinimum = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; word.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    ans += word[i - <span class="number">1</span>] &gt;= word[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans * <span class="number">3</span> - word.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2024&#x2F;01&#x2F;12<br><a href="https://leetcode.cn/problems/count-common-words-with-one-occurrence/description/">leetcode 2085 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countWords = <span class="keyword">function</span> (<span class="params">words1, words2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hashTable = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; words1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashTable[words1[i]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      hashTable[words1[i]] += <span class="number">10</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hashTable[words1[i]] = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; words2.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashTable[words2[j]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      hashTable[words2[j]] += <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hashTable[words2[j]] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">values</span>(hashTable).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="number">11</span>) &#123;</span><br><span class="line">      ans++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2024&#x2F;01&#x2F;13<br><a href="https://leetcode.cn/problems/construct-string-with-repeat-limit/description/">leetcode mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> repeatLimitedString = <span class="keyword">function</span> (<span class="params">str, repeatLimit</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> strArr = <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> str) &#123;</span><br><span class="line">    strArr[s.<span class="title function_">charCodeAt</span>() - <span class="number">97</span>]++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> m = <span class="number">0</span> <span class="comment">// 记录在一个repeatLimit中的次数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = strArr.<span class="property">length</span> - <span class="number">1</span>, j = strArr.<span class="property">length</span> - <span class="number">2</span>; j &gt;= <span class="number">0</span> &amp;&amp; i &gt;= <span class="number">0</span>; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strArr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      i--</span><br><span class="line">      m = <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &lt; repeatLimit) &#123;</span><br><span class="line">      strArr[i]--</span><br><span class="line">      ans += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span> + i)</span><br><span class="line">      m++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= i || strArr[j] === <span class="number">0</span>) &#123;</span><br><span class="line">      j--</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      strArr[j]--</span><br><span class="line">      ans += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(j + <span class="number">97</span>)</span><br><span class="line">      m = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2024&#x2F;01&#x2F;14<br><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/description/">leetcode 83 easy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cur = head</span><br><span class="line">  <span class="keyword">while</span> (cur.<span class="property">next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur.<span class="property">val</span> === cur.<span class="property">next</span>.<span class="property">val</span>) &#123;</span><br><span class="line">      cur.<span class="property">next</span> = cur.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cur = cur.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2024&#x2F;01&#x2F;15<br><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/description/">leetcode 82 mid</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val, next</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = val || <span class="number">0</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = next || <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deleteDuplicates = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">WRAPPER</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="literal">null</span>,head)</span><br><span class="line">    <span class="keyword">let</span> lastNode = <span class="variable constant_">WRAPPER</span></span><br><span class="line">    <span class="keyword">while</span>( head &amp;&amp; head.<span class="property">next</span> ) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head.<span class="property">val</span> !== head.<span class="property">next</span>.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="comment">// 移动指针</span></span><br><span class="line">            lastNode = lastNode.<span class="property">next</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(head.<span class="property">next</span> &amp;&amp; head.<span class="property">val</span> === head.<span class="property">next</span>.<span class="property">val</span>) &#123;</span><br><span class="line">                <span class="comment">// 移动指针</span></span><br><span class="line">                head = head.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 修改lastNode指针所指向的对象的内容 指向移动后的head.next(重复的已经删除)</span></span><br><span class="line">            lastNode.<span class="property">next</span> = head.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        head = lastNode.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">WRAPPER</span>.<span class="property">next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript语言学习</title>
      <link href="/posts/d681bdaf.html"/>
      <url>/posts/d681bdaf.html</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-简介"><a href="#TypeScript-简介" class="headerlink" title="TypeScript 简介"></a>TypeScript 简介</h1><p>TypeScript 作为 Javascript 语言的超集、为 JavaScript 添加可选择的类型标注，大大的增加了代码的可维护性和迭代性。同时会不断的发展 javascript 的新特性，是现在流行的前端技术</p><h1 id="TypeScript-的特点"><a href="#TypeScript-的特点" class="headerlink" title="TypeScript 的特点"></a>TypeScript 的特点</h1><ul><li>始于 JavaScript，归于 JavaScript<br>TypeScript 终归是通过编译形成 Javascript 可以运行在任何浏览器上和 nodejs 等运行时环境中</li><li><strong>强大的工具构建大型应用程序</strong></li></ul><p>类型允许 JavaScript 开发者在开发 JavaScript 应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。</p><p>类型是可选的，类型推断让一些类型的注释使你的代码的静态验证有很大的不同。类型让你定义软件组件之间的接口和洞察现有 JavaScript 库的行为。</p><ul><li><strong>先进的 JavaScript</strong></li></ul><p>TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。</p><p>这些特性为高可信应用程序开发时是可用的，但是会被编译成简洁的 ECMAScript3（或更新版本）的 JavaScript。</p><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>最基本的数据类型就是简单的 true&#x2F;false 值，在 JavaScript 和 TypeScript 里叫做 <code>boolean</code>（其它语言中也一样）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015 中引入的二进制和八进制字面量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decLiteral</span>: <span class="built_in">number</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hexLiteral</span>: <span class="built_in">number</span> = <span class="number">0x14</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binaryLiteral</span>: <span class="built_in">number</span> = <span class="number">0b10100</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octalLiteral</span>: <span class="built_in">number</span> = <span class="number">0o24</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>JavaScript 程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code> 表示文本数据类型。 和 JavaScript 一样，可以使用双引号（<code>&quot;</code>）或单引号（<code>&#39;</code>）表示字符串。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;smith&#x27;</span></span><br></pre></td></tr></table></figure><p>你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ <code>`</code>），并且以 <code>$&#123; expr &#125;</code> 这种形式嵌入表达式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">`Yee`</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">37</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;name&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span></span><br></pre></td></tr></table></figure><p>这与下面定义 <code>sentence</code> 的方式效果相同：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> =</span><br><span class="line">  <span class="string">&#x27;Hello, my name is &#x27;</span> +</span><br><span class="line">  name +</span><br><span class="line">  <span class="string">&#x27;.\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&quot;I&#x27;ll be &quot;</span> +</span><br><span class="line">  (age + <span class="number">1</span>) +</span><br><span class="line">  <span class="string">&#x27; years old next month.&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>TypeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>第二种方式是使用数组泛型，<code>Array&lt;元素类型&gt;</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="元祖-Tuple"><a href="#元祖-Tuple" class="headerlink" title="元祖 Tuple"></a>元祖 Tuple</h2><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code> 和 <code>number</code> 类型的元组。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>] <span class="comment">// OK</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>] <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>当访问一个已知索引的元素，会得到正确的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">1</span>)) <span class="comment">// OK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">1</span>)) <span class="comment">// Error, &#x27;number&#x27; 不存在 &#x27;substr&#x27; 方法</span></span><br></pre></td></tr></table></figure><p>当访问一个越界的元素，会使用联合类型替代：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span> <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">5</span>].<span class="title function_">toString</span>()) <span class="comment">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span> <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure><p>联合类型是高级主题，我们会在以后的章节里讨论它。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><code>enum</code> 类型是对 JavaScript 标准数据类型的一个补充。 像 C# 等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span></span><br></pre></td></tr></table></figure><p>默认情况下，从 <code>0</code> 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <code>1</code> 开始编号：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span></span><br></pre></td></tr></table></figure><p>或者，全部都采用手动赋值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span></span><br></pre></td></tr></table></figure><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">colorName</span>: <span class="built_in">string</span> = <span class="title class_">Color</span>[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colorName) <span class="comment">// 显示&#x27;Green&#x27;因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code> 类型来标记这些变量：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">&#x27;maybe a string instead&#x27;</span></span><br><span class="line">notSure = <span class="literal">false</span> <span class="comment">// 也可以是个 boolean</span></span><br></pre></td></tr></table></figure><p>在对现有代码进行改写的时候，<code>any</code> 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。并且当你只知道一部分数据的类型时，<code>any</code> 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">list[<span class="number">1</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>某种程度上来说，<code>void</code> 类型像是与 <code>any</code> 类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">warnUser</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is my warning message&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个 <code>void</code> 类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code> 和 <code>null</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h2 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h2><p>TypeScript 里，<code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code>。 和 <code>void</code> 相似，它们的本身的类型用处不是很大：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p><p>然而，当你指定了 <code>--strictNullChecks</code> 标记，<code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们各自，这能避免 很多常见的问题。 也许在某处你想传入一个 <code>string</code> 或 <code>null</code> 或 <code>undefined</code>，你可以使用联合类型 <code>string | null | undefined</code>。 再次说明，稍后我们会介绍联合类型。</p><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p><code>never</code> 类型表示的是那些永不存在的值的类型。 例如， <code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 <code>never</code> 类型，当它们被永不为真的类型保护所约束时。</p><p><code>never</code> 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型或可以赋值给<code>never</code> 类型（除了 <code>never</code> 本身之外）。 即使 <code>any</code> 也不可以赋值给 <code>never</code>。</p><p>下面是一些返回 <code>never</code> 类型的函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">error</span>(<span class="string">&#x27;Something failed&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infiniteLoop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p><code>object</code> 表示非原始类型，也就是除 <code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code> 之外的类型。</p><p>使用 <code>object</code> 类型，就可以更好的表示像 <code>Object.create</code> 这样的 <code>API</code>。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">o: <span class="built_in">object</span> | <span class="literal">null</span></span>): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">create</span>(&#123; <span class="attr">prop</span>: <span class="number">0</span> &#125;) <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">null</span>) <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">create</span>(<span class="number">42</span>) <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">create</span>(<span class="string">&#x27;string&#x27;</span>) <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">false</span>) <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">undefined</span>) <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是“尖括号”语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&#x27;this is a string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span></span><br></pre></td></tr></table></figure><p>另一个为 <code>as</code> 语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&#x27;this is a string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br></pre></td></tr></table></figure><p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有 <code>as</code> 语法断言是被允许的。</p><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><p><code>let</code> 和 <code>const</code> 是 JavaScript 里相对较新的变量声明方式。<code>let</code> 在很多方面与 <code>var</code> 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。<code>const</code> 是对 <code>let</code> 的一个增强，它能阻止对一个变量再次赋值。</p><p>因为 TypeScript 是 JavaScript 的超集，所以它本身就支持 <code>let</code> 和 <code>const</code>。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 <code>var</code>。</p><p>如果你已经对 <code>var</code> 声明的怪异之处了如指掌，那么你可以轻松地略过这节。</p><h2 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明"></a>var 声明</h2><p>在 ES5 的时代，我们都是通过 <code>var</code> 关键字定义 JavaScript 变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>大家都能理解，这里定义了一个名为 <code>a</code> 值为 <code>10</code> 的变量。</p><p>我们也可以在函数内部定义变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且我们也可以在其它函数内部访问相同的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = a + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">f</span>()</span><br><span class="line"><span class="title function_">g</span>() <span class="comment">// returns 11</span></span><br></pre></td></tr></table></figure><p>上面的例子是一个典型的闭包场景，<code>g</code> 可以获取到 <code>f</code> 函数里定义的 <code>a</code> 变量。 每当 <code>g</code> 被调用时，它都可以访问到 <code>f</code> 里的 <code>a</code> 变量。 即使当 <code>g</code> 在 <code>f</code> 已经执行完后才被调用，它仍然可以访问 <code>a</code>。</p><h3 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h3><p><code>var</code> 声明有些奇怪的作用域规则。 看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">shouldInitialize</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldInitialize) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="literal">true</span>) <span class="comment">// returns &#x27;10&#x27;</span></span><br><span class="line"><span class="title function_">f</span>(<span class="literal">false</span>) <span class="comment">// returns &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure><p>有些同学可能要多看几遍这个例子。 变量 <code>x</code> 是定义在 <code>if</code> 语句里面，但是我们却可以在语句的外面访问它。 这是因为 <code>var</code> 声明的作用域是函数作用域，函数参数也使用函数作用域。</p><p>这些作用域规则可能会引发一些错误。 其中之一就是，多次声明同一个变量并不会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMatrix</span>(<span class="params">matrix</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentRow = matrix[i]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; currentRow.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      sum += currentRow[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很容易看出一些问题，里层的 <code>for</code> 循环会覆盖变量 <code>i</code>，因为所有 <code>i</code> 都引用相同的函数作用域内的变量。 有经验的开发者们很清楚，这些问题可能在代码审查时漏掉，引发无穷的麻烦。</p><h3 id="捕获变量怪异之处"><a href="#捕获变量怪异之处" class="headerlink" title="捕获变量怪异之处"></a>捕获变量怪异之处</h3><p>猜一下下面的代码会返回什么：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, <span class="number">100</span> * i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是，<code>setTimeout</code> 会在若干毫秒的延时后执行一个函数（等待其它代码执行完毕）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>很多 JavaScript 程序员对这种行为已经很熟悉了，但如果你很不解也没有关系，因为你并不是一个人。 大多数人期望输出结果是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><p>我们传给 <code>setTimeout</code> 的每一个函数表达式实际上都引用了相同作用域里的同一个 <code>i</code>。</p></blockquote><p>让我们花点时间思考一下这是为什么。 <code>setTimeout</code> 在若干毫秒后执行一个函数，并且是在 <code>for</code> 循环结束后。<code>for</code> 循环结束后，<code>i</code> 的值为 <code>10</code>。 所以当函数被调用的时候，它会打印出 <code>10</code>。</p><p>一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时 <code>i</code> 的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  ;(<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;, <span class="number">100</span> * i)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种奇怪的形式我们已经司空见惯了。 参数 <code>i</code> 会覆盖 <code>for</code> 循环里的 <code>i</code>，但是因为我们起了同样的名字，所以我们不用怎么改 <code>for</code> 循环体里的代码。</p><h2 id="let-声明"><a href="#let-声明" class="headerlink" title="let 声明"></a>let 声明</h2><p>现在你已经知道了 <code>var</code> 存在一些问题，这恰好说明了为什么用 <code>let</code> 语句来声明变量。 除了名字不同外， <code>let</code> 与 <code>var</code> 的写法一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&#x27;Hello!&#x27;</span></span><br></pre></td></tr></table></figure><p>主要的区别不在语法上，而是语义，我们接下来会深入研究。</p><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><p>当用 <code>let</code> 声明一个变量，它使用的是块作用域。 不同于使用 <code>var</code> 声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 <code>for</code> 循环之外是不能访问的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">input: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input) &#123;</span><br><span class="line">    <span class="comment">// OK: 仍然能访问到 a</span></span><br><span class="line">    <span class="keyword">let</span> b = a + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Error: &#x27;b&#x27; 在这里不存在</span></span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们定义了 2 个变量 <code>a</code> 和 <code>b</code>。 <code>a</code> 的作用域是 <code>f</code> 函数体内，而 <code>b</code> 的作用域是 <code>if</code> 语句块里。</p><p>在 <code>catch</code> 语句里声明的变量也具有同样的作用域规则。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;Oh no!&#x27;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Catch it.&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: &#x27;e&#x27; 在这里不存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br></pre></td></tr></table></figure><p>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于<em>暂时性死区</em>。 它只是用来说明我们不能在 <code>let</code> 语句之前访问它们，幸运的是 <code>TypeScript</code> 可以告诉我们这些信息。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a++ <span class="comment">// TS2448: Block-scoped variable &#x27;a&#x27; used before its declaration.</span></span><br><span class="line"><span class="keyword">let</span> a</span><br></pre></td></tr></table></figure><p>注意一点，我们仍然可以在一个拥有块作用域变量被声明前获取它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为 ES2015，现代的运行时会抛出一个错误；然而，现今 TypeScript 是不会报错的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// okay to capture &#x27;a&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能在&#x27;a&#x27;被声明前调用&#x27;foo&#x27;</span></span><br><span class="line"><span class="comment">// 运行时应该抛出错误</span></span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a</span><br></pre></td></tr></table></figure><p>关于<em>暂时性死区</em>的更多信息，查看这里 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let">Mozilla Developer Network</a>。</p><h3 id="重定义及屏蔽"><a href="#重定义及屏蔽" class="headerlink" title="重定义及屏蔽"></a>重定义及屏蔽</h3><p>我们提过使用 <code>var</code> 声明时，它不在乎你声明多少次；你只会得到 1 个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x</span><br><span class="line">  <span class="keyword">var</span> x</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子里，所有 <code>x</code> 的声明实际上都引用一个相同的<code>x</code>，并且这是完全有效的代码，但这经常会成为 <code>bug</code> 的来源。幸运的是 <code>let</code> 的声明就不会这么宽松了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span> <span class="comment">// 错误，不能在 1 个作用域里多次声明 x</span></span><br></pre></td></tr></table></figure><p>并不是要求两个均是块级作用域的声明 TypeScript 才会给出一个错误的警告。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">100</span> <span class="comment">// Error: 干扰参数声明</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">100</span></span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">100</span> <span class="comment">// Error: 不能同时具有 x 的两个声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">condition, x</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="literal">false</span>, <span class="number">0</span>) <span class="comment">// returns 0</span></span><br><span class="line"><span class="title function_">f</span>(<span class="literal">true</span>, <span class="number">0</span>) <span class="comment">// returns 100</span></span><br></pre></td></tr></table></figure><p>在一个嵌套作用域里引入一个新名字的行为称做屏蔽。 它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误。 例如，假设我们现在用 <code>let</code> 重写之前的 <code>sumMatrix</code> 函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentRow = matrix[i]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; currentRow.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      sum += currentRow[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个版本的循环能得到正确的结果，因为内层循环的 <code>i</code> 可以屏蔽掉外层循环的 <code>i</code>。</p><p>通常来讲应该避免使用屏蔽，因为我们需要写出清晰的代码。 同时也有些场景适合利用它，你需要好好权衡一下。</p><h3 id="块级作用域变量的获取"><a href="#块级作用域变量的获取" class="headerlink" title="块级作用域变量的获取"></a>块级作用域变量的获取</h3><p>每次进入一个作用域时，<code>let</code> 会创建一个变量的环境。就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。</p><p>回想一下前面 <code>setTimeout</code> 的例子，我们最后需要使用立即执行的函数表达式来获取每次 <code>for</code> 循环迭代里的状态。 实际上，我们做的是为获取到的变量创建了一个新的变量环境。 这样做挺痛苦的，但是幸运的是，你不必在 <code>TypeScript</code> 里这样做了。</p><p>当 <code>let</code> 声明出现在循环体里时拥有完全不同的行为。不仅是在循环里引入了一个新的变量环境，而且针对每次迭代都会创建这样一个新作用域，这就相当于我们在使用立即执行的函数表达式时做的事。所以在 <code>setTimeout</code> 例子里我们仅使用 <code>let</code> 声明就可以了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, <span class="number">100</span> * i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会输出与预料一致的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h2><p><code>const</code> 声明是声明变量的另一种方式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span></span><br></pre></td></tr></table></figure><p>它们与 <code>let</code> 声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 <code>let</code> 相同的作用域规则，但是不能对它们重新赋值。</p><p>这很好理解，它们引用的值是不可变的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span></span><br><span class="line"><span class="keyword">const</span> kitty = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Kitty&#x27;</span>,</span><br><span class="line">  <span class="attr">numLives</span>: numLivesForCat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">kitty = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tommy&#x27;</span>,</span><br><span class="line">  <span class="attr">numLives</span>: numLivesForCat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line">kitty.<span class="property">name</span> = <span class="string">&#x27;Jerry&#x27;</span></span><br><span class="line">kitty.<span class="property">numLives</span>--</span><br></pre></td></tr></table></figure><p>除非你使用特殊的方法去避免，实际上 <code>const</code> 变量的内部状态是可修改的。 幸运的是，<code>TypeScript</code> 允许你将对象的成员设置成只读的。接口一章有详细说明。</p><h2 id="let-vs-const"><a href="#let-vs-const" class="headerlink" title="let vs. const"></a>let vs. const</h2><p>现在我们有两种作用域相似的声明方式，我们自然会问到底应该使用哪个。与大多数泛泛的问题一样，答案是：依情况而定。</p><p>使用最小特权原则，所有变量除了你计划去修改的都应该使用 <code>const</code>。 基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。使用 <code>const</code> 也可以让我们更容易的推测数据的流动。</p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h3><p>最简单的解构莫过于数组的解构赋值了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> [first, second] = input</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first) <span class="comment">// outputs 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second) <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure><p>这创建了 2 个命名变量 <code>first</code> 和 <code>second</code>。 相当于使用了索引，但更为方便：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = input[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> second = input[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>作用于函数参数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">input</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(first)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(input)</span><br></pre></td></tr></table></figure><p>你可以在数组里使用 <code>...</code> 语法创建剩余变量：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first) <span class="comment">// outputs 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest) <span class="comment">// outputs [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><p>你也可以忽略你不关心的尾随元素：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first) <span class="comment">// outputs 1</span></span><br></pre></td></tr></table></figure><p>或其它元素：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>你也可以解构对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o</span><br></pre></td></tr></table></figure><p>这通过 <code>o.a</code> 和 <code>o.b</code> 创建了 <code>a</code> 和 <code>b</code> 。 注意，如果你不需要 <code>c</code> 你可以忽略它。</p><p>你可以在对象里使用 <code>...</code> 语法创建剩余变量：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o</span><br><span class="line"><span class="keyword">let</span> total = passthrough.<span class="property">b</span> + passthrough.<span class="property">c</span>.<span class="property">length</span></span><br></pre></td></tr></table></figure><h3 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h3><p>你也可以给属性以不同的名字：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a</span>: newName1, <span class="attr">b</span>: newName2 &#125; = o</span><br></pre></td></tr></table></figure><p>这里的语法开始变得混乱。 你可以将 <code>a: newName1</code> 读做 <code>&quot;a 作为 newName1&quot;</code>。 方向是从左到右，好像你写成了以下样子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newName1 = o.<span class="property">a</span></span><br><span class="line"><span class="keyword">let</span> newName2 = o.<span class="property">b</span></span><br></pre></td></tr></table></figure><p>令人困惑的是，这里的冒号不是指示类型的。 如果你想指定它的类型，仍然需要在其后写上完整的模式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b &#125;: &#123; <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>: <span class="built_in">number</span> &#125; = o</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>默认值可以让你在属性为 <code>undefined</code> 时使用缺省值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">keepWholeObject</span>(<span class="params">wholeObject: &#123; a: <span class="built_in">string</span>; b?: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; a, b = <span class="number">1001</span> &#125; = wholeObject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，即使 <code>b</code> 为 <code>undefined</code> ， <code>keepWholeObject</code> 函数的变量 <code>wholeObject</code> 的属性 <code>a</code> 和 <code>b</code> 都会有值。</p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>解构也能用于函数声明。 看以下简单的情况：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; <span class="attr">a</span>: <span class="built_in">string</span>; b?: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b &#125;: C</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a = <span class="string">&#x27;&#x27;</span>, b = <span class="number">0</span> &#125; = &#123;&#125;</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码是一个类型推断的例子，将在后续章节介绍。</p></blockquote><p>其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道 C 的定义有一个 b 可选属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b = <span class="number">0</span> &#125; = &#123; a: <span class="string">&#x27;&#x27;</span> &#125;</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;yes&#x27;</span> &#125;) <span class="comment">// OK, 默认 b = 0</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// OK, 默认 a: &#x27;&#x27;, b = 0</span></span><br><span class="line"><span class="title function_">f</span>(&#123;&#125;) <span class="comment">// Error, 一旦传入参数则 a 是必须的</span></span><br></pre></td></tr></table></figure><p>要小心使用解构。 从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。 尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。 解构表达式要尽量保持小而简单。</p><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>这会令 <code>bothPlus</code> 的值为 <code>[0, 1, 2, 3, 4, 5]</code>。 展开操作创建了 <code>first</code> 和 <code>second的</code> 一份浅拷贝。 它们不会被展开操作所改变。</p><p>你还可以展开对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123; <span class="attr">food</span>: <span class="string">&#x27;spicy&#x27;</span>, <span class="attr">price</span>: <span class="string">&#x27;$10&#x27;</span>, <span class="attr">ambiance</span>: <span class="string">&#x27;noisy&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, <span class="attr">food</span>: <span class="string">&#x27;rich&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p>search 的值为 <code>&#123; food: &#39;rich&#39;, price: &#39;$10&#39;, ambiance: &#39;noisy&#39; &#125;</code>。 对象的展开比数组的展开要复杂的多。像数组展开一样，它是从左至右进行处理，但结果仍为对象。这就意味着出现在展开对象后面的属性会覆盖前面的属性。因此，如果我们修改上面的例子，在结尾处进行展开的话：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123; <span class="attr">food</span>: <span class="string">&#x27;spicy&#x27;</span>, <span class="attr">price</span>: <span class="string">&#x27;$10&#x27;</span>, <span class="attr">ambiance</span>: <span class="string">&#x27;noisy&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> search = &#123; <span class="attr">food</span>: <span class="string">&#x27;rich&#x27;</span>, ...defaults &#125;</span><br></pre></td></tr></table></figure><p>那么，<code>defaults</code> 里的 <code>food</code> 属性会重写 <code>food: &#39;rich&#39;</code>，在这里这并不是我们想要的结果。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><h2 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h2><p>下面通过一个简单示例来观察接口是如何工作的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(labelledObj.<span class="property">label</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;Size 10 Object&#x27;</span> &#125;</span><br><span class="line"><span class="title function_">printLabel</span>(myObj)</span><br></pre></td></tr></table></figure><p>类型检查器会查看 <code>printLabel</code> 的调用。<code>printLabel</code> 有一个参数，并要求这个对象参数有一个名为 <code>label</code> 类型为 <code>string</code> 的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，以及其类型是否匹配。 然而，有些时候 TypeScript 却并不会这么宽松，我们下面会稍做讲解。</p><p>下面我们重写上面的例子，这次使用接口来描述：必须包含一个<code>label</code> 属性且类型为 <code>string</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LabelledValue</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(labelledObj.<span class="property">label</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;Size 10 Object&#x27;</span> &#125;</span><br><span class="line"><span class="title function_">printLabel</span>(myObj)</span><br></pre></td></tr></table></figure><p><code>LabelledValue</code> 接口就好比一个名字，用来描述上面例子里的结构。 它代表了有一个 <code>label</code> 属性且类型为<code>string</code> 的对象。 需要注意的是，我们在这里并不能像在其它语言里一样，说传给 <code>printLabel</code> 的对象实现了这个接口。我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的。</p><p>还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</p><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。例如给函数传入的参数对象中只有部分属性赋值了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">area</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSquare</span>(<span class="params">config: SquareConfig</span>): <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">area</span>: <span class="number">100</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">color</span>) &#123;</span><br><span class="line">    newSquare.<span class="property">color</span> = config.<span class="property">color</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">width</span>) &#123;</span><br><span class="line">    newSquare.<span class="property">area</span> = config.<span class="property">width</span> * config.<span class="property">width</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p><p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 <code>createSquare</code> 里的 <code>color</code> 属性名拼错，就会得到一个错误提示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">area</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSquare</span>(<span class="params">config: SquareConfig</span>): <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">area</span>: <span class="number">100</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">clor</span>) &#123;</span><br><span class="line">    <span class="comment">// Error: 属性 &#x27;clor&#x27; 不存在于类型 &#x27;SquareConfig&#x27; 中</span></span><br><span class="line">    newSquare.<span class="property">color</span> = config.<span class="property">clor</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">width</span>) &#123;</span><br><span class="line">    newSquare.<span class="property">area</span> = config.<span class="property">width</span> * config.<span class="property">width</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code> 来指定只读属性:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过赋值一个对象字面量来构造一个 <code>Point</code>。 赋值后，<code>x</code> 和 <code>y</code> 再也不能被改变了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;</span><br><span class="line">p1.<span class="property">x</span> = <span class="number">5</span> <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>TypeScript 具有 <code>ReadonlyArray&lt;T&gt;</code> 类型，它与 <code>Array&lt;T&gt;</code> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ro</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = a</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span> <span class="comment">// error!</span></span><br><span class="line">ro.<span class="title function_">push</span>(<span class="number">5</span>) <span class="comment">// error!</span></span><br><span class="line">ro.<span class="property">length</span> = <span class="number">100</span> <span class="comment">// error!</span></span><br><span class="line">a = ro <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>上面代码的最后一行，可以看到就算把整个 <code>ReadonlyArray</code> 赋值到一个普通数组也是不可以的。 但是你可以用类型断言重写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[]</span><br></pre></td></tr></table></figure><h3 id="readonly-vs-const"><a href="#readonly-vs-const" class="headerlink" title="readonly vs const"></a>readonly vs const</h3><p>最简单判断该用 <code>readonly</code> 还是 <code>const</code> 的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code>，若做为属性则使用 <code>readonly</code>。</p><h2 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h2><p>我们在第一个例子里使用了接口，TypeScript 让我们传入 <code>&#123; size: number; label: string; &#125;</code> 到仅期望得到 <code>&#123; label: string; &#125;</code> 的函数里, 并且我们已经学过了可选属性。</p><p>然而，天真地将这两者结合的话就会像在 JavaScript 里那样搬起石头砸自己的脚。 比如，拿 <code>createSquare</code> 例子来说：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSquare</span>(<span class="params">config: SquareConfig</span>): &#123; <span class="attr">color</span>: <span class="built_in">string</span>; <span class="attr">area</span>: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">area</span>: <span class="number">100</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">color</span>) &#123;</span><br><span class="line">    newSquare.<span class="property">color</span> = config.<span class="property">color</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">width</span>) &#123;</span><br><span class="line">    newSquare.<span class="property">area</span> = config.<span class="property">width</span> * config.<span class="property">width</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">colour</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;)</span><br></pre></td></tr></table></figure><p>注意传入 <code>createSquare</code> 的参数拼写为 <code>colour</code> 而不是 <code>color</code>。 在 JavaScript 里，这会默默地失败。</p><p>你可能会争辩这个程序已经正确地类型化了，因为 <code>width</code> 属性是兼容的，不存在 <code>color</code> 属性，而且额外的 <code>colour</code> 属性是无意义的。</p><p>然而，TypeScript 会认为这段代码可能存在 bug。 对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error: &#x27;colour&#x27; 不存在于类型 &#x27;SquareConfig&#x27; 中</span></span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">colour</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;)</span><br></pre></td></tr></table></figure><p>绕开这些检查非常简单。 最简便的方法是使用类型断言：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">opacity</span>: <span class="number">0.5</span> &#125; <span class="keyword">as</span> <span class="title class_">SquareConfig</span>)</span><br></pre></td></tr></table></figure><p>然而，最佳的方式是能够添加一个字符串索引签名，前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性。 如果 <code>SquareConfig</code> 带有上面定义的类型的 <code>color</code> 和 <code>width</code> 属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们稍后会讲到索引签名，但在这我们要表示的是<code>SquareConfig</code> 可以有任意数量的属性，并且只要它们不是 <code>color</code> 和 <code>width</code>，那么就无所谓它们的类型是什么。</p><p>还有最后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给一个另一个变量： 因为 <code>squareOptions</code> 不会经过额外属性检查，所以编译器不会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareOptions = &#123; <span class="attr">colour</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(squareOptions)</span><br></pre></td></tr></table></figure><p>要留意，在像上面一样的简单代码里，你可能不应该去绕开这些检查。 对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大多数额外属性检查错误是真正的 bug。也就是说你遇到了额外类型检查出的错误，你应该去审查一下你的类型声明。 在这里，如果支持传入 <code>color</code> 或 <code>colour</code> 属性到 <code>createSquare</code>，你应该修改 <code>SquareConfig</code> 定义来体现出这一点。</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>接口能够描述 JavaScript 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span></span><br><span class="line">mySearch = <span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.<span class="title function_">search</span>(subString)</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。 比如，我们使用下面的代码重写上面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span></span><br><span class="line">mySearch = <span class="keyword">function</span> (<span class="params">src: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.<span class="title function_">search</span>(sub)</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。 如果你不想指定类型，TypeScript 的类型系统会推断出参数类型，因为函数直接赋值给了 <code>SearchFunc</code> 类型变量。 函数的返回值类型是通过其返回值推断出来的（此例是 <code>false</code> 和 <code>true</code>）。 如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 <code>SearchFunc</code> 接口中的定义不匹配。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span></span><br><span class="line">mySearch = <span class="keyword">function</span> (<span class="params">src, sub</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.<span class="title function_">search</span>(sub)</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h2><p>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如 <code>a[10]</code> 或 <code>ageMap[&#39;daniel&#39;]</code>。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span></span><br><span class="line">myArray = [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Fred&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStr</span>: <span class="built_in">string</span> = myArray[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>上面例子里，我们定义了 <code>StringArray</code> 接口，它具有索引签名。 这个索引签名表示了当用 <code>number</code> 去索引 <code>StringArray</code> 时会得到 <code>string</code> 类型的返回值。</p><p>TypeScript 支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 <code>number</code> 来索引时，JavaScript 会将它转换成<code>string</code> 然后再去索引对象。 也就是说用 <code>100</code>（一个 <code>number</code>）去索引等同于使用<code>&#39;100&#39;</code>（一个 <code>string</code> ）去索引，因此两者需要保持一致。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NotOkay</span> &#123;</span><br><span class="line">  [<span class="attr">x</span>: <span class="built_in">number</span>]: <span class="title class_">Animal</span></span><br><span class="line">  [<span class="attr">x</span>: <span class="built_in">string</span>]: <span class="title class_">Dog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串索引签名能够很好的描述 <code>dictionary</code> 模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 <code>obj.property</code> 和 <code>obj[&#39;property&#39;]</code> 两种形式都可以。 下面的例子里， <code>name</code> 的类型与字符串索引类型不匹配，所以类型检查器给出一个错误提示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span> <span class="comment">// 可以，length是number类型</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyStringArray</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">ReadonlyStringArray</span> = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>]</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">&#x27;Mallory&#x27;</span> <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以在接口中描述一个方法，在类里实现它，如同下面的 <code>setTime</code> 方法一样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line">  <span class="title function_">setTime</span>(<span class="attr">d</span>: <span class="title class_">Date</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line">  <span class="title function_">setTime</span>(<span class="params">d: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentTime</span> = d</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</p><h3 id="类静态部分与实例部分的区别"><a href="#类静态部分与实例部分的区别" class="headerlink" title="类静态部分与实例部分的区别"></a>类静态部分与实例部分的区别</h3><p>当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">hour</span>: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里因为当一个类实现了一个接口时，只对其实例部分进行类型检查。<code>constructor</code> 存在于类的静态部分，所以不在检查的范围内。</p><p>看下面的例子，我们定义了两个接口， <code>ClockConstructor</code> 为构造函数所用和 <code>ClockInterface</code> 为实例方法所用。 为了方便我们定义一个构造函数 <code>createClock</code>，它用传入的类型创建实例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">hour</span>: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>): <span class="title class_">ClockInterface</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">tick</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createClock</span>(<span class="params"></span></span><br><span class="line"><span class="params">  ctor: ClockConstructor,</span></span><br><span class="line"><span class="params">  hour: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  minute: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">ctor</span>(hour, minute)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beep beep&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnalogClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tick tock&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = <span class="title function_">createClock</span>(<span class="title class_">DigitalClock</span>, <span class="number">12</span>, <span class="number">17</span>)</span><br><span class="line"><span class="keyword">let</span> analog = <span class="title function_">createClock</span>(<span class="title class_">AnalogClock</span>, <span class="number">7</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>因为 <code>createClock</code> 的第一个参数是 <code>ClockConstructor</code> 类型，在 <code>createClock(AnalogClock, 7, 32)</code> 里，会检查 <code>AnalogClock</code> 是否符合构造函数签名。</p><h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Square</span></span><br><span class="line">square.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">square.<span class="property">sideLength</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>一个接口可以继承多个接口，创建出多个接口的合成接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PenStroke</span> &#123;</span><br><span class="line">  <span class="attr">penWidth</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>, <span class="title class_">PenStroke</span> &#123;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Square</span></span><br><span class="line">square.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">square.<span class="property">sideLength</span> = <span class="number">10</span></span><br><span class="line">square.<span class="property">penWidth</span> = <span class="number">5.0</span></span><br></pre></td></tr></table></figure><h2 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h2><p>先前我们提过，接口能够描述 JavaScript 里丰富的类型。 因为 JavaScript 其动态灵活的特点，有时你会希望一个对象可以同时具有上面提到的多种类型。</p><p>一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="built_in">string</span></span><br><span class="line">  <span class="attr">interval</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">reset</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) &#123;&#125; <span class="keyword">as</span> <span class="title class_">Counter</span></span><br><span class="line">  counter.<span class="property">interval</span> = <span class="number">123</span></span><br><span class="line">  counter.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">getCounter</span>()</span><br><span class="line"><span class="title function_">c</span>(<span class="number">10</span>)</span><br><span class="line">c.<span class="title function_">reset</span>()</span><br><span class="line">c.<span class="property">interval</span> = <span class="number">5.0</span></span><br></pre></td></tr></table></figure><p>在使用 JavaScript 第三方库的时候，你可能需要像上面那样去完整地定义类型。这门课要重构的 <code>axios</code> 库就是一个很好的例子。</p><h2 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h2><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的 <code>private</code> 和 <code>protected</code> 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p><p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系。例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error：“ImageC”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageC</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子里，<code>SelectableControl</code> 包含了 <code>Control</code> 的所有成员，包括私有成员 <code>state</code>。 因为 <code>state</code> 是私有成员，所以只能够是 <code>Control</code> 的子类们才能实现 <code>SelectableControl</code> 接口。 因为只有 <code>Control</code> 的子类才能够拥有一个声明于<code>Control</code> 的私有成员 <code>state</code>，这对私有成员的兼容性是必需的。</p><p>在 <code>Control</code> 类内部，是允许通过 <code>SelectableControl</code> 的实例来访问私有成员 <code>state</code> 的。 实际上，<code>SelectableControl</code> 接口和拥有 <code>select</code> 方法的 <code>Control</code> 类是一样的。<code>Button</code>和 <code>TextBox</code> 类是 <code>SelectableControl</code> 的子类（因为它们都继承自<code>Control</code> 并有 <code>select</code> 方法），但 <code>ImageC</code> 类并不是这样的。</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>对于传统的 JavaScript 程序我们会使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员使用这些语法就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从 ECMAScript 2015，也就是 ES6 开始， JavaScript 程序员将能够使用基于类的面向对象的方式。 使用 TypeScript，我们允许开发者现在就使用这些特性，并且编译后的 JavaScript 可以在所有主流浏览器和平台上运行，而不需要等到下个 JavaScript 版本。</p><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><p>下面看一个使用类的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> <span class="title class_">Greeter</span>(<span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果你使用过 C# 或 Java，你会对这种语法非常熟悉。 我们声明一个 <code>Greeter</code> 类。这个类有 3 个成员：一个叫做 <code>greeting</code> 的属性，一个构造函数和一个 <code>greet</code> 方法。</p><p>你会注意到，我们在引用任何一个类成员的时候都用了 <code>this</code>。 它表示我们访问的是类的成员。</p><p>最后一行，我们使用 <code>new</code> 构造了 <code>Greeter</code> 类的一个实例。它会调用之前定义的构造函数，创建一个 <code>Greeter</code> 类型的新对象，并执行构造函数初始化它。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>在 TypeScript 里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</p><p>看下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Animal moved <span class="subst">$&#123;distance&#125;</span>m.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof! Woof!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line">dog.<span class="title function_">bark</span>()</span><br><span class="line">dog.<span class="title function_">move</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里，<code>Dog</code> 是一个 派生类，它派生自 <code>Animal</code> 基类，通过 <code>extends</code> 关键字。 派生类通常被称作<em>子类</em>，基类通常被称作<em>超类</em>。</p><p>因为 <code>Dog</code> 继承了 <code>Animal</code> 的功能，因此我们可以创建一个 <code>Dog</code> 的实例，它能够 <code>bark()</code> 和 <code>move()</code>。</p><p>下面我们来看个更加复杂的例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">5</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Slithering...&#x27;</span>)</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">move</span>(distance)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Horse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">45</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Galloping...&#x27;</span>)</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">move</span>(distance)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> <span class="title class_">Snake</span>(<span class="string">&#x27;Sammy&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Animal</span> = <span class="keyword">new</span> <span class="title class_">Horse</span>(<span class="string">&#x27;Tommy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sam.<span class="title function_">move</span>()</span><br><span class="line">tom.<span class="title function_">move</span>(<span class="number">34</span>)</span><br></pre></td></tr></table></figure><p>这个例子展示了一些上面没有提到的特性。 这一次，我们使用 <code>extends</code> 关键字创建了 Animal 的两个子类：<code>Horse</code> 和 <code>Snake</code>。</p><p>与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 <code>super()</code>，它会执行基类的构造函数。 而且，在构造函数里访问 <code>this</code> 的属性之前，我们 一定要调用 <code>super()</code>。 这个是 TypeScript 强制执行的一条重要规则。</p><p>这个例子演示了如何在子类里可以重写父类的方法。<code>Snake</code>类和 <code>Horse</code> 类都创建了 <code>move</code> 方法，它们重写了从 <code>Animal</code> 继承来的 <code>move</code> 方法，使得 <code>move</code> 方法根据不同的类而具有不同的功能。注意，即使 <code>tom</code> 被声明为 <code>Animal</code> 类型，但因为它的值是 <code>Horse</code>，调用 <code>tom.move(34)</code> 时，它会调用 <code>Horse</code> 里重写的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Slithering...</span><br><span class="line">Sammy moved 5m.</span><br><span class="line">Galloping...</span><br><span class="line">Tommy moved 34m.</span><br></pre></td></tr></table></figure><h2 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h2><h3 id="默认为-public"><a href="#默认为-public" class="headerlink" title="默认为 public"></a>默认为 public</h3><p>在上面的例子里，我们可以自由的访问程序里定义的成员。 如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用 <code>public</code> 来做修饰；例如，C# 要求必须明确地使用 <code>public</code> 指定成员是可见的。 在 TypeScript 里，成员都默认为 <code>public</code>。</p><p>你也可以明确的将一个成员标记成 <code>public</code>。 我们可以用下面的方式来重写上面的 <code>Animal</code> 类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">move</span>(<span class="params">distance: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="理解-private"><a href="#理解-private" class="headerlink" title="理解 private"></a>理解 private</h3><p>当成员被标记成 <code>private</code> 时，它就不能在声明它的类的外部访问。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Cat&#x27;</span>).<span class="property">name</span> <span class="comment">// 错误: &#x27;name&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure><p>TypeScript 使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p><p>然而，当我们比较带有 <code>private</code> 或 <code>protected</code> 成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 <code>private</code> 成员，那么只有当另外一个类型中也存在这样一个 <code>private</code> 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 <code>protected</code> 成员也使用这个规则。</p><p>下面来看一个例子，更好地说明了这一点：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rhino</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&#x27;Rhino&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Goat&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> <span class="title class_">Rhino</span>()</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line"></span><br><span class="line">animal = rhino</span><br><span class="line">animal = employee <span class="comment">// 错误: Animal 与 Employee 不兼容.</span></span><br></pre></td></tr></table></figure><p>这个例子中有 <code>Animal</code> 和 <code>Rhino</code> 两个类， <code>Rhino</code> 是 <code>Animal</code> 类的子类。 还有一个 <code>Employee</code> 类，其类型看上去与 <code>Animal</code> 是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为 <code>Animal</code> 和 <code>Rhino</code> 共享了来自 <code>Animal</code> 里的私有成员定义 <code>private name: string</code>，因此它们是兼容的。然而 <code>Employee</code> 却不是这样。当把 <code>Employee</code> 赋值给 <code>Animal</code> 的时候，得到一个错误，说它们的类型不兼容。尽管 <code>Employee</code> 里也有一个私有成员 <code>name</code>，但它明显不是 <code>Animal</code> 里面定义的那个。</p><h3 id="理解-protected"><a href="#理解-protected" class="headerlink" title="理解 protected"></a>理解 protected</h3><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">department</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">department</span> = department</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getElevatorPitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="variable language_">this</span>.department&#125;</span>.`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&#x27;Howard&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(howard.<span class="title function_">getElevatorPitch</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(howard.<span class="property">name</span>) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>注意，我们不能在 <code>Person</code> 类外使用 <code>name</code>，但是我们仍然可以通过 <code>Employee</code> 类的实例方法访问，因为 <code>Employee</code> 是由 <code>Person</code> 派生而来的。</p><p>构造函数也可以被标记成 <code>protected</code>。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">department</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">department</span> = department</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getElevatorPitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="variable language_">this</span>.department&#125;</span>.`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&#x27;Howard&#x27;</span>, <span class="string">&#x27;Sales&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>) <span class="comment">// 错误: &#x27;Person&#x27; 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure><h2 id="readonly-修饰符"><a href="#readonly-修饰符" class="headerlink" title="readonly 修饰符"></a>readonly 修饰符</h2><p>你可以使用 <code>readonly</code> 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line">john.<span class="property">name</span> = <span class="string">&#x27;peter&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>在上面的例子中，我们必须在 <code>Person</code> 类里定义一个只读成员 <code>name</code> 和一个参数为 <code>name</code> 的构造函数，并且立刻将 <code>name</code> 的值赋给 <code>this.name</code>，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 <code>Person</code> 类的修改版，使用了参数属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">readonly</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看我们是如何舍弃参数 <code>name</code>，仅在构造函数里使用 <code>readonly name: string</code> 参数来创建和初始化 <code>name</code> 成员。 我们把声明和赋值合并至一处。</p><p>参数属性通过给构造函数参数前面添加一个访问限定符来声明。使用 <code>private</code> 限定一个参数属性会声明并初始化一个私有成员；对于 <code>public</code> 和 <code>protected</code> 来说也是一样。</p><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><p><code>TypeScript</code> 支持通过 <code>getters/setters</code> 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p><p>下面来看如何把一个简单的类改写成使用 <code>get</code> 和 <code>set</code>。 首先，我们从一个没有使用存取器的例子开始。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>()</span><br><span class="line">employee.<span class="property">fullName</span> = <span class="string">&#x27;Bob Smith&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (employee.<span class="property">fullName</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(employee.<span class="property">fullName</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以设置 <code>fullName</code>，因为它是 <code>public</code> 的，有时候当我们去修改它的时候触发一些额外逻辑，存取器就派上用场了。</p><p>下面这个版本里，我们先检查用户密码是否正确，然后再允许其修改员工信息。我们把对 <code>fullName</code> 的直接访问改成了可以检查密码的 <code>set</code> 方法。 我们也加了一个 <code>get</code> 方法，让上面的例子仍然可以工作。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passcode = <span class="string">&#x27;secret passcode&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_fullName</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_fullName</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">newName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">&#x27;secret passcode&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_fullName</span> = newName</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error: Unauthorized update of employee!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>()</span><br><span class="line">employee.<span class="property">fullName</span> = <span class="string">&#x27;Bob Smith&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (employee.<span class="property">fullName</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(employee.<span class="property">fullName</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以修改一下密码，来验证一下存取器是否是工作的。当密码不对时，会提示我们没有权限去修改员工。</p><p>对于存取器有下面几点需要注意的：</p><p>首先，存取器要求你将编译器设置为输出 ECMAScript 5 或更高。 不支持降级到 ECMAScript 3。其次，只带有 <code>get</code> 不带有 <code>set</code> 的存取器自动被推断为 <code>readonly</code>。这在从代码生成 <code>.d.ts</code> 文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。</p><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p>到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。 我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用 <code>static</code> 定义 <code>origin</code>，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在 <code>origin</code> 前面加上类名。 如同在实例属性上使用 <code>this.xxx</code> 来访问属性一样，这里我们使用 <code>Grid.xxx</code> 来访问静态属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Grid</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> origin = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">scale</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">scale: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scale</span> = scale</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calculateDistanceFromOrigin</span>(<span class="params">point: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xDist = point.<span class="property">x</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">x</span></span><br><span class="line">    <span class="keyword">let</span> yDist = point.<span class="property">y</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">y</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(xDist * xDist + yDist * yDist) * <span class="variable language_">this</span>.<span class="property">scale</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">1.0</span>) <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">5.0</span>) <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid1.<span class="title function_">calculateDistanceFromOrigin</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span> &#125;))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid2.<span class="title function_">calculateDistanceFromOrigin</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span> &#125;))</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">makeSound</span>(): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">move</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;roaming the earth...&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含 <code>abstract</code> 关键字并且可以包含访问修饰符。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">printName</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Department name: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">printMeeting</span>(): <span class="built_in">void</span> <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&#x27;Accounting and Auditing&#x27;</span>) <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">printMeeting</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">generateReports</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Generating accounting reports...&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">department</span>: <span class="title class_">Department</span> <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line">department = <span class="keyword">new</span> <span class="title class_">Department</span>() <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> <span class="title class_">AccountingDepartment</span>() <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.<span class="title function_">printName</span>()</span><br><span class="line">department.<span class="title function_">printMeeting</span>()</span><br><span class="line">department.<span class="title function_">generateReports</span>() <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>当你在 TypeScript 里声明了一个类的时候，实际上同时声明了很多东西。首先就是类的<em>实例</em>的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> standardGreeting = <span class="string">&#x27;Hello, there&#x27;</span></span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeter</span>: <span class="title class_">Greeter</span></span><br><span class="line">greeter = <span class="keyword">new</span> <span class="title class_">Greeter</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeter.<span class="title function_">greet</span>())</span><br></pre></td></tr></table></figure><p>这里，我们写了 <code>let greeter: Greeter</code>，意思是 <code>Greeter</code> 类的实例的类型是 <code>Greeter</code>。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</p><p>我们也创建了一个叫做<em>构造函数的值</em>。 这个函数会在我们使用 <code>new</code> 创建类实例的时候被调用。 下面我们来看看，上面的代码被编译成 JavaScript 后是什么样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Greeter</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Greeter</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Greeter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greet</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Greeter</span>.<span class="property">standardGreeting</span> = <span class="string">&#x27;Hello, there&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Greeter</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> greeter</span><br><span class="line">greeter = <span class="keyword">new</span> <span class="title class_">Greeter</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeter.<span class="title function_">greet</span>())</span><br></pre></td></tr></table></figure><p>上面的代码里，<code>var Greeter</code> 将被构造函数赋值。 当我们调用 <code>new</code> 并执行了这个函数后，便会得到一个类的实例。这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有<em>实例部分</em>与<em>静态部分</em>这两个部分。</p><p>让我们稍微改写一下这个例子，看看它们之间的区别：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> standardGreeting = <span class="string">&#x27;Hello, there&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">greeting</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Greeter</span>.<span class="property">standardGreeting</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeter</span>: <span class="title class_">Greeter</span></span><br><span class="line">greeter = <span class="keyword">new</span> <span class="title class_">Greeter</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeter.<span class="title function_">greet</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeterMaker</span>: <span class="keyword">typeof</span> <span class="title class_">Greeter</span> = <span class="title class_">Greeter</span></span><br><span class="line">greeterMaker.<span class="property">standardGreeting</span> = <span class="string">&#x27;Hey there&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeter2</span>: <span class="title class_">Greeter</span> = <span class="keyword">new</span> <span class="title function_">greeterMaker</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeter2.<span class="title function_">greet</span>())</span><br></pre></td></tr></table></figure><p>这个例子里， <code>greeter1</code> 与之前看到的一样。 我们实例化 Greeter 类，并使用这个对象。 与我们之前看到的一样。</p><p>再之后，我们直接使用类。 我们创建了一个叫做 <code>greeterMaker</code> 的变量。这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 <code>typeof Greeter</code>，意思是取 <code>Greeter</code> 类的类型，而不是实例的类型。或者更确切的说，”告诉我 <code>Greeter</code> 标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 <code>greeterMaker</code> 上使用 <code>new</code>，创建 <code>Greeter</code> 的实例。</p><h3 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h3><p>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3</span>d <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">point3d</span>: <span class="title class_">Point3</span>d = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。</p><h2 id="基本示例-1"><a href="#基本示例-1" class="headerlink" title="基本示例"></a>基本示例</h2><p>和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列 API 函数还是只使用一次的函数。</p><p>通过下面的例子可以迅速回想起这两种 JavaScript 中的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JavaScript 里，函数可以使用函数体外部的变量。 当函数这么做时，我们说它‘捕获’了这些变量。 至于为什么可以这样做以及其中的利弊超出了本文的范围，但是深刻理解这个机制对学习 JavaScript 和 TypeScript 会很有帮助。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> z = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addToZ</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数类型-1"><a href="#函数类型-1" class="headerlink" title="函数类型"></a>函数类型</h2><h3 id="为函数定义类型"><a href="#为函数定义类型" class="headerlink" title="为函数定义类型"></a>为函数定义类型</h3><p>让我们为上面那个函数添加类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。TypeScript 能够根据返回语句自动推断出返回值类型。</p><h3 id="书写完整函数类型"><a href="#书写完整函数类型" class="headerlink" title="书写完整函数类型"></a>书写完整函数类型</h3><p>现在我们已经为函数指定了类型，下面让我们写出函数的完整类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myAdd</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  x: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  y: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。这个名字只是为了增加可读性。 我们也可以这么写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myAdd</span>: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  x: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  y: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。</p><p>第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用(<code>=&gt;</code>)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 <code>void</code> 而不能留空。</p><p>函数的类型只是由参数类型和返回值组成的。 函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成 API 的一部分。</p><h3 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h3><p>尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，TypeScript 编译器会自动识别出类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myAdd</span>: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这叫做“按上下文归类”，是类型推论的一种。它帮助我们更好地为程序指定类型。</p><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><p>TypeScript 里的每个函数参数都是必须的。 这不是指不能传递 <code>null</code> 或 <code>undefined</code> 作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>) <span class="comment">// Error, 参数过少</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>, <span class="string">&#x27;Sr.&#x27;</span>) <span class="comment">// Error, 参数过多</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 <code>undefined</code>。 在 TypeScript 里我们可以在参数名旁使用 <code>?</code> 实现可选参数的功能。 比如，我们想让 <code>lastName</code> 是可选的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lastName) <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> firstName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>) <span class="comment">// 现在正常了</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>, <span class="string">&#x27;Sr.&#x27;</span>) <span class="comment">// Error, 参数过多</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>可选参数必须跟在必须参数后面。 如果上例我们想让 <code>firstName</code> 是可选的，那么就必须调整它们的位置，把 <code>firstName</code> 放在后面。</p><p>在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 <code>undefined</code> 时。 它们叫做有默认初始化值的参数。 让我们修改上例，把<code>lastName</code> 的默认值设置为 <code>&quot;Smith&quot;</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName = <span class="string">&#x27;Smith&#x27;</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>) <span class="comment">// 返回 &quot;Bob Smith&quot;</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="literal">undefined</span>) <span class="comment">// 正常, 同样 &quot;Bob Smith&quot;</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>, <span class="string">&#x27;Sr.&#x27;</span>) <span class="comment">// 错误, 参数过多</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 <code>undefined</code> 值来获得默认值。 例如，我们重写最后一个例子，让 <code>firstName</code> 是带默认值的参数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName = <span class="string">&#x27;Will&#x27;</span>, lastName: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>) <span class="comment">// Error, 参数过少</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>, <span class="string">&#x27;Sr.&#x27;</span>) <span class="comment">// Error, 参数过多</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Adams&#x27;</span>) <span class="comment">// OK， 返回 &quot;Bob Adams&quot;</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="title function_">buildName</span>(<span class="literal">undefined</span>, <span class="string">&#x27;Adams&#x27;</span>) <span class="comment">// OK，  返回 &quot;Will Adams&quot;</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 <code>arguments</code> 来访问所有传入的参数。</p><p>在 TypeScript 里，你可以把所有参数收集到一个变量里：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = <span class="title function_">buildName</span>(<span class="string">&#x27;Joseph&#x27;</span>, <span class="string">&#x27;Samuel&#x27;</span>, <span class="string">&#x27;Lucas&#x27;</span>, <span class="string">&#x27;MacKinzie&#x27;</span>)</span><br></pre></td></tr></table></figure><p>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ <code>...</code>）后面给定的名字，你可以在函数体内使用这个数组。</p><p>这个省略号也会在带有剩余参数的函数类型定义上使用到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">buildNameFun</span>: <span class="function">(<span class="params">fname: <span class="built_in">string</span>, ...rest: <span class="built_in">string</span>[]</span>) =&gt;</span> <span class="built_in">string</span> = buildName</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>学习如何在 JavaScript 里正确使用 <code>this</code> 就好比一场成年礼。由于 TypeScript 是 JavaScript 的超集，TypeScript 程序员也需要弄清 <code>this</code> 工作机制并且当有 bug 的时候能够找出错误所在。 幸运的是，TypeScript 能通知你错误地使用了 <code>this</code> 的地方。 如果你想了解 JavaScript 里的 this 是如何工作的，那么首先阅读 Yehuda Katz 写的 <a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">Understanding JavaScript Function Invocation and “this”</a>。 Yehuda 的文章详细的阐述了 <code>this</code> 的内部工作原理，因此我们这里只做简单介绍。</p><h3 id="this-和箭头函数"><a href="#this-和箭头函数" class="headerlink" title="this 和箭头函数"></a>this 和箭头函数</h3><p>JavaScript 里，<code>this</code> 的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。</p><p>下面看一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  <span class="attr">suits</span>: [<span class="string">&#x27;hearts&#x27;</span>, <span class="string">&#x27;spades&#x27;</span>, <span class="string">&#x27;clubs&#x27;</span>, <span class="string">&#x27;diamonds&#x27;</span>],</span><br><span class="line">  <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="attr">createCardPicker</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>)</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.<span class="title function_">createCardPicker</span>()</span><br><span class="line"><span class="keyword">let</span> pickedCard = <span class="title function_">cardPicker</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;card: &#x27;</span> + pickedCard.<span class="property">card</span> + <span class="string">&#x27; of &#x27;</span> + pickedCard.<span class="property">suit</span>)</span><br></pre></td></tr></table></figure><p>可以看到 <code>createCardPicker</code> 是个函数，并且它又返回了一个函数。如果我们尝试运行这个程序，会发现它并没有输出而是报错了。 因为 <code>createCardPicker</code> 返回的函数里的 <code>this</code> 被设置成了 <code>global</code> 而不是 <code>deck</code> 对象。 因为我们只是独立的调用了 <code>cardPicker()</code>。 顶级的非方法式调用会将 <code>this</code> 视为 <code>global</code>。</p><p>为了解决这个问题，我们可以在函数被返回时就绑好正确的<code>this</code>。 这样的话，无论之后怎么使用它，都会引用绑定的<code>deck</code> 对象。 我们需要改变函数表达式来使用 ECMAScript 6 箭头语法。 箭头函数能保存函数创建时的 <code>this</code> 值，而不是调用时的值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  <span class="attr">suits</span>: [<span class="string">&#x27;hearts&#x27;</span>, <span class="string">&#x27;spades&#x27;</span>, <span class="string">&#x27;clubs&#x27;</span>, <span class="string">&#x27;diamonds&#x27;</span>],</span><br><span class="line">  <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="attr">createCardPicker</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 注意：这里使用箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>)</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.<span class="title function_">createCardPicker</span>()</span><br><span class="line"><span class="keyword">let</span> pickedCard = <span class="title function_">cardPicker</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;card: &#x27;</span> + pickedCard.<span class="property">card</span> + <span class="string">&#x27; of &#x27;</span> + pickedCard.<span class="property">suit</span>)</span><br></pre></td></tr></table></figure><h3 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a>this 参数</h3><p>在上述的例子中 <code>this.suits[pickedSuit]</code> 的类型为 <code>any</code>，这是因为 <code>this</code> 来自对象字面量里的函数表达式。 修改的方法是，提供一个显式的 <code>this</code> 参数。 <code>this</code> 参数是个假的参数，它出现在参数列表的最前面：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 确保“this”在此独立函数中不可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们往例子里添加一些接口，<code>Card</code> 和 <code>Deck</code>，让类型重用能够变得清晰简单些：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">  <span class="attr">suit</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">card</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Deck</span> &#123;</span><br><span class="line">  <span class="attr">suits</span>: <span class="built_in">string</span>[]</span><br><span class="line">  <span class="attr">cards</span>: <span class="built_in">number</span>[]</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createCardPicker</span>(<span class="attr">this</span>: <span class="title class_">Deck</span>): <span class="function">() =&gt;</span> <span class="title class_">Card</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">deck</span>: <span class="title class_">Deck</span> = &#123;</span><br><span class="line">  <span class="attr">suits</span>: [<span class="string">&#x27;hearts&#x27;</span>, <span class="string">&#x27;spades&#x27;</span>, <span class="string">&#x27;clubs&#x27;</span>, <span class="string">&#x27;diamonds&#x27;</span>],</span><br><span class="line">  <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> 函数现在显式指定其被调用方必须是 deck 类型</span></span><br><span class="line">  <span class="attr">createCardPicker</span>: <span class="keyword">function</span> (<span class="params"><span class="variable language_">this</span>: Deck</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>)</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.<span class="title function_">createCardPicker</span>()</span><br><span class="line"><span class="keyword">let</span> pickedCard = <span class="title function_">cardPicker</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;card: &#x27;</span> + pickedCard.<span class="property">card</span> + <span class="string">&#x27; of &#x27;</span> + pickedCard.<span class="property">suit</span>)</span><br></pre></td></tr></table></figure><p>现在 TypeScrip t 知道 <code>createCardPicker</code> 期望在某个 <code>Deck</code> 对象上调用。也就是说 <code>this</code> 是 <code>Deck</code> 类型的，而非 <code>any</code>。</p><h3 id="this-参数在回调函数里"><a href="#this-参数在回调函数里" class="headerlink" title="this 参数在回调函数里"></a>this 参数在回调函数里</h3><p>你可以也看到过在回调函数里的 <code>this</code> 报错，当你将一个函数传递到某个库函数里稍后会被调用时。 因为当回调被调用的时候，它们会被当成一个普通函数调用，<code>this</code> 将为 <code>undefined</code>。 稍做改动，你就可以通过 <code>this</code> 参数来避免错误。 首先，库函数的作者要指定 <code>this</code> 的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UIElement</span> &#123;</span><br><span class="line">  <span class="title function_">addClickListener</span>(<span class="attr">onclick</span>: <span class="function">(<span class="params"><span class="variable language_">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this: void</code> 意味着 <code>addClickListener</code> 期望传入的 <code>onclick</code> 方法不需要 <code>this</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UIElement</span> &#123;</span><br><span class="line">  <span class="title function_">addClickListener</span>(<span class="attr">onclick</span>: <span class="function">(<span class="params"><span class="variable language_">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">onClickBad</span>(<span class="params"><span class="variable language_">this</span>: Handler, e: Event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = e.<span class="property">type</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> <span class="title class_">Handler</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">uiElement</span>: <span class="title class_">UIElement</span> = &#123;</span><br><span class="line">  <span class="title function_">addClickListener</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uiElement.<span class="title function_">addClickListener</span>(h.<span class="property">onClickBad</span>) <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>指定了 <code>this</code> 类型后，你显式声明 <code>onClickBad</code> 必须在 <code>Handler</code> 的实例上调用。 然后 TypeScript 会检测到 <code>addClickListener</code> 要求函数带有 <code>this: void</code>。 改变 <code>this</code> 类型来修复这个错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">onClickBad</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">void</span>, e: Event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> <span class="title class_">Handler</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">uiElement</span>: <span class="title class_">UIElement</span> = &#123;</span><br><span class="line">  <span class="title function_">addClickListener</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uiElement.<span class="title function_">addClickListener</span>(h.<span class="property">onClickBad</span>)</span><br></pre></td></tr></table></figure><p>因为 <code>onClickGood</code> 指定了 <code>this</code> 类型为 <code>void</code>，因此传递 <code>addClickListener</code> 是合法的。 当然了，这也意味着不能使用 <code>this.info</code>。 如果你两者都想要，你不得不使用箭头函数了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span></span><br><span class="line">  onClickGood = <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = e.<span class="property">type</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是可行的因为箭头函数不会捕获 <code>this</code>，所以你总是可以把它们传给期望 <code>this: void</code> 的函数。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>JavaScript 本身是个动态语言。JavaScript 里函数根据传入不同的参数而返回不同类型的数据的场景是很常见的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">&#x27;hearts&#x27;</span>, <span class="string">&#x27;spades&#x27;</span>, <span class="string">&#x27;clubs&#x27;</span>, <span class="string">&#x27;diamonds&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(x)) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * x.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> pickedCard</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">suit</span>: suits[pickedSuit], <span class="attr">card</span>: x % <span class="number">13</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&#x27;diamonds&#x27;</span>, <span class="attr">card</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&#x27;spades&#x27;</span>, <span class="attr">card</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&#x27;hearts&#x27;</span>, <span class="attr">card</span>: <span class="number">4</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[<span class="title function_">pickCard</span>(myDeck)]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;card: &#x27;</span> + pickedCard1.<span class="property">card</span> + <span class="string">&#x27; of &#x27;</span> + pickedCard1.<span class="property">suit</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = <span class="title function_">pickCard</span>(<span class="number">15</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;card: &#x27;</span> + pickedCard2.<span class="property">card</span> + <span class="string">&#x27; of &#x27;</span> + pickedCard2.<span class="property">suit</span>)</span><br></pre></td></tr></table></figure><p><code>pickCard</code> 方法根据传入参数的不同会返回两种不同的类型。如果传入的是代表纸牌的对象数组，函数作用是从中抓一张牌。如果用户想抓牌，我们告诉他抓到了什么牌。 但是这怎么在类型系统里表示呢。</p><p>方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 下面我们来重载 <code>pickCard</code> 函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">&#x27;hearts&#x27;</span>, <span class="string">&#x27;spades&#x27;</span>, <span class="string">&#x27;clubs&#x27;</span>, <span class="string">&#x27;diamonds&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x: &#123; suit: <span class="built_in">string</span>; card: <span class="built_in">number</span> &#125;[]</span>): <span class="built_in">number</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): &#123; <span class="attr">suit</span>: <span class="built_in">string</span>; <span class="attr">card</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(x)) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * x.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> pickedCard</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">suit</span>: suits[pickedSuit], <span class="attr">card</span>: x % <span class="number">13</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&#x27;diamonds&#x27;</span>, <span class="attr">card</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&#x27;spades&#x27;</span>, <span class="attr">card</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&#x27;hearts&#x27;</span>, <span class="attr">card</span>: <span class="number">4</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[<span class="title function_">pickCard</span>(myDeck)]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;card: &#x27;</span> + pickedCard1.<span class="property">card</span> + <span class="string">&#x27; of &#x27;</span> + pickedCard1.<span class="property">suit</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = <span class="title function_">pickCard</span>(<span class="number">15</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;card: &#x27;</span> + pickedCard2.<span class="property">card</span> + <span class="string">&#x27; of &#x27;</span> + pickedCard2.<span class="property">suit</span>)</span><br></pre></td></tr></table></figure><p>这样改变后，重载的 <code>pickCard</code> 函数在调用的时候会进行正确的类型检查。</p><p>为了让编译器能够选择正确的检查类型，它与 JavaScript 里的处理流程相似。它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p><p>注意，<code>function pickCard(x): any</code> 并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象数组，另一个接收数字。 以其它参数调用 <code>pickCard</code> 会产生错误。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>软件工程中，我们不仅要创建定义良好且一致的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p><p>在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</p><h2 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h2><p>下面来创建第一个使用泛型的例子：<code>identity</code> 函数。 这个函数会返回任何传入它的值。 你可以把这个函数当成是 <code>echo</code> 命令。</p><p>不用泛型的话，这个函数可能是下面这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，我们使用 <code>any</code> 类型来定义函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>any</code> 类型会导致这个函数可以接收任何类型的 <code>arg</code> 参数，但是这样就丢失了一些信息：传入的类型与返回的类型应该是相同的。如果我们传入一个数字，我们只知道任何类型的值都有可能被返回。</p><p>因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里，我们使用了<em>类型变量</em>，它是一种特殊的变量，只用于表示类型而不是值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们给 <code>identity</code> 添加了类型变量 <code>T</code>。 <code>T</code> 帮助我们捕获用户传入的类型（比如：<code>number</code>），之后我们就可以使用这个类型。 之后我们再次使用了 <code>T</code> 当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。这允许我们跟踪函数里使用的类型的信息。</p><p>我们把这个版本的 <code>identity</code> 函数叫做泛型，因为它可以适用于多个类型。 不同于使用 <code>any</code>，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。</p><p>我们定义了泛型函数后，可以用两种方法使用。 第一种是，传入所有的参数，包含类型参数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;myString&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里我们明确的指定了 <code>T</code> 是 <code>string</code> 类型，并做为一个参数传给函数，使用了 <code>&lt;&gt;</code> 括起来而不是 <code>()</code>。</p><p>第二种方法更普遍。利用了<em>类型推论</em> – 即编译器会根据传入的参数自动地帮助我们确定 <code>T</code> 的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = <span class="title function_">identity</span>(<span class="string">&#x27;myString&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意我们没必要使用尖括号（<code>&lt;&gt;</code>）来明确地传入类型；编译器可以查看 <code>myString</code> 的值，然后把 <code>T</code> 设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入 <code>T</code> 的类型，在一些复杂的情况下，这是可能出现的。</p><h2 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h2><p>使用泛型创建像 <code>identity</code> 这样的泛型函数时，编译器要求你在函数体必须正确的使用这个通用的类型。 换句话说，你必须把这些参数当做是任意或所有类型。</p><p>看下之前 <code>identity</code> 例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想打印出 <code>arg</code> 的长度。 我们很可能会这样做：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这么做，编译器会报错说我们使用了 <code>arg</code> 的 <code>.length</code> 属性，但是没有地方指明 <code>arg</code> 具有这个属性。记住，这些类型变量代表的是任意类型，所以使用这个函数的人可能传入的是个数字，而数字是没有 <code>.length</code> 属性的。</p><p>现在假设我们想操作 <code>T</code> 类型的数组而不直接是 <code>T</code>。由于我们操作的是数组，所以 <code>.length</code> 属性是应该存在的。我们可以像创建其它数组一样创建这个数组：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T[]): T[] &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以这样理解 <code>loggingIdentity</code> 的类型：泛型函数 <code>loggingIdentity</code>，接收类型参数 <code>T</code> 和参数 <code>arg</code>，它是个元素类型是 <code>T</code> 的数组，并返回元素类型是<code>T</code> 的数组。 如果我们传入数字数组，将返回一个数字数组，因为此时 <code>T</code> 的的类型为 <code>number</code>。 这可以让我们把泛型变量 <code>T</code> 当做类型的一部分使用，而不是整个类型，增加了灵活性。</p><h2 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h2><p>上一节，我们创建了 <code>identity</code> 通用函数，可以适用于不同的类型。 在这节，我们研究一下函数本身的类型，以及如何创建泛型接口。</p><p>泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面，像函数声明一样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = identity</span><br></pre></td></tr></table></figure><p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity</span><br></pre></td></tr></table></figure><p>我们还可以使用带有调用签名的对象字面量来定义泛型函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &#123; &lt;T&gt;(<span class="attr">arg</span>: T): T &#125; = identity</span><br></pre></td></tr></table></figure><p>这引导我们去写第一个泛型接口了。我们把上面例子里的对象字面量拿出来做为一个接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span> &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">arg</span>: T): T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span> = identity</span><br></pre></td></tr></table></figure><p>我们甚至可以把泛型参数当作整个接口的一个参数。 这样我们就能清楚的知道使用的具体是哪个泛型类型（比如： <code>Dictionary&lt;string&gt;</code> 而不只是<code> Dictionary</code>）。这样接口里的其它成员也能知道这个参数的类型了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;<span class="built_in">number</span>&gt; = identity</span><br></pre></td></tr></table></figure><p>注意，我们的示例做了少许改动。 不再描述泛型函数，而是把非泛型函数签名作为泛型类型一部分。 当我们使用 <code>GenericIdentityFn</code> 的时候，还得传入一个类型参数来指定泛型类型（这里是：<code>number</code>），锁定了之后代码里使用的类型。对于描述哪部分类型属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。</p><p>除了泛型接口，我们还可以创建泛型类。 注意，无法创建泛型枚举和泛型命名空间。</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类看上去与泛型接口差不多。 泛型类使用（ <code>&lt;&gt;</code>）括起泛型类型，跟在类名后面。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span></span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GenericNumber</code> 类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用 <code>number</code> 类型。 也可以使用字符串或其它更复杂的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringNumeric = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">stringNumeric.<span class="property">zeroValue</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">stringNumeric.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringNumeric.<span class="title function_">add</span>(stringNumeric.<span class="property">zeroValue</span>, <span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure><p>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</p><p>我们在<a href="/chapter2/class">类</a>那节说过，类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>我们有时候想操作某类型的一组值，并且我们知道这组值具有什么样的属性。在 <code>loggingIdentity</code> 例子中，我们想访问 <code>arg</code> 的 <code>length</code> 属性，但是编译器并不能证明每种类型都有 <code>length</code> 属性，所以就报错了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比于操作 <code>any</code> 所有类型，我们想要限制函数去处理任意带有 <code>.length</code> 属性的所有类型。 只要传入的类型有这个属性，我们就允许，就是说至少包含这一属性。为此，我们需要列出对于 <code>T</code> 的约束要求。</p><p>我们定义一个接口来描述约束条件，创建一个包含 <code>.length</code> 属性的接口，使用这个接口和 <code>extends</code> 关键字来实现约束：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>) <span class="comment">// OK</span></span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">loggingIdentity</span>(<span class="number">3</span>) <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>我们需要传入符合约束类型的值，必须包含必须的属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">loggingIdentity</span>(&#123; <span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h3 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h3><p>你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 <code>obj</code> 上，因此我们需要在这两个类型之间使用约束。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getProperty&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&#x27;a&#x27;</span>) <span class="comment">// okay</span></span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&#x27;m&#x27;</span>) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h1 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h1><h1 id="类型推断-1"><a href="#类型推断-1" class="headerlink" title="类型推断"></a>类型推断</h1><p>这节介绍 TypeScript 里的类型推断。即，类型是在哪里如何被推断的。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>TypeScript 里，在有些没有明确指出类型的地方，类型推断会帮助提供类型。如下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>变量 <code>x</code> 的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。</p><p>大多数情况下，类型推断是直截了当地。后面的小节，我们会浏览类型推断时的细微差别。</p><h2 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h2><p>有些时候我们需要从几个表达式中推断类型，会使用这些表达式的类型来推断出一个最合适的通用类型。例如，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">null</span>]</span><br></pre></td></tr></table></figure><p>为了推断 <code>x</code> 的类型，我们必须考虑所有元素的类型。 这里有两种选择：<code>number</code> 和 <code>null</code>。 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。</p><p>由于最终的通用类型取自候选类型，有些时候候选类型共享一个公共结构，但是却没有一个类型能做为所有候选类型的超级类型。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = [<span class="keyword">new</span> <span class="title class_">Bee</span>(), <span class="keyword">new</span> <span class="title class_">Lion</span>()]</span><br></pre></td></tr></table></figure><p>这里，我们想让 <code>zoo</code> 被推断为 <code>Animal[]</code> 类型，但是这个数组里没有对象是 <code>Animal</code> 类型的，因此不能推断出这个结果。 为了更正，我们可以明确的声明我们期望的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">zoo</span>: <span class="title class_">Animal</span>[] = [<span class="keyword">new</span> <span class="title class_">Bee</span>(), <span class="keyword">new</span> <span class="title class_">Lion</span>()]</span><br></pre></td></tr></table></figure><p>如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，<code>(Bee | Lion)[]</code></p><h2 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h2><p>有些时候，TypeScript 类型推断会按另外一种方式，我们称作“上下文类型”；上下文类型的出现和表达式的类型以及所处的位置相关。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">mouseEvent</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mouseEvent.<span class="property">clickTime</span>) <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子会得到一个类型错误，TypeScript 类型检查器使用 <code>window.onmousedown</code> 函数的类型来推断右边函数表达式的类型。 因此，就能推断出 <code>mouseEvent</code> 参数的类型了，所以 <code>mouseEvent</code> 访问了一个不存在的属性，就报错了。</p><p>如果上下文类型表达式包含了明确的类型信息，上下文的类型被忽略。重写上面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">mouseEvent: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mouseEvent.<span class="property">clickTime</span>) <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数表达式有明确的参数类型注解，上下文类型被忽略。这样的话就不报错了，因为这里不会使用到上下文类型。</p><p>上下文类型会在很多情况下使用到。通常包含函数的参数，赋值表达式的右边，类型断言，对象成员，数组字面量和返回值语句。上下文类型也会做为最佳通用类型的候选类型。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createZoo</span>(<span class="params"></span>): <span class="title class_">Animal</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">new</span> <span class="title class_">Bee</span>(), <span class="keyword">new</span> <span class="title class_">Lion</span>()]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = <span class="title function_">createZoo</span>()</span><br></pre></td></tr></table></figure><p>这个例子里，最佳通用类型有 <code>3</code> 个候选者：<code>Animal</code>，<code>Bee</code> 和 <code>Lion</code>。 其中，<code>Animal</code> 会被做为最佳通用类型。</p><h1 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h1><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，<code>Person &amp; Loggable</code> 同时是 <code>Person</code> 和 <code>Loggable</code>。 就是说这个类型的对象同时拥有了这两种类型的成员。</p><p>我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在 JavaScript 里发生这种情况的场合很多！） 下面是如何创建混入的一个简单例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> extend&lt;T, U&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: U): T &amp; U &#123;</span><br><span class="line">  <span class="keyword">let</span> result = &#123;&#125; <span class="keyword">as</span> T &amp; U</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> first) &#123;</span><br><span class="line">    result[id] = first[id] <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> second) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.<span class="title function_">hasOwnProperty</span>(id)) &#123;</span><br><span class="line">      result[id] = second[id] <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Loggable</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConsoleLogger</span> <span class="keyword">implements</span> <span class="title class_">Loggable</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jim = <span class="title function_">extend</span>(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jim&#x27;</span>), <span class="keyword">new</span> <span class="title class_">ConsoleLogger</span>())</span><br><span class="line"><span class="keyword">var</span> n = jim.<span class="property">name</span></span><br><span class="line">jim.<span class="title function_">log</span>()</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型与交叉类型很有关联，但是使用上却完全不同。 偶尔你会遇到这种情况，一个代码库希望传入 <code>number</code> 或 <code>string</code> 类型的参数。 例如下面的函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>) + value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">padLeft</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="number">4</span>) <span class="comment">// returns &quot;    Hello world&quot;</span></span><br></pre></td></tr></table></figure><p><code>padLeft</code> 存在一个问题，<code>padding</code> 参数的类型指定成了 <code>any</code>。 这就是说我们可以传入一个既不是 <code>number</code> 也不是 <code>string</code> 类型的参数，但是 TypeScript 却不报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> indentedString = <span class="title function_">padLeft</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="literal">true</span>) <span class="comment">// 编译阶段通过，运行时报错</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，我们可以使用 联合类型做为 <code>padding</code> 的参数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indentedString = <span class="title function_">padLeft</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="literal">true</span>) <span class="comment">// 编译阶段报错</span></span><br></pre></td></tr></table></figure><p>联合类型表示一个值可以是几种类型之一。我们用竖线（<code>|</code>）分隔每个类型，所以 <code>number | string</code> 表示一个值可以是 <code>number</code> 或 <code>string</code>。</p><p>如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>()</span><br><span class="line">  <span class="title function_">layEggs</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fish</span> &#123;</span><br><span class="line">  <span class="title function_">swim</span>()</span><br><span class="line">  <span class="title function_">layEggs</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSmallPet</span>(<span class="params"></span>): <span class="title class_">Fish</span> | <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getSmallPet</span>()</span><br><span class="line">pet.<span class="title function_">layEggs</span>() <span class="comment">// okay</span></span><br><span class="line">pet.<span class="title function_">swim</span>() <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>这里的联合类型可能有点复杂：如果一个值的类型是 <code>A | B</code>，我们能够确定的是它包含了 <code>A</code> 和 <code>B</code> 中共有的成员。这个例子里，<code>Fish</code> 具有一个 <code>swim</code> 方法，我们不能确定一个 <code>Bird | Fish</code> 类型的变量是否有 <code>swim</code>方法。 如果变量在运行时是 <code>Bird</code> 类型，那么调用 <code>pet.swim()</code> 就出错了。</p><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><p>联合类型适合于那些值可以为不同类型的情况。 但当我们想确切地了解是否为 <code>Fish</code> 或者是 <code>Bird</code> 时怎么办？ JavaScript 里常用来区分这 2 个可能值的方法是检查成员是否存在。如之前提及的，我们只能访问联合类型中共同拥有的成员。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getSmallPet</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一个成员访问都会报错</span></span><br><span class="line"><span class="keyword">if</span> (pet.<span class="property">swim</span>) &#123;</span><br><span class="line">  pet.<span class="title function_">swim</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pet.<span class="property">fly</span>) &#123;</span><br><span class="line">  pet.<span class="title function_">fly</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让这段代码工作，我们要使用类型断言：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getSmallPet</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((pet <span class="keyword">as</span> <span class="title class_">Fish</span>).<span class="property">swim</span>) &#123;</span><br><span class="line">  ;(pet <span class="keyword">as</span> <span class="title class_">Fish</span>).<span class="title function_">swim</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ;(pet <span class="keyword">as</span> <span class="title class_">Bird</span>).<span class="title function_">fly</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户自定义的类型保护"><a href="#用户自定义的类型保护" class="headerlink" title="用户自定义的类型保护"></a>用户自定义的类型保护</h3><p>这里可以注意到我们不得不多次使用类型断言。如果我们一旦检查过类型，就能在之后的每个分支里清楚地知道 <code>pet</code> 的类型的话就好了。</p><p>TypeScript 里的<em>类型保护</em>机制让它成为了现实。 类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个<em>类型谓词</em>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFish</span>(<span class="params">pet: Fish | Bird</span>): pet is <span class="title class_">Fish</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (pet <span class="keyword">as</span> <span class="title class_">Fish</span>).<span class="property">swim</span> !== <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子里，<code>pet is Fish</code> 就是类型谓词。谓词为 <code>parameterName is Type</code> 这种形式， <code>parameterName</code> 必须是来自于当前函数签名里的一个参数名。</p><p>每当使用一些变量调用 <code>isFish</code> 时，<code>TypeScript</code> 会将变量缩减为那个具体的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isFish</span>(pet)) &#123;</span><br><span class="line">  pet.<span class="title function_">swim</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  pet.<span class="title function_">fly</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>TypeScript</code> 不仅知道在 <code>if</code> 分支里 <code>pet</code> 是 <code>Fish</code> 类型；它还清楚在 <code>else</code> 分支里，一定不是 Fish 类型而是 <code>Bird</code> 类型。</p><h3 id="typeof-类型保护"><a href="#typeof-类型保护" class="headerlink" title="typeof 类型保护"></a>typeof 类型保护</h3><p>现在我们回过头来看看怎么使用联合类型书写 <code>padLeft</code> 代码。我们可以像下面这样利用类型断言来写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isNumber</span>(<span class="params">x: <span class="built_in">any</span></span>): x is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">x: <span class="built_in">any</span></span>): x is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isNumber</span>(padding)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>) + value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(padding)) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，你必须要定义一个函数来判断类型是否是原始类型，但这并不必要。其实我们不必将 <code>typeof x === &#39;number&#39; </code>抽象成一个函数，因为 TypeScript 可以将它识别为一个类型保护。 也就是说我们可以直接在代码里检查类型了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>) + value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些 <code>typeof</code> 类型保护只有两种形式能被识别：<code>typeof v === &quot;typename&quot;</code> 和 <code>typeof v !== &quot;typename&quot;</code>， <code>&quot;typename&quot;</code>必须是 <code>&quot;number&quot;</code>， <code>&quot;string&quot;</code>，<code>&quot;boolean&quot;</code> 或 <code>&quot;symbol&quot;</code>。 但是 TypeScript 并不会阻止你与其它字符串比较，只是 TypeScript 不会把那些表达式识别为类型保护。</p><h3 id="instanceof-类型保护"><a href="#instanceof-类型保护" class="headerlink" title="instanceof 类型保护"></a>instanceof 类型保护</h3><p>如果你已经阅读了 <code>typeof</code> 类型保护并且对 JavaScript 里的 <code>instanceof</code> 操作符熟悉的话，你可能已经猜到了这节要讲的内容。</p><p><code>instanceof</code> 类型保护是通过构造函数来细化类型的一种方式。我们把之前的例子做一个小小的改造：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bird fly&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">layEggs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bird lay eggs&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span> &#123;</span><br><span class="line">  <span class="title function_">swim</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fish swim&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">layEggs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fish lay eggs&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomPet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="keyword">new</span> <span class="title class_">Bird</span>() : <span class="keyword">new</span> <span class="title class_">Fish</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getRandomPet</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pet <span class="keyword">instanceof</span> <span class="title class_">Bird</span>) &#123;</span><br><span class="line">  pet.<span class="title function_">fly</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pet <span class="keyword">instanceof</span> <span class="title class_">Fish</span>) &#123;</span><br><span class="line">  pet.<span class="title function_">swim</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可以为-null-的类型"><a href="#可以为-null-的类型" class="headerlink" title="可以为 null 的类型"></a>可以为 null 的类型</h2><p>TypeScript 具有两种特殊的类型，<code>null</code> 和 <code>undefined</code>，它们分别具有值 <code>null</code> 和 <code>undefined</code>。我们在<a href="/chapter2/type">基础类型</a>一节里已经做过简要说明。 默认情况下，类型检查器认为 <code>null</code> 与 <code>undefined</code> 可以赋值给任何类型。 <code>null</code> 与 <code>undefined</code> 是所有其它类型的一个有效值。 这也意味着，你阻止不了将它们赋值给其它类型，就算是你想要阻止这种情况也不行。<code>null</code>的发明者，Tony Hoare，称它为<a href="https://en.wikipedia.org/wiki/Null_pointer#History">价值亿万美金的错误</a>。</p><p><code>--strictNullChecks</code> 标记可以解决此错误：当你声明一个变量时，它不会自动地包含 <code>null</code> 或 <code>undefined</code>。 你可以使用联合类型明确的包含它们：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">s = <span class="literal">null</span> <span class="comment">// 错误, &#x27;null&#x27;不能赋值给&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sn</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">sn = <span class="literal">null</span> <span class="comment">// 可以</span></span><br><span class="line"></span><br><span class="line">sn = <span class="literal">undefined</span> <span class="comment">// error, &#x27;undefined&#x27;不能赋值给&#x27;string | null&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，按照 JavaScript 的语义，TypeScript 会把 <code>null</code> 和 <code>undefined</code> 区别对待。<code>string | null</code>，<code>string | undefined</code> 和 <code>string | undefined | null</code> 是不同的类型。</p><h3 id="可选参数和可选属性"><a href="#可选参数和可选属性" class="headerlink" title="可选参数和可选属性"></a>可选参数和可选属性</h3><p>使用了 <code>--strictNullChecks</code>，可选参数会被自动地加上 <code>| undefined</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + (y || <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="literal">undefined</span>)</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="literal">null</span>) <span class="comment">// error, &#x27;null&#x27; 不能赋值给 &#x27;number | undefined&#x27;</span></span><br></pre></td></tr></table></figure><p>可选属性也会有同样的处理：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">  b?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>()</span><br><span class="line">c.<span class="property">a</span> = <span class="number">12</span></span><br><span class="line">c.<span class="property">a</span> = <span class="literal">undefined</span> <span class="comment">// error, &#x27;undefined&#x27; 不能赋值给 &#x27;number&#x27;</span></span><br><span class="line">c.<span class="property">b</span> = <span class="number">13</span></span><br><span class="line">c.<span class="property">b</span> = <span class="literal">undefined</span> <span class="comment">// ok</span></span><br><span class="line">c.<span class="property">b</span> = <span class="literal">null</span> <span class="comment">// error, &#x27;null&#x27; 不能赋值给 &#x27;number | undefined&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="类型保护和类型断言"><a href="#类型保护和类型断言" class="headerlink" title="类型保护和类型断言"></a>类型保护和类型断言</h3><p>由于可以为 <code>null</code> 的类型能和其它类型定义为联合类型，那么你需要使用类型保护来去除 <code>null</code>。幸运地是这与在 <code>JavaScript</code> 里写的代码一致：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">sn: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (sn === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很明显地去除了 <code>null</code>，你也可以使用短路运算符：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">sn: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sn || <span class="string">&#x27;default&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果编译器不能够去除 <code>null</code> 或 <code>undefined</code>，你可以使用类型断言手动去除。语法是添加 <code>!</code> 后缀： <code>identifier!</code> 从 <code>identifier</code> 的类型里去除了 <code>null</code> 和 <code>undefined</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">broken</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name.<span class="title function_">charAt</span>(<span class="number">0</span>) + <span class="string">&#x27;.  the &#x27;</span> + epithet <span class="comment">// error, &#x27;name&#x27; 可能为 null</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">postfix</span>(<span class="string">&#x27;great&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fixed</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name!.<span class="title function_">charAt</span>(<span class="number">0</span>) + <span class="string">&#x27;.  the &#x27;</span> + epithet <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">postfix</span>(<span class="string">&#x27;great&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">broken</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>本例使用了嵌套函数，因为编译器无法去除嵌套函数的 <code>null</code>（除非是立即调用的函数表达式）。因为它无法跟踪所有对嵌套函数的调用，尤其是你将内层函数做为外层函数的返回值。如果无法知道函数在哪里被调用，就无法知道调用时 <code>name</code> 的类型。</p><h2 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h2><p>字符串字面量类型允许你指定字符串必须具有的确切值。在实际应用中，字符串字面量类型可以与联合类型，类型保护很好的配合。通过结合使用这些特性，你可以实现类似枚举类型的字符串。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Easing</span> = <span class="string">&#x27;ease-in&#x27;</span> | <span class="string">&#x27;ease-out&#x27;</span> | <span class="string">&#x27;ease-in-out&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UIElement</span> &#123;</span><br><span class="line">  <span class="title function_">animate</span>(<span class="params">dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span>, easing: Easing</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (easing === <span class="string">&#x27;ease-in&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">&#x27;ease-out&#x27;</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">&#x27;ease-in-out&#x27;</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// error! 不能传入 null 或者 undefined.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> button = <span class="keyword">new</span> <span class="title class_">UIElement</span>()</span><br><span class="line">button.<span class="title function_">animate</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;ease-in&#x27;</span>)</span><br><span class="line">button.<span class="title function_">animate</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;uneasy&#x27;</span>) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>你只能从三种允许的字符中选择其一来做为参数传递，传入其它值则会产生错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Argument of type &#x27;&quot;uneasy&quot;&#x27; is not assignable to parameter of type &#x27;&quot;ease-in&quot; | &quot;ease-out&quot; | &quot;ease-in-out&quot;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 源码分析</title>
      <link href="/posts/49ae955a.html"/>
      <url>/posts/49ae955a.html</url>
      
        <content type="html"><![CDATA[<h1 id="工程化配置"><a href="#工程化配置" class="headerlink" title="工程化配置"></a>工程化配置</h1><h2 id="momorepo简介"><a href="#momorepo简介" class="headerlink" title="momorepo简介"></a>momorepo简介</h2><p>由于我们<code>React</code>库中有<code>React-dom</code>库，<code>React-native</code>库等等等，为了管理这些工程文件库可以使用<code>momorepo</code>来进行版本控制和管理</p><p>momorepo: 一种项目库的管理方式 可以很方便的协同管理不同独立的库的生命周期</p><ul><li>一些简单的工具：npm-workspace、Yarn-workspace、pnpm-workspace</li><li>专业工具：nx、bit、turborepo、rush、lerna</li></ul><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p>选择pnpm作为我们项目的包管理器</p><ul><li>安装依赖更快</li><li>解决了npm的一些疑难问题</li></ul><p>pnpm 初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pnpm</span><br><span class="line">pnpm init</span><br></pre></td></tr></table></figure><p><strong>pnpm实验momorepo：建立 <code>pnpm-workspace.yaml</code>文件去书写配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="comment"># all packages in direct subdirs of packages/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;packages/*&#x27;</span></span><br><span class="line">  <span class="comment"># all packages in subdirs of components/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;components/**&#x27;</span></span><br><span class="line">  <span class="comment"># exclude packages that are inside test directories</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;!**/test/**&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="定义开发规范"><a href="#定义开发规范" class="headerlink" title="定义开发规范"></a>定义开发规范</h2><h3 id="代码规范检查和修复"><a href="#代码规范检查和修复" class="headerlink" title="代码规范检查和修复"></a>代码规范检查和修复</h3><ul><li><p>代码规范：lint工具<br>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i eslint -D -w</span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure><p>我们只需要 eslint 给我们代码检查 而代码格式我们使用<code>prettier</code>来做</p><p>.eslintrc.json配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;es2021&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 打开和关闭</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;prettier&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;plugin:prettier/recommended&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 解析器 AST语法树</span></span><br><span class="line">  <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prettier&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prettier/prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-case-declarations&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许any</span></span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/no-explicit-any&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>代码风格：<code>prettier</code><br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i prettier -D -w</span><br></pre></td></tr></table></figure><p>新建<code>.prettierrc.json</code> 添加配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsxSingleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;endOfLine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>将prettier集成到eslint中<br><code>eslint-config-prettier:</code>覆盖ESlint本身的规则配置<br><code>eslint-plugin-prettier:</code>用Preiiter来修复代码<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-config-prettier eslint-plugin-prettier -D -w</span><br></pre></td></tr></table></figure><p>为lint增加对应的执行脚本、并验证效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./packages&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Commit规范"><a href="#Commit规范" class="headerlink" title="Commit规范"></a>Commit规范</h3><p>安装<code>husky</code>用于拦截commit命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i -D -w husky</span><br></pre></td></tr></table></figure><p>初始化husky</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky isntall</span><br></pre></td></tr></table></figure><p>将刚才执行的<code>pnpm lint</code> 纳入commit时将husky将执行的脚本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;pnpm lint&quot;</span></span><br></pre></td></tr></table></figure><p>通过<code>commitlint</code>对git提交信息进行检查 首先安装必要的库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i -D -w @commitlint/cli @commitlint/config-conventional -D -w</span><br></pre></td></tr></table></figure><p>新建配置文件<code>.commitlintrc.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集成到husky中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/commit-msg <span class="string">&quot;npx --no-install commitlint -e <span class="variable">$HUSKY_GIT_PARAMS</span>&quot;</span></span><br></pre></td></tr></table></figure><p>conventional 规规集意义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 提交的类型：摘要信息</span><br><span class="line">&lt;<span class="built_in">type</span>&gt;: &lt;subject&gt;</span><br></pre></td></tr></table></figure><p>常见的<code>type值</code></p><ul><li><code>feat</code>: 添加新功能</li><li><code>fix</code>: 修复bug</li><li><code>chore</code>: 一些不影响功能的更改</li><li><code>docs</code>: 文档的修改</li><li><code>perf</code>：性能方面的优化</li><li><code>refactor</code>: 代码重构</li><li><code>test</code>: 添加一些测试代码</li></ul><h3 id="配置-tsconfig-json"><a href="#配置-tsconfig-json" class="headerlink" title="配置 tsconfig.json"></a>配置 <code>tsconfig.json</code></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compileOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 基础路径</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./packages&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;include&quot;: [&quot;packages/index.ts&quot;],</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;packages/dist/**/*&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="选择构建工具-rollup"><a href="#选择构建工具-rollup" class="headerlink" title="选择构建工具 rollup"></a>选择构建工具 <code>rollup</code></h2><ul><li>我们项目是库 而不是业务代码</li><li>希望工具尽可能简洁 打包产物可读性更高</li></ul><p>安装rollup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i -D -w rollup</span><br></pre></td></tr></table></figure><p>下面我们先写一段代码在看如何配置打包工具</p><h1 id="JSX转换"><a href="#JSX转换" class="headerlink" title="JSX转换"></a>JSX转换</h1><p>React中项目结构：</p><ul><li>react (宿主环境无关的公用方法)</li><li>react-reconciler (协调器的实现 宿主环境无关)</li><li>各种宿主环境的包</li><li>shared (公用辅助方法 宿主环境无关)</li></ul><h2 id="JSX转换是什么"><a href="#JSX转换是什么" class="headerlink" title="JSX转换是什么"></a>JSX转换是什么</h2><p>包括两部分：</p><ul><li>编译时：(babel 有专门的parser 去解析jsx语言拓展)</li><li>运行时：jsx方法或React.createElement方法的实现(包括dev、prod)</li></ul><p>编译时由babel编译实现 我们只用实现运行时 工作量包括</p><ul><li>实现jsx方法</li><li>实现打包流程</li><li>React.createElement方法</li></ul><p><strong>React中的JSX初步实现</strong></p><p>首先将packages&#x2F;* 目录下面分成两个工程 <code>react</code>和<code>shared</code>并对应初始化，shared下面是一些共享的方法和函数 react中需要引入shared则要在package.json中存在安装</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shared&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workspace:*&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在<code>react/index.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; jsxDEV &#125; <span class="keyword">from</span> <span class="string">&#x27;./src/jsx&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">createElement</span>: jsxDEV</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>react/src/jsx.ts</code>中实现jsx的具体方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REACT_ELEMENT_TYPE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;shared/ReactSymbols&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;</span><br><span class="line">  <span class="title class_">Type</span>,</span><br><span class="line">  <span class="title class_">Key</span>,</span><br><span class="line">  <span class="title class_">Ref</span>,</span><br><span class="line">  <span class="title class_">Props</span>,</span><br><span class="line">  <span class="title class_">ElementType</span>,</span><br><span class="line">  <span class="title class_">ReactElementType</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;shared/ReactTypes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ReactElement</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: Type,</span></span><br><span class="line"><span class="params">  key: Key,</span></span><br><span class="line"><span class="params">  ref: Ref,</span></span><br><span class="line"><span class="params">  props: Props</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">ReactElementType</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> element = &#123;</span><br><span class="line">    <span class="attr">$$typeof</span>: <span class="variable constant_">REACT_ELEMENT_TYPE</span>,</span><br><span class="line">    <span class="keyword">type</span>,</span><br><span class="line">    key,</span><br><span class="line">    ref,</span><br><span class="line">    props,</span><br><span class="line">    <span class="attr">__mark</span>: <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> jsxDEV = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: ElementType,</span></span><br><span class="line"><span class="params">  config: Props</span></span><br><span class="line"><span class="params">  <span class="comment">// ...maybeChildren: any[]</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">key</span>: <span class="title class_">Key</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">ref</span>: <span class="title class_">Ref</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">props</span>: <span class="title class_">Props</span> = &#123;&#125;</span><br><span class="line">  <span class="comment">// 1. 处理 props 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">    <span class="keyword">const</span> val = config[propName]</span><br><span class="line">    <span class="keyword">if</span> (propName === <span class="string">&#x27;key&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        key = <span class="string">&#x27;&#x27;</span> + val</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (propName === <span class="string">&#x27;ref&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        ref = val</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不为原型链上的属性</span></span><br><span class="line">    <span class="keyword">if</span> (&#123;&#125;.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(config, propName)) &#123;</span><br><span class="line">      props[propName] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// const childrenLength = maybeChildren.length</span></span><br><span class="line">  <span class="comment">// if (childrenLength) &#123;</span></span><br><span class="line">  <span class="comment">//   if (childrenLength === 1) &#123;</span></span><br><span class="line">  <span class="comment">//     props.children = maybeChildren[0]</span></span><br><span class="line">  <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     props.children = maybeChildren</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ReactElement</span>(<span class="keyword">type</span>, key, ref, props)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>shared/ReactTypes.ts</code>中定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Type</span> = <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Props</span> = <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Key</span> = <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Ref</span> = <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ElementType</span> = <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ReactElementType</span> &#123;</span><br><span class="line">  <span class="attr">$$typeof</span>: <span class="built_in">symbol</span> | <span class="built_in">number</span></span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">ElementType</span></span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">Key</span> | <span class="literal">null</span></span><br><span class="line">  <span class="attr">ref</span>: <span class="title class_">Ref</span> | <span class="literal">null</span></span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">Props</span></span><br><span class="line">  <span class="attr">__mark</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ReactSybols.ts</code>中定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supporSymbol = <span class="keyword">typeof</span> <span class="title class_">Symbol</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">for</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REACT_ELEMENT_TYPE</span> = supporSymbol</span><br><span class="line">  ? <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;react.element&#x27;</span>)</span><br><span class="line">  : <span class="number">0xeac7</span></span><br></pre></td></tr></table></figure><h2 id="实现打包流程"><a href="#实现打包流程" class="headerlink" title="实现打包流程"></a>实现打包流程</h2><p><strong>实现jsx方法</strong></p><ul><li>jsxDEV方法(dev 环境)</li><li>jsx方法 (prod环境)</li><li>React.createElement方法</li></ul><p>对应上述方法打包文件</p><ul><li>react&#x2F;jsx-dev-runtime.js (dev 环境)</li><li>react&#x2F;jsx-runtime.js (prod 环境)</li><li>React</li></ul><p>现在项目根目录下面新建<code>scripts</code>文件夹</p><p>新建工具<code>scripts/utils.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ts <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescritp2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pkgPath = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../../packages&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> distPath = path.<span class="title function_">resole</span>(__dirname, <span class="string">&#x27;../../dist/node_modules&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取包路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; pakName 包名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; isDist 是否是dist目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125; 包路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">yueyun</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolvePkgPath</span>(<span class="params">pakName, isDist</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> isDist ? <span class="string">`<span class="subst">$&#123;distPath&#125;</span>/<span class="subst">$&#123;pakName&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;pkgPath&#125;</span>/<span class="subst">$&#123;pakName&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取包的package.json</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; pkgName 包名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">object</span>&#125; package.json对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">yueyun</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * const pkg = getPackageJSON(&#x27;utils&#x27;)</span></span><br><span class="line"><span class="comment"> * console.log(pkg.name) // <span class="doctag">@yueyun</span>/utils</span></span><br><span class="line"><span class="comment"> * console.log(pkg.version) // 1.0.0</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getPackageJSON</span>(<span class="params">pkgName</span>) &#123;</span><br><span class="line">    <span class="comment">// 包路径</span></span><br><span class="line">    <span class="keyword">const</span> path = <span class="string">`<span class="subst">$&#123;resolvePkgPath(pkgName)&#125;</span>/package.json`</span></span><br><span class="line">    <span class="keyword">const</span> str = fs.<span class="title function_">readFileSync</span>(path, &#123;<span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供rollup的基础插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; options 配置项</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; options.typescript typescript配置项</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">array</span>&#125; 插件数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">yueyun</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBaseRollupPlugins</span>(<span class="params">&#123; typescript = &#123;&#125; &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="title function_">ts</span>(typescript), <span class="title function_">cjs</span>()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>scripts/react.config.js</code>去处理react库的打包情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getPackageJSON, resolvePkgPath, getBaseRollupPlugins &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> generatePackageJson <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-generate-package-json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, <span class="variable language_">module</span>&#125; = <span class="title function_">getPackageJSON</span>(<span class="string">&#x27;react&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pkgPath = <span class="title function_">resolvePkgPath</span>(name)</span><br><span class="line"><span class="keyword">const</span> pkgDistPath = <span class="title function_">resolvePkgPath</span>(name, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    <span class="comment">// react</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">input</span>: <span class="string">`<span class="subst">$&#123;pkgPath&#125;</span>/<span class="subst">$&#123;<span class="variable language_">module</span>&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">output</span>: &#123;</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`<span class="subst">$&#123;pkgDistPath&#125;</span>/index.js`</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;index.js&#x27;</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            ...<span class="title function_">getBaseRollupPlugins</span>(&#123;&#125;),</span><br><span class="line">            <span class="title function_">generatePackageJSON</span>(&#123;</span><br><span class="line">                <span class="attr">inputFolder</span>: pkgPath,</span><br><span class="line">                <span class="attr">outputFolder</span>: pkgDistPath,</span><br><span class="line">                <span class="attr">baseContents</span>: <span class="function">(<span class="params">&#123;name,description,version&#125;</span>)=&gt;</span>(&#123;</span><br><span class="line">                    name,</span><br><span class="line">                    description,</span><br><span class="line">                    version,</span><br><span class="line">                    <span class="attr">main</span>: <span class="string">&#x27;index.js&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">input</span>: <span class="string">`<span class="subst">$&#123;pkgPath&#125;</span>/src/jsx.ts`</span>,</span><br><span class="line">        <span class="attr">output</span>: [</span><br><span class="line">          <span class="comment">// jsx-runtime</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`<span class="subst">$&#123;pkgDistPath&#125;</span>/jsx-runtime.js`</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;jsx-runtime.js&#x27;</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// jax-dev-runtime</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`<span class="subst">$&#123;pkgDistPath&#125;</span>/jsx-dev-runtime.js`</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;jsx-dev-runtime.js&#x27;</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">plugins</span>: <span class="title function_">getBaseRollupPlugins</span>(&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在根目录的<code>package.json</code>下面添加打包的命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rm -rf ./dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./packages&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm run clean &amp;&amp; rollup --bundleConfigAsCjs --config scripts/rollup/react.config.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>打包后的文件目录如下所示</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/react/01.png"></p><h2 id="调式打包结果"><a href="#调式打包结果" class="headerlink" title="调式打包结果"></a>调式打包结果</h2><p><a href="https://pnpm.io/cli/link">Pnpm link文档</a></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/react/02.png"></p><h1 id="Reconciler"><a href="#Reconciler" class="headerlink" title="Reconciler"></a>Reconciler</h1><p>reconciler是React核心逻辑所在的模块、意思是协调器、协调</p><h2 id="Reconciler有什么用"><a href="#Reconciler有什么用" class="headerlink" title="Reconciler有什么用"></a>Reconciler有什么用</h2><p><code>jQuery</code>工作原理(过程驱动)：<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/react/03.png"></p><p>前端框架结构与工作原理(状态驱动):<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/react/04.png"></p><ul><li>消费JSX</li><li>没有编译优化</li><li>开放通用API供不同的宿主环境使用</li></ul><h2 id="核心模块消费JSX的过程"><a href="#核心模块消费JSX的过程" class="headerlink" title="核心模块消费JSX的过程"></a>核心模块消费JSX的过程</h2><h3 id="核心模块操作的数据结构"><a href="#核心模块操作的数据结构" class="headerlink" title="核心模块操作的数据结构"></a>核心模块操作的数据结构</h3><p>当前已知的数据结构：<code>ReactElement</code></p><p>React Element 如果作为核心模块操作的数据结构存在的问题：  </p><ul><li>无法表达节点之间的关系</li><li>字段有限不能更容易的拓展(比如无法表达状态)</li></ul><p>所以需要一种新的数据结构 它的特点如下：  </p><ul><li>介于React Element与真实UI节点之间</li><li>能够表达节点之间的关系</li><li>方便拓展 (不仅能作为数据存储单元，也能作为工作单元)</li></ul><p>这就是<strong>FiberNode</strong>（虚拟<strong>DOM</strong>在React中的实现）</p><p>当前了解的节点类型：</p><ul><li>JSX</li><li>React Element</li><li>FiberNode</li><li>DOM Element</li></ul><h2 id="reconciler的工作方式"><a href="#reconciler的工作方式" class="headerlink" title="reconciler的工作方式"></a>reconciler的工作方式</h2><p>对于同一个节点，比较其<code>ReactElement</code>与<code>fiberNode</code>,生成子<code>fiberNode</code> 并根据比较的结果生成不同的标记(插入、删除、移动…..)，对应不同<strong>宿主环境API</strong>的执行</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/react/05.png"></p><p>比如 挂载<code>&lt;div&gt;&lt;/div&gt;</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React Element &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="title function_">jsx</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"><span class="comment">// 对应fiberNode</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="comment">// 生成子fiberNode</span></span><br><span class="line"><span class="comment">// 对应标记</span></span><br><span class="line"><span class="title class_">Placement</span></span><br></pre></td></tr></table></figure><p>将<code>&lt;div&gt;&lt;/div&gt;</code>更新为<code>&lt;p&gt;&lt;/p&gt;</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React Element &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="title function_">jsx</span>(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="comment">// 对应的fiberNode为</span></span><br><span class="line"><span class="title class_">FiberNode</span>(<span class="attr">type</span>: <span class="string">&quot;div&quot;</span>)</span><br><span class="line"><span class="comment">// 生成子fiberNode</span></span><br><span class="line"><span class="comment">// 对应标记</span></span><br><span class="line"><span class="title class_">Deletion</span> <span class="title class_">Placement</span></span><br></pre></td></tr></table></figure><p>当所有的React Element比较完全后 会生成一个fiberNode树 一共会存在两颗fiberNode树：</p><ul><li>current：与视图中真实UI对应的fiberNode</li><li>workInProgress：触发更新后、正在reconciler中计算的fiberNode树</li></ul><h2 id="JSX消费顺序"><a href="#JSX消费顺序" class="headerlink" title="JSX消费顺序"></a>JSX消费顺序</h2><p>DFS深度优先遍历与BFS广度优先遍历详解</p><p>以DFS(深度优先遍历)的顺序遍历<code>React Element</code> 这意味着</p><ul><li><p>如果有子节点，遍历子节点</p></li><li><p>如果没有子节点，遍历兄弟节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>MyReact<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这是一个递归的过程、存在递、归两个阶段：  </p><ul><li>递：对应beginWork</li><li>归：对应completeWork</li></ul><p>我们新建一个<code>packages/react-reconciler</code>包去实现协调器</p><p>建立<code>packages/react-reconciler/filber.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Props</span>, <span class="title class_">Key</span>, <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;shared/ReactTypes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WorkTag</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./workTags&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Flags</span>, <span class="title class_">NoFlags</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./fiberFlags&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FiberNode</span> &#123;</span><br><span class="line">    <span class="comment">// 元素类型</span></span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 代表fiber的类型</span></span><br><span class="line">    <span class="attr">tag</span>: <span class="title class_">WorkTag</span></span><br><span class="line">    <span class="comment">// 代表fiber属性</span></span><br><span class="line">    <span class="attr">pendingProps</span>: <span class="title class_">Props</span></span><br><span class="line">    <span class="attr">key</span>:<span class="title class_">Key</span></span><br><span class="line">    <span class="comment">// 表示fiber对应的真实DOM节点</span></span><br><span class="line">    <span class="attr">stateNode</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 指向父fiberNode</span></span><br><span class="line">    <span class="attr">return</span>: <span class="title class_">FiberNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 指向兄弟fiberNode</span></span><br><span class="line">   <span class="attr">sibling</span>: <span class="title class_">FiberNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 指向子fiberNode</span></span><br><span class="line">    <span class="attr">child</span>: <span class="title class_">FiberNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 表示当前fiber在父fiber中的位置</span></span><br><span class="line">    <span class="attr">index</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">ref</span>: <span class="title class_">Ref</span></span><br><span class="line">    <span class="comment">// 表示fiber的属性</span></span><br><span class="line">    <span class="attr">memoizedProps</span>: <span class="title class_">Props</span> | <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 表示fiber的上一次渲染的fiber</span></span><br><span class="line">    <span class="attr">alternate</span>: <span class="title class_">FiberNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 表示fiber的状态</span></span><br><span class="line">    <span class="attr">flags</span>: <span class="title class_">Flags</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">tag:WorkTag, pendingProps: Props, key: Key</span>) &#123;</span><br><span class="line">        <span class="comment">// 实例属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tag</span> = tag</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">key</span> = key</span><br><span class="line">        <span class="comment">// HostComponent &lt;div&gt; div DOM</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stateNode</span> = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// FunctionComponent ()=&gt;&#123;&#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 构成树形结构</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">return</span> = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sibling</span> = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">child</span> = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">index</span> = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ref</span> = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 作为工作单元</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pendingProps</span> = pendingProps</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">memoizedProps</span> = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 缓冲树</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">alternate</span> = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">flags</span> = <span class="title class_">NoFlags</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立<code>fiberFlags.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Flags</span> = <span class="built_in">number</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoFlags</span> = <span class="number">0b0000001</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Placement</span> = <span class="number">0b0000010</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Update</span> = <span class="number">0b0000100</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ChildDeletion</span> = <span class="number">0b0001000</span></span><br></pre></td></tr></table></figure><p>建立<code>workTags.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">WorkTag</span> = </span><br><span class="line">  | <span class="keyword">typeof</span> <span class="title class_">FunctionComponent</span></span><br><span class="line">  | <span class="keyword">typeof</span> <span class="title class_">HostRoot</span></span><br><span class="line">  | <span class="keyword">typeof</span> <span class="title class_">HostComponent</span></span><br><span class="line">  | <span class="keyword">typeof</span> <span class="title class_">HostText</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">FunctionComponent</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostRoot</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostComponent</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostText</span> = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>现在定义工作函数</p><p>建立<code>src/beginWork.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归中的递阶段</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FiberNode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./fiber&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">beginWork</span> = (<span class="params">fiber:FiberNode</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beginWork&#x27;</span>, fiber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立<code>src/completeWork.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FiberNode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./fiber&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">completeWork</span> = (<span class="params">fiber:FiberNode</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;completeWork&#x27;</span>,fiber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立<code>src/workLoop.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FiberNode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./fiber&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; completeWork &#125; <span class="keyword">from</span> <span class="string">&#x27;./completeWork&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; beginWork &#125; <span class="keyword">from</span> <span class="string">&#x27;./beginWork&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">workInProgress</span>: <span class="title class_">FiberNode</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberNode</span>&#125; <span class="variable">fiber</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">yueyun</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prepareFreshStatck</span> (<span class="attr">fiber</span>: <span class="title class_">FiberNode</span>) &#123;</span><br><span class="line">    workInProgress = fiber</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root &#123;FiberNode&#125; 根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 渲染根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * renderRoot(root)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">yueyun</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderRoot</span> (<span class="attr">root</span>: <span class="title class_">FiberNode</span>) &#123;</span><br><span class="line">    <span class="title function_">prepareFreshStatck</span>(root)</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="title function_">workLoop</span>()</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;workLoop发生错误&#x27;</span>, err)</span><br><span class="line">          workInProgress = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 通过workInProgress遍历fiber树 处理当前的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoop</span> () &#123;</span><br><span class="line">    <span class="keyword">while</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title function_">performUnitOfWork</span>(workInProgress)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberNode</span>&#125; fiber 当前的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 处理当前的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">yueyun</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">performUnitOfWork</span> (<span class="attr">fiber</span>:<span class="title class_">FiberNode</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> next = <span class="title function_">beginWork</span>(fiber)</span><br><span class="line">    <span class="comment">//状态更新和渲染 memoizedProps该 Fiber 节点上次渲染时使用的 props。它是“记忆化”的 props，用于比较和避免不必要的重渲染。</span></span><br><span class="line">  <span class="comment">//pendingProps 这个属性存储了即将用于渲染的新 props。当组件接收到新的 props 时，这些新的 props 首先被设置到 pendingProps 上。</span></span><br><span class="line">    fiber.<span class="property">memoizedProps</span> = fiber.<span class="property">pendingProps</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//递归向上回溯 直到遍历完整个 Fiber 树或者达到树的顶端</span></span><br><span class="line">        <span class="title function_">completeUnitOfWork</span>(fiber)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        workInProgress = next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberNode</span>&#125; fiber 当前的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 递归向上回溯 直到遍历完整个 Fiber 树或者达到树的顶端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">yueyun</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">completeUnitOfWork</span>(<span class="params">fiber: FiberNode</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">node</span>: <span class="title class_">FiberNode</span> | <span class="literal">null</span> = fiber</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="title function_">completeWork</span>(node)</span><br><span class="line">    <span class="keyword">const</span> sibling = node.<span class="property">sibling</span></span><br><span class="line">    <span class="keyword">if</span> (sibling !== <span class="literal">null</span>) &#123;</span><br><span class="line">      workInProgress = sibling</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    node = node.<span class="property">return</span></span><br><span class="line">    workInProgress = node</span><br><span class="line">  &#125; <span class="keyword">while</span> (node !== <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何触发更新"><a href="#如何触发更新" class="headerlink" title="如何触发更新"></a>如何触发更新</h2><p>常见的触发更新的方式：</p><ul><li><code>ReactDom.createRoot().render</code> (或者老版的<code>ReactDom.render</code>)</li><li><code>this.setState</code></li><li><code>useState</code>中的<code>dispatch</code>方法</li></ul><p>我们希望实现一套同一的更新机制 他们的特点是</p><ul><li>兼容上述触发更新的方式</li><li>方便后续扩展(优先级机制…)</li></ul><h3 id="更新机制的组成部分"><a href="#更新机制的组成部分" class="headerlink" title="更新机制的组成部分"></a>更新机制的组成部分</h3><ul><li>代表更新的数据结构 – <code>Update</code></li><li>消费Update的数据结构 – <code>UpdateQueue</code></li></ul><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/react/06.png"></p><p>现在先简单的实现一个update的机制</p><p>新建<code>src/updateQueue.ts</code></p><p><code>Action</code>的类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Action</span>&lt;<span class="title class_">State</span>&gt; = <span class="title class_">State</span> | (<span class="function">(<span class="params">prevState:State</span>) =&gt;</span> <span class="title class_">State</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Action</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;shared/ReactTypes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *Update数据结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> action function | any</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Update</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用于更新状态的数据结构接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Update</span>&lt;<span class="title class_">State</span>&gt; &#123;</span><br><span class="line">    <span class="attr">action</span>: <span class="title class_">Action</span>&lt;<span class="title class_">State</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UpdateQueue数据结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shared &#123; pending: Update&lt;State&gt; | null &#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">UpdateQueue</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用于存储待处理的更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UpdateQueue</span>&lt;<span class="title class_">State</span>&gt; &#123;</span><br><span class="line">    <span class="attr">shared</span>: &#123;</span><br><span class="line">        <span class="attr">pending</span>: <span class="title class_">Update</span>&lt;<span class="title class_">State</span>&gt; | <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> Action&lt;State&gt; function | any</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@returns</span> &#123;<span class="type">Update&lt;State&gt;</span>&#125;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@description</span> 泛型函数接受一个Action&lt;State&gt;类型的参数，返回一个Update&lt;State&gt;类型的对象用于创建一个新的更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createUpdate = &lt;<span class="title class_">State</span>&gt;(<span class="attr">action</span>: <span class="title class_">Action</span>&lt;<span class="title class_">State</span>&gt;): <span class="title class_">Update</span>&lt;<span class="title class_">State</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        action</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@returns</span> &#123;<span class="type">UpdateQueue&lt;Action&gt;</span>&#125;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@description</span> 创建一个新的更新队列 被初始化为一个为null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createUpdateQueue = &lt;<span class="title class_">Action</span>&gt;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">shared</span>: &#123;</span><br><span class="line">            <span class="attr">pending</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">as</span> <span class="title class_">UpdateQueue</span>&lt;<span class="title class_">Action</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> updateQueue UpdateQueue&lt;Action&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> update Update&lt;Action&gt;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@description</span> 将更新添加到更新队列中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enqueueUpdate = &lt;<span class="title class_">Action</span>&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">updateQueue: UpdateQueue&lt;Action&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    update: Update&lt;Action&gt;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">    updateQueue.<span class="property">shared</span>.<span class="property">pending</span> = update</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> baseState State 基础状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pendingUpdate Update&lt;State&gt; | null 待处理的更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">State</span>&#125; <span class="variable">memoizedState</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 泛型函数处理更新队列 接受一个基础状态和可能的更新 返回更新后的状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> processUpdateQueue = &lt;<span class="title class_">State</span>&gt;(</span><br><span class="line"><span class="attr">baseState</span>: <span class="title class_">State</span>,</span><br><span class="line">    <span class="attr">pendingUpdate</span>: <span class="title class_">Update</span>&lt;<span class="title class_">State</span>&gt; | <span class="literal">null</span></span><br><span class="line">): &#123; <span class="attr">memoizedState</span>: <span class="title class_">State</span> &#125; =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">result</span>: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> processUpdateQueue&lt;<span class="title class_">State</span>&gt;&gt; = &#123;</span><br><span class="line">        <span class="attr">memorizedState</span>: baseState</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pendingUpdate !== <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">const</span> action = pendingUpdate.<span class="property">action</span></span><br><span class="line">        <span class="keyword">if</span>(action <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">            result.<span class="property">memoizedState</span> = <span class="title function_">action</span>(baseState)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="property">memoizedState</span> = action</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现<code>mount</code>时调用的API</li><li>将该API接入上述更新机制中</li></ul><p>需要考虑的事情：  </p><ul><li>更新可能发生于任意的组件，而更新流程是从根节点递归的</li><li>需要一个统一的根节点保存通用信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">createRoot</span>(rootElement).<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/react/07.png"></p><p>首先实现<code>FiberRootNode</code>的数据结构 在<code>fiber.ts</code>中继续添加</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Container</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;hostConfig&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Container</span>&#125; container 宿主容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberNode</span>&#125; hostRootFiber 根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> FiberRootNode数据结构</span></span><br><span class="line"><span class="comment"> * 包含的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@argument</span> container: 宿主容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@argument</span> current: 当前的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@argument</span> finishiedWork: 已经完成的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">FiberRootNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FiberRootNode</span> &#123;</span><br><span class="line">    <span class="attr">container</span>:<span class="title class_">Container</span></span><br><span class="line">    <span class="attr">current</span>: <span class="title class_">FiberNode</span></span><br><span class="line">    <span class="attr">finishiedWork</span>: <span class="title class_">FiberNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">container:Container,hostRootFiber: FiberNode</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">current</span> = hostRootFiber</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">container</span> = container</span><br><span class="line">        hostRootFiber.<span class="property">stateNode</span> = <span class="variable language_">this</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">finishiedWork</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>src/fiberReconciler.ts</code>文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HostRoot</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./workTags&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Container</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;hostConfig&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FiberNode</span>, <span class="title class_">FiberRootNode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./fiber&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UpdateQueue</span>, createUpdate, createUpdateQueue, enqueueUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;./updateQueue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactElementType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;shared/ReactTypes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; scheduleUpdateOnFiber &#125; <span class="keyword">from</span> <span class="string">&#x27;./workLoop&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Container</span>&#125; container 容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 创建容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">FiberRootNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createContainer</span> (<span class="attr">container</span>:<span class="title class_">Container</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hostRoot = <span class="keyword">new</span> <span class="title class_">FiberNode</span>(<span class="title class_">HostRoot</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">FiberRootNode</span>(container,hostRoot)</span><br><span class="line">    hostRoot.<span class="property">updateQueue</span> = createUpdateQueue</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ReactElementType | null</span>&#125; element 用于更新的React元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberRootNode</span>&#125; root FiberRootNode 根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用新的react元素更新容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">ReactElementType | null</span>&#125; 返回更新后的React元素</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateContainer</span> (</span><br><span class="line"><span class="attr">element</span>: <span class="title class_">ReactElementType</span> | <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">root</span>: <span class="title class_">FiberRootNode</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">const</span> hostRootFiber = root.<span class="property">current</span></span><br><span class="line">    <span class="keyword">const</span> update = createUpdate&lt;<span class="title class_">ReactElementType</span> | <span class="literal">null</span>&gt;(element)</span><br><span class="line">    <span class="comment">// 将更添加到更新队列中</span></span><br><span class="line">    <span class="title function_">enqueueUpdate</span>(</span><br><span class="line">    hostRootFiber.<span class="property">updateQueue</span> <span class="keyword">as</span> <span class="title class_">UpdateQueue</span>&lt;<span class="title class_">ReactElementType</span> | <span class="literal">null</span>&gt;,</span><br><span class="line">        update</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 调度更新</span></span><br><span class="line">    <span class="title function_">scheduleUpdateOnFiber</span>(hostRootFiber)</span><br><span class="line">    <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>workLoop.ts</code>中的部分内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWorkInProgress &#125; <span class="keyword">from</span> <span class="string">&#x27;./fiber&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prepareFreshStack</span> (<span class="attr">root</span>: <span class="title class_">FiberRootNode</span>) &#123;</span><br><span class="line">    workInProgress = <span class="title function_">createWorkInProgress</span>(root.<span class="property">current</span>, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberNode</span>&#125; <span class="variable">fiber</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 调度更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">scheduleUpdateOnFiber</span>(<span class="params">fiber: FiberNode</span>) &#123;</span><br><span class="line">  <span class="comment">// Todo 调度功能</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scheduleUpdateOnFiber&#x27;</span>, fiber)</span><br><span class="line">  <span class="keyword">const</span> root = <span class="title function_">makeUpdateFromFiberToRoot</span>(fiber)</span><br><span class="line">  <span class="title function_">renderRoot</span>(root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberNode</span>&#125; <span class="variable">fiber</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 从Fiber节点到根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">FiberRootNode | null</span>&#125; 返回根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">makeUpdateFromFiberToRoot</span>(<span class="params">fiber: FiberNode</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;makeUpdateFromFiberToRoot&#x27;</span>, fiber)</span><br><span class="line">  <span class="keyword">let</span> node = fiber</span><br><span class="line">  <span class="keyword">let</span> parent = fiber.<span class="property">return</span></span><br><span class="line">  <span class="keyword">if</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node = parent</span><br><span class="line">    parent = node.<span class="property">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">tag</span> === <span class="title class_">HostRoot</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">stateNode</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>fiber.ts</code>中新增加<code>createWorkInProgress函数</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">FiberNode</span>&#125; current 当前的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Props</span>&#125; pendingProps 表示fiber的属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 创建一个新的工作单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">FiberNode</span>&#125;</span></span><br><span class="line"><span class="comment"> * wip: work in progress 工作单元 用于更新的数据结构 wip是current的备份 双缓冲技术</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createWorkInProgress = (</span><br><span class="line">    <span class="attr">current</span>: <span class="title class_">FiberNode</span>,</span><br><span class="line">    <span class="attr">pendingProps</span>: <span class="title class_">Props</span></span><br><span class="line">):<span class="function"><span class="params">FiberNode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wip = current.<span class="property">alternate</span></span><br><span class="line">    <span class="keyword">if</span> (wip === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// mount</span></span><br><span class="line">        wip = <span class="keyword">new</span> <span class="title class_">FiberNode</span>(current.<span class="property">tag</span>, pendingProps, current.<span class="property">key</span>)</span><br><span class="line">        wip.<span class="property">type</span> = current.<span class="property">type</span></span><br><span class="line">        wip.<span class="property">stateNode</span> = current.<span class="property">stateNode</span></span><br><span class="line">        wip.<span class="property">alternate</span> = current</span><br><span class="line">        current.<span class="property">alternate</span> = wip</span><br><span class="line">    &#125; esle &#123;</span><br><span class="line">        <span class="comment">// update</span></span><br><span class="line">        wip.<span class="property">pendingProps</span> = pendingProps</span><br><span class="line">        wip.<span class="property">flags</span> = <span class="title class_">NoFlags</span></span><br><span class="line">        wip.<span class="property">updateQueue</span> = current.<span class="property">updateQueue</span></span><br><span class="line">        wip.<span class="property">child</span> = current.<span class="property">child</span></span><br><span class="line">        wip.<span class="property">memoizedProps</span> = current.<span class="property">memoizedProps</span></span><br><span class="line">        wip.<span class="property">memoizedState</span> = current.<span class="property">memoizedState</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native开坑</title>
      <link href="/posts/938f2f9c.html"/>
      <url>/posts/938f2f9c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode常用插件和配置</title>
      <link href="/posts/34b82b37.html"/>
      <url>/posts/34b82b37.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见前端面试题详解</title>
      <link href="/posts/8b326882.html"/>
      <url>/posts/8b326882.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="/posts/317b894e.html"/>
      <url>/posts/317b894e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-认识"><a href="#Vue-认识" class="headerlink" title="Vue 认识"></a>Vue 认识</h1><p>渐进式的 JS 框架，关注视图层，数据驱动<br>初始 vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>helloworld,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后会在浏览器上打印 helloworld，vue 1.想让 vue 工作，就必须创建一个 vue 实例，且要传入一个配置对象<br>2.root 里的容器依然符合 html 代码的规范，新加入了一些特殊的 vue 语法<br>3.root 容器里面的代码称之为[vue 模板] (templete)<br>4.Vue 实例和容器是一一对应的 5.脚手架是只有一个 vue 实例，配合组件一起使用 6.中要写 js 表达式,xxx 可以自动的读取到 data 中的所有属性 7.一旦 data 中的数据发生变化，页面中用到该数据的地方也会自动更新</p><blockquote><p>JS 表达式 和 JS 代码(语句) 1.表达式: 一个表达式会产生一个值，可以放在任何一个需要值的地方:<br>exp: a a+b test(1) a&#x3D;&#x3D;b ? ‘a’ : ‘b’ 2.代码 : js 语句<br>exp: if () {…} for(){…}</p></blockquote><h1 id="Vue-模板语法"><a href="#Vue-模板语法" class="headerlink" title="Vue 模板语法"></a>Vue 模板语法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>helloworld,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;gumisa.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;gumisa.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url.toUpperCase()&quot;</span>&gt;</span>点我去月晕的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind作用 将标签属性改成js表达式  v-bind:=====&gt;: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;gumisa.url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;vue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;https://blog.apprehen.space/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gumisa</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>: <span class="string">&#x27;♀&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fbaike.baidu.com%2Ftashuo%2Fbrowse%2Fcontent%3Fid%3Df24f0a8054a35a347f0c089c&amp;psig=AOvVaw0HW4oaUzGDeJMMHRz42zpZ&amp;ust=1677555645426000&amp;source=images&amp;cd=vfe&amp;ved=0CBAQjRxqFwoTCIjg5vTjtP0CFQAAAAAdAAAAABAE&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 模板语法有两大类:</p><p>1.插值语法:</p><p>​ 功能:用于解析标签体内容。</p><p>​ 写法:<code>&#123;&#123;xxx&#125;&#125;</code>,xxx 是 js 表达式,且可以直接读取到 data 中的所有属性。</p><p>2.指令语法:</p><p>​ 功能:用于解析标签(包括:标签属性，标签体内容，绑定事件……)。</p><p>​ 举例:v-bind:href&#x3D;’xxx’ 或 简写为 :href&#x3D;”xxx”,xxx 同样要写 js 表达式且可以直接读取到 data 中的所有属性。</p><p>​ 备注:Vue 中有很多的指令，且形式都是：v-???，此处我们只是拿 v-bind 举个例子</p><h1 id="Vue-数据绑定"><a href="#Vue-数据绑定" class="headerlink" title="Vue 数据绑定"></a>Vue 数据绑定</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 普通写法 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">  单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 中有两种数据绑定的方式: 1.单向绑定(v-bind): 数据只能从 data 流向页面 2.双向绑定(v-model): 数据不仅能从 data 流向页面，还可以从页面流向 data<br>备注： 1.双向绑定一般都应用在表单类元素上(如：input,select 等)<br>2.v-model:value 可以简写为 v-model，因此 v-model 默认收集的就是 value 值</p><h1 id="Vue-中的-el-和-data-的写法"><a href="#Vue-中的-el-和-data-的写法" class="headerlink" title="Vue 中的 el 和 data 的写法"></a>Vue 中的 el 和 data 的写法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>data 和 el 有两种写法<br>1.el 的两种写法<br>(1) new Vue 时候配置 el 属性<br>(2) 先创建 Vue 实例, 随后再通过 vm.$mount(‘#root’)指定 el 的值<br>2.data 的两种写法<br>（1）对象式<br>（2）函数式 (一般选择函数式) 3.一个重要原则<br>有 Vue 管理的函数，一定不要写箭头函数，一旦写了箭头函数，this 就不再是 Vue 实例了</p><h1 id="MVVM-模型"><a href="#MVVM-模型" class="headerlink" title="MVVM 模型"></a>MVVM 模型</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>gumisa<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;gumisa.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>megumi<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;megumi.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gumisa</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">sex</span>: <span class="string">&#x27;♀&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">megumi</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">sex</span>: <span class="string">&#x27;♀&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MVVM 模型<br>1.M：模型(Model)：deta 中的数据<br>2.V：视图(View)：模板代码<br>3.VM：视图模型(ViewModel)：Vue 实例</p><blockquote><p>1.data 中的所有属性,最后都出现在了 vm 身上.</p><p>2.vm 身上所有的属性 及 Vue 原型上所有属性，在 Vue 模板中都可以直接使用。</p></blockquote><h1 id="Vue-中的数据代理"><a href="#Vue-中的数据代理" class="headerlink" title="Vue 中的数据代理"></a>Vue 中的数据代理</h1><p>数据代理：通过一个对象对另外一个对象的操作(读&#x2F;写)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">x</span>:<span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> obj2 = &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">y</span>:<span class="number">200</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">         get () &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> obj.<span class="property">x</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">         set (value) &#123;</span></span><br><span class="line"><span class="language-javascript">         obj.<span class="property">x</span> = value</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.Vue 中的数据代理：<br>通过 vm 对象来代理 data 对象中的属性的操作(读&#x2F;写)<br>2.Vue 中数据代理的好处:<br>更方便的操作 data 中的数据 3.基本原理:<br>通过 object.defineProperty()把 data 对象中的所有属性添加到 vm 上<br>为每一个 vm 添加的属性，都指定一个 getter&#x2F;setter<br>在 getter&#x2F;setter 内部去操作(读&#x2F;写)data 中对应的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>名称:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄:&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">const vm = new Vue(&#123; el: &#x27;#root&#x27;, data: &#123; name: &#x27;gumisa&#x27;, age: 18 &#125; &#125;)</span><br></pre></td></tr></table></figure><h1 id="Vue-中的事件代理"><a href="#Vue-中的事件代理" class="headerlink" title="Vue 中的事件代理"></a>Vue 中的事件代理</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showinfo&quot;</span>&gt;</span>点我提示信息(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showinfo2($event,18)&quot;</span>&gt;</span>点我提示信息(传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;gumisa&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showinfo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showinfo2</span>(<span class="params">event, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event, age)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件的基本使用： 1.使用 v-on:xxx 或 @xxx 绑定事件, 其中 xxx 是事件名 2.事件的回调需要配置在 methods 对象中,最终会在 vm 上<br>3.methods 中配置的函数，不要使用箭头函数,否则 this 不将是 vm<br>4.methods 中配置的函数，都是被 vue 管理的函数，this 的指向是 vm 或 组件实例对象<br>5.@click &#x3D; “test” 和 @click&#x3D;”test($event)” 效果一致,但后者可以传参<br>Vue 中的事件修饰符<br>1.prevent：阻止默认事件(常用)<br>2.stop：阻止事件冒泡(常用)<br>3.once：事件只触发一次(常用)<br>4.capture：使用事件的捕获模式<br>5.self：只有 event.target 是当前操作的元素时才触发事件<br>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕<br>1.Vue 中常见的按键<br>回车&#x3D;&#x3D;&gt; enter<br>删除&#x3D;&#x3D;&gt; delete (捕获”删除”和”退格”键)<br>退出&#x3D;&#x3D;&gt; esc<br>空格&#x3D;&#x3D;&gt; space<br>换行&#x3D;&#x3D;&gt; tab (特殊：必须配合 keydown 去使用)<br>上 &#x3D;&#x3D;&gt; up<br>下 &#x3D;&#x3D;&gt; down<br>左 &#x3D;&#x3D;&gt; left<br>右 &#x3D;&#x3D;&gt; right<br>2.Vue 未提供别名的按键，可以使用按键原始的 key 值去绑定，但注意要转为 kebab-case(短横线命名) 3.系统修饰键(用法特殊)：ctrl,alt,shift,meta<br>(1).配合 keyup 使用：按下修饰键的同时，再按下其他键，随后释放其他键，事情才会被触发<br>(2).配合 keydown 使用：正常触发事件 4.也可以使用 keyCode 去指定具体的按键(不推荐)<br>5.Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</p><h1 id="Vue-中的计算属性"><a href="#Vue-中的计算属性" class="headerlink" title="Vue 中的计算属性"></a>Vue 中的计算属性</h1><p>插值语法实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;firstname&#125;&#125;-&#123;&#123;lastname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstname</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastname</span>: <span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>methods 实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullname()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstname</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastname</span>: <span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fullname</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstname</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastname</span>: <span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullname</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//get什么时候调用？1.初次读取fullName时.2.所依赖的数据发生改变时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//console.log(this) //此处的this是vm</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//get什么时候调用？当fullName被修改时.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, value)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">firstname</span> = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">lastname</span> = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性： 1.定义：要用的属性不存在，要通过已有属性计算来。 2.原理：底层借助了 Object.defineproperty 方法提供的 getter 和 setter<br>3.get 函数什么时候执行？<br>(1).初次读取时执行一次<br>(2).当依赖的数据发生改变时会被再次调用 4.优势：与 methods 实现相比，内部有缓存机制(复用),效率更高，调试方便 5.备注： 1.计算属性最终会出现在 vm 上，直接读取使用即可。 2.如果计算属性要被修改，那必须写 set 函数去响应修改，且 set 中要引起计算时依赖的数据发生<br>简写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123; //完整写法 /*fullname: &#123; get() &#123; console.log(&#x27;get被调用了&#x27;) return</span><br><span class="line">this.firstname + &#x27;-&#x27; + this.lastname &#125;, set(value) &#123; console.log(&#x27;set&#x27;, value)</span><br><span class="line">const arr = value.split(&#x27;-&#x27;) this.firstname = arr[0] this.lastname = arr[1] &#125;</span><br><span class="line">&#125;*/ //简写 fullname() &#123; console.log(&#x27;get被调用&#x27;) return this.firstname + &#x27;-&#x27; +</span><br><span class="line">this.lastname &#125; &#125;</span><br></pre></td></tr></table></figure><h1 id="Vue-监视属性"><a href="#Vue-监视属性" class="headerlink" title="Vue 监视属性"></a>Vue 监视属性</h1><p>普通实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 watch 实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*watch: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            isHot: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                immediate:true,//初始化时让handler调用一下</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //handler什么时候调用，当isHot发生改变时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    console.log(&#x27;isHot的值被修改了&#x27;, newValue, oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;,*/</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//handler什么时候调用，当isHot发生改变时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot的值被修改了&#x27;</span>, newValue, oldValue)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监视属性 watch 1.当被监视的属性变化时，回调函数自动调用，进行相关操作 2.监视的属性必须存在，才能进行监视 3.监视的两种方法<br>(1): new Vue 时传入 watch 配置<br>(2): 通过 vm.$watch 监视</p><p>深度监视</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">numbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">b</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//immediate:true,//初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//handler什么时候调用，当isHot发生改变时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot的值被修改了&#x27;</span>, newValue, oldValue)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;numbers.a&#x27;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a被改变了捏&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">numbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>深度监视：</p><ol><li>Vue 中的 watch 默认不监测对象内部值的改变(一层)</li><li>配置<code>deep:true</code> 可以监测对象内部值改变(多层)</li></ol><p>备注：<br>1.Vue 自身可以监测对象内部值的改变,但默认不可以 2.使用 watch 时根据数据的具体结构，决定是否采用深度监视</p><p>监视属性简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*isHot: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // deep:true,//深度监视</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // immediate:true,//初始化时让handler调用一下</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //handler什么时候调用，当isHot发生改变时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    console.log(&#x27;isHot的值被修改了&#x27;, newValue, oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;,*/</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*isHot(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                console.log(&#x27;isHot的值被修改了&#x27;, newValue, oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;*/</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>computed 和 watch 之间的区别：<br>1.computed 能完成的功能，watch 都可以完成<br>2.watch 能完成的功能，computed 不一定能完成，例如：watch 可以进行异步操作。<br>两个重要的小原则： 1.所被 Vue 管理的函数，最好写成普通函数，这 this 的指向才是 vm 或者 组件实例对象 2.所有不被 Vue 所管理的函数(定时器的回调函数，ajax 的回调函数等，promise 的回调函数)，最好写成箭头函数.这样 this 的指向才是 vm 或组件实例对象</p><h1 id="Vue-样式绑定"><a href="#Vue-样式绑定" class="headerlink" title="Vue 样式绑定"></a>Vue 样式绑定</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定class样式--字符串写法，使用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定，名字也不确定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定，名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;Explosion！！&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">classArr</span>: [<span class="string">&#x27;atguigu1&#x27;</span>, <span class="string">&#x27;atguigu2&#x27;</span>, <span class="string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">classObj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">atguigu1</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">styleObj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//backgroundColor: &#x27;grey&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">styleObj2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;grey&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">styleArr</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//backgroundColor: &#x27;grey&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">backgroundColor</span>: <span class="string">&#x27;grey&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeMood</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//实现随机获取</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>, <span class="string">&#x27;sad&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定样式：<br>1.class 样式<br>写法：<code>class=&quot;xxx&quot;</code> xxx 可以是字符串，对象，数组。<br>字符串写法适用于：类名不确定，要动态获取。<br>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。<br>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。<br>2.style 样式<br><code>:style=&quot;&#123;fontSize:xxx&#125;&quot;</code>其中 xxx 是动态值。<br><code>:style=&quot;[a,b]&quot;</code>其中 a，b 是样式对象</p><h1 id="Vue-条件渲染"><a href="#Vue-条件渲染" class="headerlink" title="Vue 条件渲染"></a>Vue 条件渲染</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前n的值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用v-show做条件渲染--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h2 v-show=&quot;1===1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用V-if做条件渲染 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h2 v-if=&quot;1===1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;div v-if=&quot;n===1&quot;&gt;Angular&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div v-else-if=&quot;n===2&quot;&gt;React&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div v-else-if=&quot;n===3&quot;&gt;Vue&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n===1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>gumisa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>toko<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">n</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>条件渲染:</p><p>1.v-if</p><p>写法：</p><p>​ (1).v-if&#x3D;”表达式”</p><p>​ (2).v-else-if&#x3D;”表达式”</p><p>​ (3).v-else&#x3D;”表达式”</p><p>​ 适用于：切换频率较低的场景。</p><p>​ 特点：不展示的 DOM 元素直接被移除。</p><p>​ 注意：v-if 可以和:v-else-if,v-else 一起使用，但要求结构不能被”打断”</p><p>2.v-show</p><p>​ 写法：v-show&#x3D;”表达式”</p><p>​ 适用于：切换频率较高的场景</p><p>​ 特点：不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉</p><p>3.备注：使用 v-if 的时，元素可能无法直接获取到，而使用 v-show 一定可以获取到</p><h1 id="Vue-渲染列表"><a href="#Vue-渲染列表" class="headerlink" title="Vue 渲染列表"></a>Vue 渲染列表</h1><p>基本原理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表(遍历数组)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;p.id&#125;&#125;--&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;19&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-for 指令： 1.用于展示列表数据 2.语法: <code>v-for = &quot;(item, index) in xxx&quot;  :key = &quot;yyy&quot;</code> 3.可遍历：数组，对象，字符串，指定的次数</p><p>渲染列表中 key 的作用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表(遍历数组)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;19&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p = &#123; <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;老刘&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;40&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>key 的作用: 1.虚拟 DOM 中 key 的作用：</p><p>key 是虚拟 DOM 对象的标识，当状态中的数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】，</p><p>随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异比较，比较规则如下：</p><p>2.对比规则：</p><p>(1).旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：</p><p>​ a.若虚拟 DOM 中内容没变，直接使用之前的真实 DOM！</p><p>​ b.若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</p><p>(2).旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key</p><p>​ 创建新的真实 DOM，随后渲染到页面</p><p>3.用 index 作为 key 可能会引发的问题</p><p>1.若对数据进行：逆序添加，逆序删除等破坏顺序操作：</p><p>​ 会产生没有必要的真实 DOM 更新&#x3D;&#x3D;&gt;界面效果没问题，但效率低</p><p>2.如果结构中还包含输入类的 DOM</p><p>​ 会产生错误 DOM 更新&#x3D;&#x3D;&gt;界面有问题</p><p>4.开发中任何选择 key?</p><p>1.最好使用每条数据的唯一标识作为 key，比如 id，手机号，身份证号，学号，等唯一值</p><p>2.如果不存在对数据的逆序添加，逆序删除等破坏顺序操作，仅用于渲染列表用于展示</p><p>​ 使用 index 作为 key 是没有问题的</p><p>列表过滤</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWords&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filpersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//watch实现</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//#region</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        el: &#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        data: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            persons: [</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#123; id: &#x27;001&#x27;, name: &#x27;马冬梅&#x27;, age: &#x27;18&#x27;, sex: &#x27;女&#x27; &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#123; id: &#x27;002&#x27;, name: &#x27;周冬雨&#x27;, age: &#x27;19&#x27;, sex: &#x27;女&#x27; &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#123; id: &#x27;003&#x27;, name: &#x27;周杰伦&#x27;, age: &#x27;20&#x27;, sex: &#x27;男&#x27; &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#123; id: &#x27;004&#x27;, name: &#x27;温兆伦&#x27;, age: &#x27;22&#x27;, sex: &#x27;男&#x27; &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            ],</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            keyWords: &#x27;&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            filpersons: [],</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        watch: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            keyWords: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                immediate: true,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                handler(val) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    //过滤数组</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    this.filpersons = this.persons.filter((p) =&gt; &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                        return p.name.indexOf(val) !== -1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125;)*/</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//#endregion</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//用computed实现</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;19&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;22&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">keyWords</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">filpersons</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWords</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列表排序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWords&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filpersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;30&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;31&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;22&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">keyWords</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sortType</span>: <span class="number">0</span> <span class="comment">//0代表原顺序，1降序，2升序</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">filpersons</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWords</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//判断</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sortType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? b.<span class="property">age</span> - a.<span class="property">age</span> : a.<span class="property">age</span> - b.<span class="property">age</span></span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 监测数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄＋1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加一个性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex= &#x27;你说捏&#x27; &quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriend&quot;</span>&gt;</span>修改第一个朋友的名字为:张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为:开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;h&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;&quot;</span> <span class="attr">index</span>&gt;</span></span><br><span class="line">      &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">student</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;tony&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hobby</span>: [<span class="string">&#x27;抽烟&#x27;</span>, <span class="string">&#x27;喝酒&#x27;</span>, <span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">friends</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">name</span>: <span class="string">&#x27;jerry&#x27;</span>, <span class="attr">age</span>: <span class="number">36</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">addSex</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">student</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">addFriend</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">70</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updateFirstFriend</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">addHobby</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;学习&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updateHobby</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>, <span class="number">0</span>, <span class="string">&#x27;开车&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">removeSmoke</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 监视数据的原理:</p><p>1.Vue 会监视 data 中所有层次的数据。</p><p>2.如何监测对象中的数据？</p><p>通过 setter 实现监视，且要在 new Vue 时就传入要监测的数据。</p><p>​ (1).对象中后追加的属性，Vue 默认不做响应式处理</p><p>​ (2).如需给后添加的属性做响应式，请使用如下 API</p><p>​ <code>Vue.set(target,propertyName/index,value)</code>或</p><p>​ <code>vm.$set(target,propertyName/index,value)</code></p><p>3.如何监测数组中的数据？</p><p>通过包裹数组跟新元素的方法实现，本质就是做了两件事:</p><p>​ (1).调用原生对应的方法对数组进行更新</p><p>​ (2).重新解析模板，进而更新页面</p><p>4.在 Vue 修改数组中的某个元素一定要用如下方法:</p><p>(1).使用这些 API: push(),pop(),shift(),unshift(),splice(),sort(),reverse()</p><p>(2).Vue.set() 或 vm.$set()</p><blockquote><p>特别注意：Vue.set() 和 vm.$set() 不能给 vm 或 vm 的根数据对象 添加属性!!!</p></blockquote><h1 id="Vue-收集表单数据"><a href="#Vue-收集表单数据" class="headerlink" title="Vue 收集表单数据"></a>Vue 收集表单数据</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;Demo&quot;</span>&gt;</span></span><br><span class="line">    账号：<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;userInfo.account&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;male&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;female&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    性别： 男<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;male&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    女<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;female&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    爱好： 学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span> /&gt;</span></span><br><span class="line">    打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> /&gt;</span></span><br><span class="line">    吃饭<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    所属校区</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    其他信息</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span> /&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>《用户协议》&lt;/a</span><br><span class="line">    &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userInfo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">account</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hobby</span>: [],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">city</span>: <span class="string">&#x27;beijing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">other</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">agree</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Demo</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>收集表单数据：</p><p>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>,则 v-model 收集的是 value 值，用户输入的就是 value 值。</p><p>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>,则 v-model 收集的是 value 值，且要给标签配置 value 的值。</p><p>若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p><p>1.没有配置 input 的 value 属性，那么收集的就是 checked(勾选 or 未勾选，是布尔值)</p><p>2.配置 input 的 value 属性：</p><p>​ (1)v-model 的初始值是非数组，那么收集的就是 checked(勾选 or 未勾选，是布尔值)</p><p>​ (2)v-model 的初始值是数组，那么收集的就是 value 组成的数组</p><p>备注：v-model 的三个修饰符：</p><p>​ lazy：失去焦点在收集数据</p><p>​ number：输入字符串转为有效数字</p><p>​ trim：输入首尾空格过滤</p><h1 id="Vue-过滤器"><a href="#Vue-过滤器" class="headerlink" title="Vue 过滤器"></a>Vue 过滤器</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;time | timeFormater &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤器实现(传参) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>捏捏捏<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">time</span>: <span class="number">1648366720578</span>, <span class="comment">//获取当前的时间戳</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&#x27;你好捏捏捏捏&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fmtTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getFmtTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">timeFormater</span>(<span class="params">value, str = <span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">mySlice</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器：</p><p>定义：对要显示的数据进行特定格式化后再显示(适用于一些简单逻辑的处理)。</p><p>语法：</p><p>1.注册过滤器：Vue.filter(name,callback) 或 new Vue{filters”{}}</p><p>2.使用过滤器：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xx | 过滤器名&quot;</code></p><p>备注：</p><p>1.过滤器也可以接收额外参数，多个过滤器也可以串联</p><p>2.并没有改变原本的数据，是产生新的对应的数据</p><h1 id="Vue-指令"><a href="#Vue-指令" class="headerlink" title="Vue 指令"></a>Vue 指令</h1><blockquote><p>内置指令我们学过的指令： v-bind : 单向绑定解析表达式，可简写为 :xxx</p><p>v-model : 双向数据绑定</p><p>v-for : 遍历数组&#x2F;对象&#x2F;字符串</p><p>v-on : 绑定事件监听，可简写为@</p><p>v-if : 条件渲染(动态控制节点是否存存在)</p><p>v-else : 条件渲染(动态控制节点是否存存在)</p><p>v-show : 条件渲染(动态控制节点是否展示)</p><p>v-text 指令：</p><p>1.作用：向其所在的节点中渲染文本内容。</p><p>2.与插值语法的区别：v-text 会替换掉节点中的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</p><p>v-html 指令：</p><p>1.作用：向指定节点中渲染包含 html 结构的内容</p><p>2.与插值语法的区别：</p><p>(1).v-html 会替换掉节点中所有的内容，<code>&#123;&#123;&#125;&#125;</code>则不会</p><p>(2).v-html 可以识别 html 结构</p><p>3.严重注意：v-html 有安全性问题！！！</p><p>(1).在网站上动态渲染任意 HTML 是非常危险的，容易导致 XSS 攻击</p><p>(2).一定要在可信的内容上使用 v-html，永不要用在用户提交的内容上</p><p>v-cloak 指令(没有值):</p><p>1.本质是一个特殊属性，vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性。</p><p>2.使用 css 配合 v-cloak 可以解决网速慢时页面展出<code>&#123;&#123;xxx&#125;&#125;</code>的问题</p><p>v-once 指令：</p><p>1.v-once 所在节点在初次动态渲染后，就视为静态内容了。</p><p>2.以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能</p><p>v-pre 指令：</p><p>1.跳过其所在节点的编译过程。</p><p>2.可利用它跳过：没有使用指令语法，没有使用插值语法的节点，会加快编译</p></blockquote><p>自定义指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h2&gt;当放大十倍后的n值是:&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当放大十倍后的n值是:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big-number</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;gumisa&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//big函数何时会被调用？ 1.指令与元素成功绑定时(一上来).2.指令所在的模板被重新解析时.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// big(element,binding)&#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   // console.log(&#x27;big&#x27;)，简写属性其中只包括了 bind 和 update</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   element.innerText = binding.value * 10</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;big-number&#x27;</span>(element, binding) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&#x27;big&#x27;)，简写属性其中只包括了 bind 和 update</span></span></span><br><span class="line"><span class="language-javascript">        element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fbind</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指令与元素成功绑定时(一上来)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//指令所在的模板被重新解析</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">update</span>(<span class="params">element, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需求 1：定义一个 v-big 指令，和 v-text 功能类似，但会把绑定的数值放大十倍。</p><p>需求 2：定义一个 v-fbind 指令，和 v-bind 功能类似，但可以让其所绑定的 input 元素默认获取焦点</p><p>自定义指令总结:</p><p>一，定义语法：</p><p>​ 1.局部指令:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;              <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">directives</span>:&#123;指令名:配置对象&#125; 或      directives&#123;指令名:回调函数&#125;</span><br><span class="line"></span><br><span class="line">&#125;)                  &#125;)</span><br></pre></td></tr></table></figure><p>​ 2.全局指令:</p><p>​ Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</p><p>二，配置对象中常用的 3 个回调：</p><p>​ 1.bind: 指令与元素成功绑定时调用</p><p>​ 2.inserted: 指令所在元素被插入页面时调用</p><p>​ 3.updata 指令所在模板结构被重新解析时调用</p><p>三，备注：</p><p>​ 1.指令定义时不加 V-，但使用时要加 v-；</p><p>​ 2.指令名如果是多个单词，要使用 kebab-case 命名方式，不要使用 camelCase 命名</p><h1 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h1><p>生命周期：</p><p>1.又名：生命周期回调函数，生命周期函数，生命周期钩子。</p><p>2.是什么：Vue 在关键时刻帮我们调用的一些特殊名称的函数</p><p>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</p><p>4.生命周期函数中的 this 指向是 vm 或组件实例对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//Vue 完成模板的解析并把初始的真实的DOM元素放入页面后(完成挂载)调用mounted</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;=<span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//通过外部的定时器去实现(不推荐)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// setInterval(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     vm.opacity -= 0.01</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     if(vm.opacity &lt;=0) vm.opacity = 1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;,16)</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析生命周期</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;bye&quot;</span>&gt;</span>点我销毁vm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// template:`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// `,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">n</span>++</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bye</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bye&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$destroy()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">n</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;n变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">add</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结常用的生命周期钩子:</p><p>1.mounted:发送 ajax 请求，启动定时器，绑定自定义事件，订阅消息等【初始化操作】.</p><p>2.beforeDestroy:清除定时器，解绑自定义事件，取消订阅消息等【收尾工作】.</p><p>关于销毁 Vue 实例</p><p>1.销毁后借助 Vue 开发者工具看不到任何消息.</p><p>2.销毁后自定义事件会失效，但原生 DOM 事件依然有效。</p><p>3.一般不会在 beforeDestroy 操作数据，因为即便操作数据，也不会在触发更新流程了。</p><blockquote><p>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p><p>2.为什么要有这个关系：让组件实例对象(vc)可以访问 Vue 原型上的属性、方法。</p></blockquote><h1 id="Vue-的渲染函数"><a href="#Vue-的渲染函数" class="headerlink" title="Vue 的渲染函数"></a>Vue 的渲染函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params">createElement</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">render</span>:<span class="function"><span class="params">q</span> =&gt;</span> <span class="title function_">q</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line"><span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure><h1 id="Vue-脚手架文件结构"><a href="#Vue-脚手架文件结构" class="headerlink" title="Vue 脚手架文件结构"></a>Vue 脚手架文件结构</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|————node_modules</span><br><span class="line">|————public</span><br><span class="line">|    |————favicon.ico：页签图标</span><br><span class="line">|    |————index.html：主页面</span><br><span class="line">|</span><br><span class="line">|————src</span><br><span class="line">|    |————assets：存放静态资源</span><br><span class="line">|    |     |——logo.png</span><br><span class="line">|    |————component：存放组件</span><br><span class="line">|    |     |——HelloWorld.vue</span><br><span class="line">|    |————App.vue：汇总所有组件</span><br><span class="line">|    |————main.js：入口文件</span><br><span class="line">|————.gitignore：git版本管制忽略的配置</span><br><span class="line">|————babel.config.js：babel的配置文件</span><br><span class="line">|————package.json:：应用包配置文件</span><br><span class="line">|————README.md：应用描述文件</span><br><span class="line">|————package<span class="literal">-lock</span>.json：包版本控制文件</span><br></pre></td></tr></table></figure><h1 id="Vue-的-ref-属性"><a href="#Vue-的-ref-属性" class="headerlink" title="Vue 的 ref 属性"></a>Vue 的 ref 属性</h1><p>1.被用来给元素或子组件注册引用信息(id 的替代者)</p><p>2.应用在 html 标签上获取的是真实的 DOM 元素，应用在组件标签上是组件实例对象(vc)</p><p>3.使用方式：</p><p>打标识：<code>&lt;h1 *ref*=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School *ref*=&quot;xxx&quot;&gt;&lt;/School&gt;</code></p><p>获取：<code>this.$refs.xxx</code></p><h1 id="Vue-的配置项-props"><a href="#Vue-的配置项-props" class="headerlink" title="Vue 的配置项 props"></a>Vue 的配置项 props</h1><p>功能：让组件接收外部传过来的数据</p><p>(1).传递数据：</p><p>​ <code>&lt;Demo *name* = &quot;xxx&quot; /&gt;</code></p><p>(2).接收数据：</p><p>​ 第一种方式(只接受):</p><p>​ <code>props:[&#39;name&#39;]</code></p><p>​ 第二种方式(限制类型):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 第三种方式(限制类型，限制必要性，指定默认值):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line">       <span class="attr">type</span>:<span class="title class_">String</span>,<span class="comment">//类型</span></span><br><span class="line">       <span class="attr">required</span>:<span class="literal">true</span>,<span class="comment">//必要性</span></span><br><span class="line">       <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span><span class="comment">//默认值</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：</p><blockquote><p>props 是只读的 ,Vue 底层会监测你对 props 的修改,如果进行了修改，就会发出警告,若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据</p></blockquote><h1 id="Vue-中的-mixin-混入"><a href="#Vue-中的-mixin-混入" class="headerlink" title="Vue 中的 mixin(混入)"></a>Vue 中的 mixin(混入)</h1><p>功能：可以把多个组件共用的配置提取成一个混入对象</p><p>使用方法：</p><p>第一步定义混合，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;....&#125;,</span><br><span class="line"></span><br><span class="line">        <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>第二步使用混入，例如：</p><p>​ (1).全局混入：<code>Vue.mixin(xxx)</code></p><p>​ (2).局部混入：<code>mixins:[&#39;xxx&#39;]</code></p><h1 id="Vue-插件"><a href="#Vue-插件" class="headerlink" title="Vue 插件"></a>Vue 插件</h1><p>功能: 用于增强 Vue<br>本质: 包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。<br>定义插件：对象.install &#x3D; function (Vue, options) {</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//  1. 添加全局过滤器</span></span><br><span class="line"> <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"> <span class="comment">//  2.添加全局指令</span></span><br><span class="line"> <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"> <span class="comment">//  3.配置全局混入(合)</span></span><br><span class="line"> <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(...)</span><br><span class="line"> <span class="comment">//  4.添加实例方法</span></span><br><span class="line"> <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line"> <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = xxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用插件:Vue.use()</span></span><br></pre></td></tr></table></figure><h1 id="Vue-中-scoped"><a href="#Vue-中-scoped" class="headerlink" title="Vue 中 scoped"></a>Vue 中 scoped</h1><p>作用：让样式在局部生效，防止冲突。</p><p>写法：<code>&lt;style scoped&gt;</code></p><p>也可以不写 scoped 让其污染全局，方便组件直接调用样式名</p><h1 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h1><p>1.储存内容大小一般支持 5MB 左右(不同浏览器可能不一样)</p><p>2.浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地储存机制</p><p>3.相关 API:</p><p><code>1.xxxxxStorage.setItem(&#39;key&#39;,&#39;value&#39;);</code></p><p>​ 该方法接受一个键和值作为参数，会把键值对添加到储存中，如果键名存在，则更新其对应的值</p><p><code>2.xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​ 该方法接受一个键名作为参数，返回键名对应的值。</p><p><code>3.xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​ 该方法接受一个键名作为参数，并把该键名从存储中删掉</p><p><code>4.xxxxxStorage.clear()</code></p><p>​ 该方法会清空储存中的所有数据。</p><p>4.备注：</p><p>1.SessionStorage 存储的内容会随着浏览器窗口关闭而消失</p><p>2.LocalStorage 存储的内容，需要手动清除才会消失</p><p>3.xxxxxStorage.getItem(xxx) 如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是 null</p><p>4.JSON.parse(null)的结果依然是 null</p><h1 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h1><p>1.一种组件间通信的方式，适用于：子组件&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;父组件</p><p>2.使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件(事件的回调在 A 中)</p><p>3.绑定自定义事件：</p><p>1.第一种方式，在父组件中:&lt;Demo @_xxxx_&#x3D;”test”&gt; 或<Demo _v-on_:_xxxx_="test"/></p><p>2.第二种方式，在父组件中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> *ref* = <span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">   .....</span><br><span class="line"></span><br><span class="line">   <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>3.若想让自定义事件只能触发一次，可以使用 once 修饰符，或$once 方法</p><p>4.触发自定义事件：<code>this.$emit(&#39;atguigu&#39;，数据)</code></p><p>5.解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p><p>6.组件上也可以绑定原生 DOM 事件，需要使用 native 修饰符</p><p>7.注意:通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调要么配置在 methods 中，要么用箭头函数，否则 this 指向会出问题</p><h1 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h1><p>1.一种组件间通信的方式，适用于任意组件间通信。</p><p>2.安装全局事件总线:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="title function_">beforeCreat</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>3.使用事件总线:</p><p>1.接受数据:A 组件想接受数据，则在 A 组件中给$bus 绑定自定义事件，事件的回调留在 A 组件自身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="title function_">demo</span>(<span class="params">data</span>)&#123;....&#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line">   <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2.提供数据:this.$bus.$emit(‘xxx’,数据)</p><p>4.最好在 beforeDestroy 钩子中，用$off 去解绑当前组件所用到的事件</p><h1 id="消息订阅与发布-pubsub"><a href="#消息订阅与发布-pubsub" class="headerlink" title="消息订阅与发布 (pubsub)"></a>消息订阅与发布 (pubsub)</h1><p>1.一种组件间通信方式，适用于任意组件间通信。</p><p>2.使用步骤：</p><p>1.安装 pubsub: <code>npm i &#39;pubsub-js&#39;</code></p><p>2.引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p><p>3.接受数据:A 组件想接受数据,则在 A 组件中订阅消息,订阅的回调留在 A 组件自身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line">   mounted () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pId</span> = pubsub.<span class="title function_">sunscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)<span class="comment">//订阅消息</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>4.提供数据:<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p><p>5.最好在 beforeDestroy 钩子中，用<code>pubsub.unsubscribe(pId)</code>去取消订阅</p><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><p>1.语法:<code>this.$nextTick(回调函数)</code></p><p>2.作用:在下次 DOM 更新结束后执行其指定的回调</p><p>3.什么时候用:当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行</p><h1 id="Vue-封装的过渡和动画"><a href="#Vue-封装的过渡和动画" class="headerlink" title="Vue 封装的过渡和动画"></a>Vue 封装的过渡和动画</h1><p>1.作用:在插入，更新或移除 DOM 元素时，在合适的时候给元素加样式类名。</p><p>2.图示</p><p>​ Enter Leave</p><p>opacity:0———&gt;opacity:1 opacity:1———&gt;opacity:0</p><p>| | | |</p><p>| | | |</p><p>| | | |</p><p>v-enter v-enter-to v-leave v-leave-to</p><p>|———————————————————| |———————————————————|</p><p>|——v-enter-active ——| |——v-leave-active ——|</p><p>3.写法:</p><p>1.准备好样式:</p><p>​ (1).元素进入的样式:</p><p>​ a.v-enter: 进入的起点</p><p>​ b.v-enter-active: 进入过程中</p><p>​ c.v-enter-to: 进入的终点</p><p>​ (2).元素离开的样式:</p><p>​ 1.v-leave:离开的起点</p><p>​ 2.v-leave-active:离开过程中</p><p>​ 3.v-leave-to:离开的终点</p><p>2.使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置 name 属性:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> *<span class="attr">name</span>*=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> *<span class="attr">v-show</span>*=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.备注:若有多个元素需要过渡，则需要使用:<transition-group> 且每个元素都要指定 key 值</p><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>1.作用:让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式适用于父组件&#x3D;&#x3D;&#x3D;&#x3D;&gt;子组件</p><p>2.分类:默认插槽，具名插槽，作用域插槽</p><p>3.适用方式: 1.默认插槽:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 定义插槽 --&gt;</span><br><span class="line">    &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2.具名插槽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 父组件中:</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">&lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">&lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">// 子组件中:</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 定义插槽 --&gt;</span><br><span class="line">    &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>3.作用域插槽 1.理解:数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。(games 数据在 Category 组件中，但使用数据遍历出来的结构有 App 决定)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 父组件中:</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">    &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">        &lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">        &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Category&#x27;,</span><br><span class="line">  props: [&#x27;title&#x27;],</span><br><span class="line">  //数据在子组件自身</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      games: [&#x27;红色警戒&#x27;, &#x27;穿越火线&#x27;, &#x27;劲舞团&#x27;, &#x27;超级玛丽&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><strong>搭建 vuex 环境</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.创建文件:src/store/index.js.</span><br><span class="line"><span class="comment">&lt;!-- 引入Vue核心库 --&gt;</span></span><br><span class="line">improt Vue from &#x27;vue&#x27;</span><br><span class="line"><span class="comment">&lt;!-- 引入Vuex --&gt;</span></span><br><span class="line">improt Vuex from &#x27;vuex&#x27;</span><br><span class="line"><span class="comment">&lt;!-- 应用Vuex插件 --&gt;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="comment">&lt;!-- 准备actions对象--响应组件中用户的动作 --&gt;</span></span><br><span class="line">const actions = &#123; &#125;</span><br><span class="line"><span class="comment">&lt;!-- 准备mutations对象--修改state中的数据 --&gt;</span></span><br><span class="line">const mutations = &#123; &#125;</span><br><span class="line"><span class="comment">&lt;!-- 准备state对象--保存具体的数据 --&gt;</span></span><br><span class="line">const state = &#123; &#125;</span><br><span class="line"><span class="comment">&lt;!-- 创建并暴露 --&gt;</span></span><br><span class="line">export default new Vuex.Store(&#123; actions, mutations, state &#125;)</span><br></pre></td></tr></table></figure><p>2.在 main.js 中创建 vm 时传入 store 配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> .....</span><br><span class="line"></span><br><span class="line"> &lt;!-- 引入store --&gt;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> &lt;!-- 创建vm --&gt;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"></span><br><span class="line">  store,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>基本使用</strong> 1.初始化数据，配置 actions，配置 mutations，操作文件 store.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入<span class="title class_">Vue</span>核心库 --&gt;</span><br><span class="line">improt <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">&lt;!-- 引入<span class="title class_">Vuex</span> --&gt;</span><br><span class="line">improt <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">&lt;!-- 应用<span class="title class_">Vuex</span>插件 --&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">&lt;!--  --&gt;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    &lt;!-- 响应组件动作 --&gt;</span><br><span class="line">    jia (context,value) &#123;</span><br><span class="line">        <span class="comment">//  console.log(&#x27;actions中的jia被调用辣&#x27;,miniStore,value)</span></span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//  执行加</span></span><br><span class="line">    <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        <span class="comment">//  console.log(&#x27;mutations的JIA被调用辣&#x27;,state,value)</span></span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 初始化数据 --&gt;</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 创建并暴露 --&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.组件中读取 vuex 中的数据:<code>$store.state.sum</code> 3.组件中修改 vuex 中的数据:<code>$store.dispatch(&#39;actions中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutation中的方法名&#39;,数据)</code></p><blockquote><p>备注: 若没有网络请求或其他业务逻辑,组件中也可以越过 actions，即不写 dispatch,直接写 commit</p></blockquote><p><strong>getters 的使用</strong></p><p>1.概念: 当 state 中的数据需要经过加工后在使用时，可以使用 getters 加工。</p><p>2.在 store.js 中追加 getters 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  创建并暴露store</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title function_">store</span>(&#123;</span><br><span class="line"></span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line"> getters</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.组件中读取数据: <code>$store.getters.bigSum</code></p><p><strong>四个 map 方法的使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>mapState方法：用于帮助我们映射state中的数据为计算属性</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    &lt;!-- 借助mapState生成计算属性，sum,school,<span class="title function_">subject</span>(对象写法) --&gt;</span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>, <span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>, <span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">    &lt;!-- 借助mapState生成计算属性，sum,school,<span class="title function_">subject</span>(数组写法) --&gt;</span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">2.</span>mapGetters方法：用于帮我们映射getters中的数据为计算属性</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">  &lt;!-- 借助mapGetters生成计算属性，<span class="title function_">bigSum</span>(对象写法) --&gt;</span><br><span class="line">  ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line">  &lt;!-- 借助mapGetters生成计算属性，<span class="title function_">bigSum</span>(数组写法) --&gt;</span><br><span class="line">  ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line"><span class="number">3.</span>mapActions方法：用于帮助我们生成与actions对话的方法，即：包含$store.<span class="title function_">dispatch</span>(xxx)的函数</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    &lt;!-- 靠mapActions生成:incrementOdd,<span class="title function_">incrementWait</span>(对象形式) --&gt;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;),</span><br><span class="line">    &lt;!-- 靠mapMutations生成:incrementOdd,<span class="title function_">incrementWait</span>(数组形式) --&gt;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>]),</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">4.</span>mapMutations方法：用于帮助我们生成与mutations对话的方法，即：包含$store.<span class="title function_">commit</span>(xxx)的函数</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    &lt;!-- 靠mapMutations生成:increment,<span class="title function_">decrement</span>(对象形式) --&gt;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    &lt;!-- 靠mapMutations生成:<span class="variable constant_">JIA</span>,<span class="title function_">JIAN</span>(数组形式) --&gt;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>mapActions 与 mapMutations 使用时,若有传递参数需要:在模板中绑定事件时传递好参数,否则参数是事件对象</p></blockquote><p><strong>模块化＋命名空间</strong></p><p>1.目的：让代码更好维护，让多种数据分类更加明确。</p><p>2.修改 store.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> countAbout = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>:&#123;...&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> personAbout = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">mutations</span>:&#123;...&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>:&#123;...&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title function_">store</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line"></span><br><span class="line">   countAbout,</span><br><span class="line"></span><br><span class="line">   personAbout</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>3.开启命名空间后，组件中读取 state 数据:</p><p>&#x2F;&#x2F;方式一：自己直接读取</p><p><code>this.$store.state.personAbout.list</code></p><p>&#x2F;&#x2F;方式二：借助 mapState 读取,</p><p><code>...mapState(&#39;countAbout&#39;,[&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;])</code>,</p><p>4.开启命名空间后，组件中读取 getters 数据:</p><p>&#x2F;&#x2F;方式一：自己直接读取</p><p><code>this.$store.getters[&#39;personAbout/firstPersonName&#39;]</code></p><p>&#x2F;&#x2F;方式二：借助 mapgetters 读取</p><p><code>...mapGetters(&#39;countAbout&#39;,[&#39;bigSum&#39;])</code></p><p>5.开启命名空间后，组件中调用 dispatch</p><p>&#x2F;&#x2F;方式一：自己直接 dispatch</p><p><code>this.$store.dispatch(&#39;personAbout/addPersonWang&#39;,person)</code></p><p>&#x2F;&#x2F;方式二：借助 mapActions:</p><p><code>...mapAction(&#39;countAbout&#39;,&#123;incrementOdd:&#39;jiaOdd&#39;,incrementWait:&#39;jiaWait&#39;&#125;)</code></p><p>6.开启命名空间后，组件中调用 commit</p><p>&#x2F;&#x2F;方式一：自己直接 commit</p><p><code>this.$store.commit(&#39;personAbout/ADD_PERSON&#39;,person)</code></p><p>&#x2F;&#x2F;方式二：借助 mapMutations：</p><p><code>...mapMutations(&#39;countAbout&#39;,&#123;increment:&#39;JIA&#39;,decrement:&#39;JIAN&#39;&#125;),</code></p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>1.理解：一个路由(route)就是一组映射关系(key-value),多个路由则需要路由器(router)进行管理</p><p>2.前端路由：key 是路径，value 是组件。</p><p><strong>一.基本使用:</strong> 1.安装 vue-router,命令：npm i vue-router</p><p>2.应用插件：Vue.use(VueRouter)</p><p>3.编写 router 配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//引入路由组件</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建router实例对象去管理一组一组的路由规则</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"></span><br><span class="line">   <span class="attr">routes</span>:[</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;/About&#x27;</span>，</span><br><span class="line"></span><br><span class="line">     <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"></span><br><span class="line">     <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//暴露router</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>4.实现切换(active-class 可配置高亮样式)<br><code>&lt;router-link active-class = &#39;active&#39; to = &#39;/about&#39;&gt;About&lt;/router-link&gt;</code></p><p>5.指定展示位置<br><code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><p><strong>二.几个注意点</strong>: 1.路由组件通常存放在 pages(views)文件夹，一般组件通常存在 components 文件夹</p><p>2.通过切换，隐藏了的路由组件，默认是被销毁掉的，需要的时候在去挂载</p><p>3.每个组件都有自己的$route 属性，里面储存着自己的路由信息</p><p>4.整个应用只有一个 router，可以通过组件的$router 属性获取到</p><p><strong>三.多级路由(嵌套路由)</strong> 1.配置路由规则，使用 children 配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">//通过children配置子级路由</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写:/news</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">News</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>, <span class="comment">//此处一定不要写:/message</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Message</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.跳转(要写完整路径):<br><code>&lt;router-link *to*=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></p><p><strong>四.路由的 query 参数</strong>: 1.传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rounter-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail?id=666&amp;title=你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">rounter-link</span>&gt;</span></span></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">rounter-link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">to:</span>&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">path:</span>&#x27;/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">query:</span>&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">id:666</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">title:</span>&#x27;<span class="attr">你好捏</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.接受参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure><p><strong>五.命名路由</strong>: 1.作用：可以简化路由的跳转。 2.如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> path:&#x27;/demo&#x27;,</span><br><span class="line"> component:Demo,</span><br><span class="line"> children:[</span><br><span class="line">    &#123;</span><br><span class="line">      path:&#x27;test&#x27;,</span><br><span class="line">      component:Test,</span><br><span class="line">      children:[</span><br><span class="line">         &#123;</span><br><span class="line">           name:&#x27;hello&#x27; //给路由命名</span><br><span class="line">           path:&#x27;welcome&#x27;,</span><br><span class="line">           component:Hello,</span><br><span class="line">          &#125;</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123; name: &#x27;hello&#x27; &#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name: &#x27;hello&#x27;,</span><br><span class="line">    query: &#123;</span><br><span class="line">      id: 666,</span><br><span class="line">      title: &#x27;你好&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>六.路由的 params 参数</strong>： 1.配置路由，声明接收 params 参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail/666/你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">    params:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        id:666,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            title:&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p></blockquote><p>3.接收参数： 1.$route.params.id<br>    2.$route.params.title</p><p><strong>七.路由的 props 配置</strong><br>作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">                <span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">                <span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">                <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">                    <span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>八.<code>&lt;router-link&gt;</code>的 replace 属性</strong> 1.作用：控制路由跳转时操作浏览器历史记录的模式 2.浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code> 3.如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></p><p><strong>九.编程式路由导航</strong> 1.作用:不借助<router-link>实现路由跳转,让路由跳转更加灵活 2.具体编码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: xxx,</span><br><span class="line">    <span class="attr">title</span>: xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: xxx,</span><br><span class="line">    <span class="attr">title</span>: xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure><p><strong>十.缓存路由组件</strong> 1.作用：让不展示的路由组件保持挂载，不被销毁 2.具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;News&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p><strong>十一.两个新的生命周期钩子</strong> 1.作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态 2.具体名字：<br>1.activated 路由组件被激活时触发<br>2.deactivated 路由组件失活时触发</p><p><strong>十二.路由守卫</strong> 1.作用：对路由进行权限控制 2.分类：全局守卫，独享守卫，组件内守卫 3.全局守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;</span><br><span class="line">    <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//权限控制的具体规则</span></span><br><span class="line">      <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">      <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.独享守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">      <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.组件内守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>十三.路由器的两种工作模式</strong></p><p>1.对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值<br>2.hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。<br>3.hash 模式： 1.地址中永远带着#号，不美观 。 2.若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。 3.兼容性较好<br>4.history 模式： 1.地址干净，美观 。 2.兼容性和 hash 模式相比略差。 3.应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</p><h1 id="Vue3-常用的-Composition-API"><a href="#Vue3-常用的-Composition-API" class="headerlink" title="Vue3 常用的 Composition API"></a><strong>Vue3 常用的 Composition API</strong></h1><p><strong>setup</strong></p><p>1.理解: Vue3.0 中的一个新的配置项，值为函数<br>2.setup 是所有 Composition API (组合 API) 的<strong>表演舞台</strong> 3.组件中所有的数据，方法，属性等等均配置在 setup<br>4.setup 函数的两种返回值 1.若返回一个对象，则对象中的属性，方法，在模板中均可以直接使用 2.若返回一个渲染函数：则可以自定义渲染内容 5.注意点 1.尽量不要与 Vue2.x 配置混用<br>· Vue2.X 配置(data,methods,computed…) 中可以访问到 setup 中的属性，方法。<br>· 但在 setup 中不能访问到 vue2.x 配置（data，methods，computed…）<br>· 如果有重名，setup 优先<br>2.setup 不能是一个 async 函数,因为返回值不再是 return 的对象，而是 promise，模板看不到 return 对象中的属性(后期可以返回 promise，但是需要 suspense 和异步组件的配合捏)</p><p><strong>ref 函数</strong><br>作用：定义一个响应式的数据<br>语法：<code>const xxx = ref(initvalue)</code><br>· 创建一个包含响应式的应用对象 (reference 对象)<br>· JS 中操作数据：<code>xxx.value</code><br>· 模板中读取数据：不需要.value 直接<code>&lt;div&gt;&#123;&#123; xxx &#125;&#125; &lt;/div&gt;</code><br>备注:<br>· 接收的数据可以是：基本类型，也可以是对象类型<br>· 基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code> 中的 <code>get</code> 和 <code>set</code>完成的<br>· 对象数据类型：内部借用了 Vue3.0 中的一个新函数 – <code>reactive</code> 函数</p><p><strong>reactive 函数</strong><br>作用: 定义一个对象类型的响应式数据(基本数据不用,要用<code>ref</code>函数)<br>语法：<code>const 代理对象 = reactive(源对象)</code> 接收一个对象(或数组),返回一个代理对象(proxy 对象)<br>reactive 定义的响应式数据是深层次的<br>内部基于 ES6 的 Proxy 实现,通过代理对象操作源对象内部数据进行操作</p><p><strong>Vue3.0 中的响应式原理</strong></p><p>Vue2.x 的响应式<br>实现原理<br>对象类型：通过<code>object.defineProperty()对属性进行读取，修改进行拦截(数据劫持)</code><br>数组类型：通过重写更新数组的一系列方法来实现拦截(对数组的变更方法进行了包裹)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data,<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">    get () &#123;&#125;</span><br><span class="line">set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>存在问题:<br>新增属性：删除属性，界面不会更新 （this.$set … this.delete）<br>直接通过下标修改数组，界面不会自动更新</p><p>Vue3.0 的响应式<br>实现原理<br>通过 Proxy(代理): 拦截对象中任意属性的变化，包括：属性值的读写，属性的添加，属性的删除等<br>通过 Reflect(反射): 对被代理对象的属性进行操作</p><p><strong>Vue3.0 的响应式</strong><br>实现原理：<br>通过 Proxy(代理): 拦截对象中任意属性的变化,包括：属性值的读写,属性的添加,属性的删除等<br>通过 Reflect(反射)：对被代理对象的属性进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="comment">// 拦截读取属性值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, val)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拦截删除属性</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>reactive 和 ref 的对比</strong> 1.从定义数据角度对比:<br>ref 用来定义：基本数据类型<br>reactive 用来定义：对象(或数组)类型数据<br>备注：ref 也可以用来定义对象(或数组)数据类型，它内部会自动通过<code>reactive</code> 转为代理对象 2.从原理角度对比：<br>ref 通过<code>Object.defineProperty()</code>的 <code>get</code> 和 <code>set</code> 来实现响应式(数据劫持)<br>reactive 通过使用 Proxy 来实现响应式(数据劫持),并通过 Reflect 操作源对象内部的数据 3.从使用角度对比：<br>ref 定义的数据：操作数据需要<code>.value</code>,读取数据时模板中直接读取不需要<code>.value</code><br>reactive 定义的数据：操作数据与读取数据：均不需要<code>.value</code></p><p><strong>setup 的两个注意点</strong><br>setup 执行的时机<br>在 beforeCreate 之前执行一次，this 是 undefined<br>setup 的参数<br>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性<br>context：上下文对象<br>attrs：值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性，相当于<code>this.$attrs</code><br>slots：收到的插槽内容,相当于<code>this.$slots</code><br>emit：分发自定义事件的函数,相当于<code>this.$emit</code></p><p><strong>计算属性与监视</strong></p><p><strong>1.computed 函数</strong><br>与 Vue2.x 中 computed 配置功能一致<br>写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive,computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">setup () &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 计算属性简写</span></span><br><span class="line"><span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 计算属性完整</span></span><br><span class="line"><span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        get () &#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;</span><br><span class="line">        set (value) &#123;</span><br><span class="line">        <span class="keyword">let</span> names = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        person.<span class="property">fitstName</span> = names[<span class="number">0</span>]</span><br><span class="line">        person.<span class="property">lastName</span> = names[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.watch 函数</strong><br>与 Vue2.x 中 watch 配置功能呢一致<br>两个小坑： 1.监视 reactive 定义的响应式：oldVue 无法正确获取,强制开启了深度监视 (deep 配置失败) 2.监视 reactive 定义的响应式中某个属性时,deep 配置有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum发生了变化&#x27;</span>, newVal, oldVal)</span><br><span class="line">&#125;, &#123;<span class="attr">immediate</span>: <span class="literal">true</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum, msg], <span class="function">(<span class="params">[newSum, newMsg], [oldSum, oldMsg]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum和msg发生了变化&#x27;</span>, newSum, newMsg, oldSum, oldMsg)</span><br><span class="line">&#125;, &#123;<span class="attr">immediate</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">/*情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获取oldvalue</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newPerson, oldPerson</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person发生了变化&#x27;</span>, newPerson, oldPerson)</span><br><span class="line">&#125;, &#123;<span class="attr">deep</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">// 情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">name</span>, <span class="function">(<span class="params">newName, oldName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.name发生了变化&#x27;</span>, newName, oldName)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 情况五：监视reactive所定义的一个响应式数据中的某些属性变化</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>&#123;person.<span class="property">name</span>&#125;, <span class="function">()=&gt;</span>&#123;person.<span class="property">age</span>&#125;], <span class="function">(<span class="params">[newName, newAge], [oldName, oldAge]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.name和person.age发生了变化&#x27;</span>, newName, newAge, oldName, oldAge)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>, <span class="function">(<span class="params">newJob, oldJob</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.job发生了变化&#x27;</span>, newJob, oldJob)</span><br><span class="line">&#125;, &#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>3.watchEffect 函数</strong><br>watch 的套路是：既要指明监视的属性，也要指明监视的回调<br>watchEffect 的套路是：不用指明监视那个属性，监视的回调中用到那个属性，那么就监视那个属性<br>watchEffect 有点像 computed 1.但 computed 注重的计算出来的值(回调函数的返回值)，所以必须要写返回值 2.而 watchEffect 更注重的是过程(回调函数的函数体)，所以不用写返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">  <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4.Vue3 的生命周期</strong></p><p>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但是有两个被更名</p><p>​ 1.<code>beforeDestory</code> 改名为 <code>beforeUnmount</code><br>​ 2.<code>destroyed</code> 改名为 <code>unmounted</code></p><p>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下</p><p>​ 1.<code>beforeCreate</code> &#x3D;&#x3D;&#x3D;&gt; <code>setup()</code><br>​ 2.<code>created</code> &#x3D;&#x3D;&#x3D;&gt; <code>setup()</code><br>​ 3.<code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt; <code>onBeforeMount</code><br>​ 4.<code>mounted</code> &#x3D;&#x3D;&#x3D;&gt; <code>onMounted</code><br>​ 5.<code>beforeUpdate</code> &#x3D;&#x3D;&#x3D;&gt; <code>onBeforeUpdate</code><br>​ 6.<code>update</code> &#x3D;&#x3D;&#x3D;&gt; <code>onUpdate</code><br>​ 7.<code>beforeUnMount</code> &#x3D;&#x3D;&#x3D;&gt; <code>onBeforeUnmount</code><br>​ 8.<code>unmounted</code> &#x3D;&#x3D;&#x3D;&gt; <code>onUnmounted</code></p><p><strong>自定义函数 hook</strong></p><p>​ 什么是 hook？ – 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装<br>​ 类似于 Vue2.x 中的 mixin<br>​ 自定义 hook 的优势，复用代码，让 setup 中的逻辑更清楚易懂</p><p><strong>toRef</strong></p><p>​ 作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性<br>​ 语法：<code>const name = toRef(person,&#39;name&#39;)</code><br>​ 应用：要将响应式对象中的某个属性单独提供给外部使用时<br>​ 扩展：<code>toRefs</code> 和 <code>toRef</code> 功能一致，但可以批量创建多个 ref 对象,语法<code>toRefs(person)</code></p><p><strong>shallowReactive 和 shallowRef</strong></p><p>​ shallowReactive：只处理对象最外层属性的响应式(浅响应式)<br>​ shallowRef：只处理基本数据类型的响应式，不进行对象的响应式处理<br>​ 什么时候使用？<br>​ 如果有一个对象数据，结构比较深，但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive<br>​ 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替代 &#x3D;&#x3D;&#x3D;&gt; shallowRef</p><p><strong>readonly 与 shallowReadonly</strong><br>readonly：让一个响应式数据变为只读的(深只读)<br>shallowReadonly：让一个响应式数据变为只读的(浅只读)<br>应用场景：不希望数据被修改时</p><p><strong>toRaw 与 markRaw</strong><br>toRaw：<br>作用：将一个由 <code>reactive</code> 生成的响应式对象转为普通对象<br>使用场景：用于读取响应式对象的普通对象，对这个普通对象的所有操作，不会引起页面更新<br>markRaw：<br>作用：标记一个对象，使其永远不会再成为响应式对象<br>应用场景： 1.有些值不应被设置为响应式的，例如复杂的第三方库 2.当渲染具有不可变数据的大列表时，跳过响应式转换可以提高性能</p><p><strong>customRef</strong><br>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显示控制<br>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;keyword&quot; /&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; keyword &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">       name: &#x27;Demo&#x27;,</span><br><span class="line">       setup () &#123;</span><br><span class="line">           // let keyword = ref(&#x27;Hello&#x27;) //使用vue准备好的内置函数</span><br><span class="line">           // 自定义一个myRef</span><br><span class="line">           function myRef (value,delay) &#123;</span><br><span class="line">               let timer</span><br><span class="line">               //通过customRef去实现自定义</span><br><span class="line">               return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">                   return &#123;</span><br><span class="line">                       get () &#123;</span><br><span class="line">                           track() // 告诉vue这个value值是需要被追踪的</span><br><span class="line">                           return value</span><br><span class="line">                       &#125;,</span><br><span class="line">                       set (newValue) &#123;</span><br><span class="line">                           clearTimeout(timer)</span><br><span class="line">                           timer = setTimeout(()=&gt;&#123;</span><br><span class="line">                               value = newValue</span><br><span class="line">                               trigger() // 告诉vue去更新界面</span><br><span class="line">                           &#125;,delay)</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       let keyword = myRef(&#x27;Hello&#x27;,500) // 自定义的ref</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>provide 和 inject</strong><br>作用：实现祖先和后代组件间的通信<br>套路：父组件有一个 <code>provide</code> 选项来提供数据，子组件有一个<code>inject</code> 选项来开始使用这些数据<br>具体写法：</p><p>父组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setup () &#123; .... let person reactive(&#123;name: &#x27;komisa&#x27;, age: 18&#125;) provide(&#x27;person&#x27;,</span><br><span class="line">person) ... &#125;</span><br></pre></td></tr></table></figure><p>子组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setup () &#123; .... const person = inject(&#x27;car&#x27;) return &#123;car&#125; .... &#125;</span><br></pre></td></tr></table></figure><p><strong>响应式数据的判断</strong><br>isRef：检查一个值是否为一个 ref 对象<br>isReactive：检查一个对象是否是由 <code>reactive</code> 创建的响应式代理<br>isReadonly：检查一个对象是否是由 <code>readonly</code> 创建的只读代理<br>isProxy：检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</p><h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a><strong>Composition API 的优势</strong></h1><blockquote><p><strong>1.Options API 存在的问题</strong></p></blockquote><p>使用传统 Options API 中，新增或修改一个需求，就需要分别在 data,methods，computed 里修改</p><blockquote><p><strong>2.Composition 的优势</strong></p></blockquote><p>我们可以更加优雅的组织我们的代码，函数，让相关功能的代码更加有序的组织在一起</p><h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><p><strong>Fragment</strong><br>在 vue2 中：组件必须有一个根标签<br>在 vue3 中：组件可以没有根标签，内部会将多个标签包含在一个 Fragment 虚拟元素中<br>好处：减少标签层级，减小内存占用</p><p><strong>Teleport</strong><br>什么是 Teleport？ —— <code>Teleport</code> 是一种能够将我们的组件 html 结构移动到指定位置的技术</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置(body)&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">            &lt;h3&gt;我是弹窗&lt;/h3&gt;</span><br><span class="line">            &lt;button @click=&quot;isShow = false&quot;&gt;</span><br><span class="line">                关闭弹窗</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure><p><strong>Suspense</strong><br>等待异步组件时渲染一些额外内容，让应用有更好的用户体验<br>使用步骤<br>异步引入组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123;defineAsyncComponent&#125; from &#x27;vue&#x27; const Child = defineAsyncComponent(()=&gt;</span><br><span class="line">import(&#x27;./components/child.vue&#x27;))</span><br></pre></td></tr></table></figure><p>使用·<code>Suspense</code> 包裹组件，并配置好<code>default</code> 和 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是app组件&lt;/h3&gt;</span><br><span class="line">    &lt;Suspense&gt;</span><br><span class="line">      &lt;template v-solt:default&gt;</span><br><span class="line">        &lt;Child /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template&gt;</span><br><span class="line">        &lt;h3&gt;加载中...&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><strong>1.全局 API 的转移</strong><br>Vue2.x 有许多全局 API 和配置<br>例如：注册全局组件，注册全局指令等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;Mybutton&#x27;,&#123; data: () =&gt; (&#123; count: 0 &#125;), template: &#x27;</span><br><span class="line">&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="line">&#x27; &#125;) // 注册全局指令 Vue.directive(&#x27;focus&#x27;,&#123; inserted: el =&gt; el.focus() &#125;)</span><br></pre></td></tr></table></figure><p>Vue3.0 对这些 API 做出了调整<br>将全局的 API，即<code>Vue.xxx</code> 调整到应用实例 (<code>app</code>) 上</p><table><thead><tr><th align="left">2.x 全局 API (<code>Vue</code>)</th><th>3.x 实例 API（<code>app</code>）</th></tr></thead><tbody><tr><td align="left">Vue.config.xxx</td><td>app.config.xxxx</td></tr><tr><td align="left">Vue.config.productionTip</td><td><strong>移除</strong></td></tr><tr><td align="left">Vue.component</td><td>app.component</td></tr><tr><td align="left">Vue.directive</td><td>app.directive</td></tr><tr><td align="left">Vue.mixin</td><td>app.mixin</td></tr><tr><td align="left">Vue.use</td><td>app.use</td></tr><tr><td align="left">Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table><p><strong>2.其他改变</strong><br>data 选项始终将被声明为一个函数<br>过渡类名的更改:<br>Vue2.x 的写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3.x 的写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  opcity: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移除 keyCode 作为 v-on 的修饰符，同时也不在支持<code>config.keyCode</code><br>移除<code>v-on.native</code>修饰符<br>父组件中绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:close</span>=<span class="string">&quot;handleComponentEvent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:click</span>=<span class="string">&quot;handleNativeClickEvent&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  emits: [&#x27;close&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>移除过滤器(filiter)</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 前端框架 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习</title>
      <link href="/posts/9ac48510.html"/>
      <url>/posts/9ac48510.html</url>
      
        <content type="html"><![CDATA[<h1 id="React-脚手架搭建"><a href="#React-脚手架搭建" class="headerlink" title="React 脚手架搭建"></a>React 脚手架搭建</h1><h2 id="Create-react-app-基础操作"><a href="#Create-react-app-基础操作" class="headerlink" title="Create-react-app 基础操作"></a>Create-react-app 基础操作</h2><p>当下前端开发的主流是<strong>组件化</strong>和<strong>模块化</strong></p><ul><li>有助于团队协作开发</li><li>便于组件的复用：提高开发效率、方便后期维护、减少冗余代码</li></ul><h3 id="划分组件："><a href="#划分组件：" class="headerlink" title="划分组件："></a>划分组件：</h3><ul><li>业务组件：针对项目需求封装<ul><li>普通业务组件：复用性低，只是单独拆选出来的一个模块</li><li>通用业务组件：具备复用性</li></ul></li><li>功能组件：适用于多个项目「例如：UI 组件库中的组件」<ul><li>通用功能组件</li></ul></li></ul><p>组件化开发必然会带来工程化，即基于 Webpack &#x2F; Vite &#x2F; Rollup &#x2F; Turbopack 等工具实现组件的合并、压缩、打包等。</p><h3 id="安装-create-react-app"><a href="#安装-create-react-app" class="headerlink" title="安装 create-react-app"></a>安装 create-react-app</h3><p>我们可以基于 webpack 自己去搭建一套工程化打包的脚手架，但是过程会非常麻烦和繁琐，因此可以利用官方提供的脚手架<code>create-react-app</code>创建 React 项目，基于该脚手架创建项目，默认就把 Webpack 的打包规则已经处理好了，把一些项目需要的基本文件也都创建好了。我们可以在其上面做修改</p><p>全局安装 create-react-app 脚手架：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i create<span class="literal">-react-app</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>检查 create-react-app 的版本（是否安装完成·）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create<span class="literal">-react-app</span> <span class="literal">--version</span></span><br></pre></td></tr></table></figure><h3 id="创建工程化项目"><a href="#创建工程化项目" class="headerlink" title="创建工程化项目"></a>创建工程化项目</h3><p>创建的命令为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create<span class="literal">-react-app</span> [项目名称]</span><br></pre></td></tr></table></figure><blockquote><p>项目名称应该仅使用数字、小写字母和下划线 <code>_</code> 的组合。</p></blockquote><p>创建的项目中会默认安装：</p><ul><li><strong>react</strong> : React 框架的核心</li><li><strong>react-dom</strong> : React 视图渲染的核心 [基于 React 构建 WebApp（HTML 页面）]</li><li><strong>react-script</strong>: 脚手架为了让项目目录看起来干净一点，把 Webpack 打包的规则及相关的插件、预处理器等都隐藏到了 node_modules 目录下，react-scripts 就是脚手架中自己对打包命令的一种封装，基于它打包，会调用 node_modules 中的 Webpack 等进行处理</li></ul><p>初始化项目的<code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/jest-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.16.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/user-event&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-scripts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;web-vitals&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.4&quot;</span> <span class="comment">// 性能检测工具</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 打包命令是基于 react-scripts 处理的</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span><span class="punctuation">,</span> <span class="comment">// 开发环境：在本地启动 Web 服务器，预览打包内容</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts build&quot;</span><span class="punctuation">,</span> <span class="comment">// 生产环境：打包部署，打包的内容输出到 dist 目录</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts test&quot;</span><span class="punctuation">,</span> <span class="comment">// 单元测试</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span> <span class="comment">// 暴露 Webpack 配置，可以修改默认配置</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 对 Webpack 中 ESLint 词法检测的相关配置</span></span><br><span class="line">  <span class="comment">// 词法检测</span></span><br><span class="line">  <span class="comment">// - 词法错误（不符合标准规范）</span></span><br><span class="line">  <span class="comment">// - 不符合标准（代码本身不报错，但不符合 ESLint 的检测规范）</span></span><br><span class="line">  <span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;react-app&quot;</span><span class="punctuation">,</span> <span class="string">&quot;react-app/jest&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 基于 browserlist 规范设置浏览器的兼容情况</span></span><br><span class="line">  <span class="comment">// - postcss-loader + autoprefixer 会给 CSS3 设置相关的前缀</span></span><br><span class="line">  <span class="comment">// babel-loader 会把 ES6 编译为 ES5</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;&gt;0.2%&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用率超过 0.2% 的浏览器</span></span><br><span class="line">      <span class="string">&quot;not dead&quot;</span><span class="punctuation">,</span> <span class="comment">// 不考虑 IE</span></span><br><span class="line">      <span class="string">&quot;not op_mini all&quot;</span> <span class="comment">// 不考虑欧朋浏览器</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="comment">// 不兼容低版本和 IE 浏览器</span></span><br><span class="line">      <span class="string">&quot;last 1 chrome version&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;last 1 firefox version&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>值得一提的是，JSON 文件对格式的要求十分严格，是不允许注释的，上面的注释仅帮助理解，在文件中不可使用。</p></blockquote><p>根目录之下，除了 node_modules 子目录，还有两个非常重要的子目录分别为：</p><ul><li><strong>src</strong>: 所有后续编写的代码，几乎都放在该目录下「打包的时候，一般只对这个目录下的代码进行处理」</li><li><strong>public</strong>：存放页面模版</li></ul><p>将 src 目录下的大部分文件删除，仅留下 index.jsx（如果后缀是 .js，改为 .jsx）文件，其内容改为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;/* React 的严格语法模式，它和 JS 中的 &quot;use strict&quot; 并不相同 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Explosion!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将 public 目录下的大部分文件删除，仅留下 favicon.ico（项目网站的 logo 图标）和 index.html 文件，并将 index.html 的内容改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后期 Webpack 打包时，会对这个语法进行编译，其表示 public 这个目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React!!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="脚手架的进阶应用"><a href="#脚手架的进阶应用" class="headerlink" title="脚手架的进阶应用"></a>脚手架的进阶应用</h3><p>暴露 webpack 配置</p><p>前面说到，react-scripts 把 Webpack 打包的规则及相关的插件、预处理器等都隐藏到了 node_modules 目录下了。那么，如果我们想要修改 Webpack 的一些默认配置时，该怎么办呢？</p><p>这时就需要使用 <code>eject</code> 命令了，即：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run eject <span class="comment"># 或者 yarn eject</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：一旦暴露 Webpack 配置，该操作是永久的，就不能还原了。</p></blockquote><p>这时，会发现根目录下会多了 config 和 scripts 两个文件夹，并且 package.json 中内容会变得非常多（把 Webpack 打包需要的所有模块都放在了依赖项中）。</p><p>其中，&#x2F;config&#x2F;webpack 下有几个文件值得注意：</p><ul><li>webpack.config.js：脚手架中默认 Webpack 打包的配置</li><li>webpackDevServer.config.js：默认 web pack-dev-server 的配置</li><li>paths.js：打包中用到的路径</li></ul><p>scripts 目录中的 build.js 是后期执行相关打包命令的入口文件。</p><p>在 package.json 增加的依赖中，有几个模块值得注意：</p><ul><li><p>babel-preset-react-app：它是对 <a href="https://github.com/babel">@babel</a>&#x2F;preset-env 语法包的重写，目的是让语法包也可以识别 React 的 jsx 语法，实现代码转换</p><blockquote><p>create-react- app 脚手架默认配置是使用的 sass 预编译语言，如果项目中使用的就是 sass，则无需处理；如果使用的是 less 或 stylus，则需要自己处理。</p></blockquote></li><li><p>package.json 中的 scripts 也发生了变化，为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/start.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/build.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/test.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li><li><p>package.json 中还增加了 babel 配置项：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 对 babel<span class="literal">-loader</span> 进行额外配置，等价于 babel.config.js</span><br><span class="line"><span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;react-app&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见配置修改"><a href="#常见配置修改" class="headerlink" title="常见配置修改"></a>常见配置修改</h3><h4 id="使用-less"><a href="#使用-less" class="headerlink" title="使用 less"></a>使用 less</h4><p>前面提到，脚手架默认配置是使用的 sass 预编译语言，如果要使用 less，需要自己进行配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install less less<span class="literal">-loader</span>@<span class="number">8</span> <span class="comment"># 新版本的 less-loader 兼容性不好</span></span><br><span class="line">npm uninstall sass<span class="literal">-loader</span></span><br></pre></td></tr></table></figure><p>然后修改暴露出来的 webpack.config.js 中的配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">...</span><br><span class="line">const sassRegex = /\.(scss|sass)<span class="variable">$</span>/;</span><br><span class="line">const sassModuleRegex = /\.module\.(scss|sass)<span class="variable">$</span>/;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    test: sassRegex,</span><br><span class="line">    exclude: sassModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: <span class="number">3</span>,</span><br><span class="line">            sourceMap: isEnvProduction</span><br><span class="line">            ? shouldUseSourceMap</span><br><span class="line">            : isEnvDevelopment,</span><br><span class="line">            modules: &#123;</span><br><span class="line">                mode: <span class="string">&#x27;icss&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    sideEffects: true,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: sassModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: <span class="number">3</span>,</span><br><span class="line">            sourceMap: isEnvProduction</span><br><span class="line">            ? shouldUseSourceMap</span><br><span class="line">            : isEnvDevelopment,</span><br><span class="line">            modules: &#123;</span><br><span class="line">                mode: <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">                getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">// 修改后</span><br><span class="line">...</span><br><span class="line">const lessRegex = /\.less<span class="variable">$</span>/;</span><br><span class="line">const lessModuleRegex = /\.module\.less<span class="variable">$</span>/;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    test: lessRegex,</span><br><span class="line">    exclude: lessModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: <span class="number">3</span>,</span><br><span class="line">            sourceMap: isEnvProduction</span><br><span class="line">            ? shouldUseSourceMap</span><br><span class="line">            : isEnvDevelopment,</span><br><span class="line">            modules: &#123;</span><br><span class="line">                mode: <span class="string">&#x27;icss&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    sideEffects: true,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: lessModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: <span class="number">3</span>,</span><br><span class="line">            sourceMap: isEnvProduction</span><br><span class="line">            ? shouldUseSourceMap</span><br><span class="line">            : isEnvDevelopment,</span><br><span class="line">            modules: &#123;</span><br><span class="line">                mode: <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">                getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="增加-alias"><a href="#增加-alias" class="headerlink" title="增加 alias @"></a>增加 alias @</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// path.js中有</span><br><span class="line">// 在暴露 Webpack 配置之后，项目中多了 config 文件夹，其内部有paths.js 文件，其中导出的代码中，有一行为：</span><br><span class="line">appSrc: resolveApp(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">// 修改前</span><br><span class="line">extensions: paths.moduleFileExtensions</span><br><span class="line">    .map(ext =&gt; `.<span class="variable">$</span>&#123;ext&#125;`)</span><br><span class="line">    .filter(ext =&gt; useTypeScript || !ext.includes(<span class="string">&#x27;ts&#x27;</span>)),</span><br><span class="line">alias: &#123;</span><br><span class="line">    <span class="string">&#x27;react-native&#x27;</span>: <span class="string">&#x27;react-native-web&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">// 修改后</span><br><span class="line">extensions: paths.moduleFileExtensions</span><br><span class="line">    .map(ext =&gt; `.<span class="variable">$</span>&#123;ext&#125;`)</span><br><span class="line">    .filter(ext =&gt; useTypeScript || !ext.includes(<span class="string">&#x27;ts&#x27;</span>)),</span><br><span class="line">alias: &#123;</span><br><span class="line">    <span class="string">&#x27;@&#x27;</span>: paths.appSrc,</span><br><span class="line">    <span class="string">&#x27;react-native&#x27;</span>: <span class="string">&#x27;react-native-web&#x27;</span>,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="修改域名或端口号"><a href="#修改域名或端口号" class="headerlink" title="修改域名或端口号"></a>修改域名或端口号</h4><p>默认情况下，启动项目使用的是 <code>localhost:3000</code>，可以在 scripts&#x2F;start.js 文件中修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULT_PORT</span> = <span class="built_in">parseInt</span>(process.<span class="property">env</span>.<span class="property">PORT</span>, <span class="number">10</span>) || <span class="number">3000</span> <span class="comment">// 可修改端口号</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = process.<span class="property">env</span>.<span class="property">HOST</span> || <span class="string">&#x27;0.0.0.0&#x27;</span> <span class="comment">// 可修改 IP（或域名）</span></span><br></pre></td></tr></table></figure><p>如果想基于修改环境变量的方式来改，需要先安装 cross-env，如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i cross-env # 或 yarn add cross-env</span></span><br><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/start.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env PORT=8080 node scripts/start.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="修改浏览器兼容"><a href="#修改浏览器兼容" class="headerlink" title="修改浏览器兼容"></a>修改浏览器兼容</h4><p>如果需要修改浏览器的兼容性，则需要修改 package.json 中 <code>&quot;browserslist&quot;</code> 项的内容。</p><p>但是，修改兼容列表实现浏览器兼容时，只能解决两个问题，即：</p><ol><li>对 postcss-loader 生效，控制 CSS3 的前缀</li><li>对 babel-loader 生效，控制 ES6 的转换</li></ol><p>但还存在一个问题，就是无法处理 ES6 内置 API 的兼容。</p><p>为了解决这个问题，你可以安装 <a href="https://github.com/babel">@babel</a>&#x2F;polyfill（其作用是对常见的内置 API 进行重写），然后在入口文件（index.jsx）中引入 <code>import &#39;@babel/polyfill&#39;</code>。</p><p>但是，在脚手架中，通常不需要安装它，因为脚手架默认已经安装了 react-app-polyfill，它是对 <a href="https://github.com/babel">@babel</a>&#x2F;polyfill 的重写，仅需要在入口文件（index.jsx）中引入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对 ES6 内置 API 的兼容性处理</span></span><br><span class="line">import &#x27;react-app-polyfill/ie9&#x27;</span><br><span class="line">import &#x27;react-app-polyfill/ie11&#x27;</span><br><span class="line">import &#x27;react-app-polyfill/stable&#x27;</span><br></pre></td></tr></table></figure><h1 id="MVC-模式和-MVVM-模式"><a href="#MVC-模式和-MVVM-模式" class="headerlink" title="MVC 模式和 MVVM 模式"></a>MVC 模式和 MVVM 模式</h1><p>主流 web 前端框架</p><ul><li>React</li><li>Vue</li><li>Angular</li></ul><p>主流设计思想：不直接操作 DOM，而是改成数据驱动的思想</p><p>操作 DOM 思想：</p><ul><li>操作 DOM 比较消耗性能，不熟悉可能会导致 DOM 重排&#x2F;重绘等</li><li>操作起来也相对麻烦一些</li></ul><p>数据驱动思想：</p><ul><li>操作数据，框架会按照相关的数据，让页面重新渲染</li><li>框架底层构建从虚拟 DOM（Virtual DOM）到真实 DOM 的渲染体系，有效避免 DOM 的重排和重绘</li><li>相比真实 DOM，虚拟 DOM 更为轻量级，效率更高</li><li>开发效率高，性能高</li></ul><p>React 框架采用的是 MVC 体系；Vue 采用的是 MVVM 体系。</p><p>MVC &#x3D; Model + View + Controler 控制层</p><ul><li><strong>单向驱动</strong>（视图 -&gt; 数据需要开发者自行写代码实现）</li><li>需要按照专业的语法去构建视图（页面）：React 中是基于 jsx 语法来构建视图的</li><li>构建数据层：但凡在视图中，需要“动态”处理的（需要变化的，不论是样式还是内容），都要有对应的数据模型</li><li>控制层：当在视图中（或者根据业务需求）进行某些操作时，都是去修改相关的数据，然后 React 框架会按照最新的数据，重新渲染视图，以此让用户看到最新的效果</li></ul><p>MVVM &#x3D; Model 数据层 + View 视图层 + ViewModel 数据视图监听层</p><ul><li><strong>双向驱动</strong></li><li>数据驱动视图的渲染：监听数据的更新，让视图重新渲染</li><li>视图驱动数据的更改：监听页面中表单元素的内容改变，自动去修改相关的数据</li><li>Vue 自己实现了 Template</li></ul><h1 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h1><p>jsx：JavaScript amd XML (html) 把 JS 和 HTML 标签混合在一起</p><blockquote><p>jsx 实际上就是一种js的增强性语法 babel中将jsx最后编译成为js 也就是将jsx中一些功能转化成js中可以实现的部分 比如渲染的<app></app> 就会转换成js对象去表示当前元素的信息 类似于vue中的dom节点</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span> <span class="comment">// React 语法核心</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span> <span class="comment">// 构建 HTML(WebApp) 的核心</span></span><br><span class="line"><span class="comment">// 获取页面中的 #root 容器，作为根容器，不能将 html、body 元素作为根容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"><span class="comment">// 基于 render 方法渲染编写的视图，把渲染后的内容，全部插入到 #root 元素中</span></span><br><span class="line"><span class="comment">// 每一个构建的视图是能有一个根节点</span></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 空文档标记标签 React.Fragment，不会增加层结构，既保证了只有一个根节点，又不增加一个 HTML 层级结构 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Explosion！！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以通过 <code>&#123;&#125;</code> 嵌入 JS 表达式来渲染：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&quot;root&quot;));</span><br><span class="line">let text = &quot;Explosion&quot;;</span><br><span class="line">root.render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;text&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>常见的 JS 表达式有：</p><ul><li>变量&#x2F;值</li><li>数学运算</li><li>三目表达式</li><li>借助于数组迭代方法的循环，<code>map filter</code>等</li><li>有返回值的函数调用</li></ul><p><code>&#123;&#125;</code> 语法中嵌入不同的值，所呈现出来的特点如下：</p><ul><li><p>number &#x2F; string：值是什么，就渲染出来什么</p></li><li><p>bool &#x2F; null &#x2F; undefined &#x2F; Symbol &#x2F; Bigint：渲染内容是空</p></li><li><p>普通对象：不支持渲染</p></li><li><p>数组对象：把每一项拿出来，分别渲染（并不是变为字符串渲染，中间没有逗号，如果数组中有不支持渲染的元素，如普通对象，也会报错）</p></li><li><p>正则对象、时间对象、包装类对象：不支持渲染</p></li><li><p>函数对象：不支持在 <code>&#123;&#125;</code> 中渲染，但是可以作为函数组件，作为组件 <code>&lt;componment /&gt;</code> 渲染</p><blockquote><p>除数组对象之外，其余对象一般都不支持在 <code>&#123;&#125;</code> 中渲染，但也有特殊情况：</p><ul><li>JSX 虚拟 DOM 对象</li><li>给元素设置 style 样式，要求写成一个对象格式</li></ul></blockquote></li></ul><p>元素设置行内样式<br>行内样式，需要基于对象的格式处理，直接写成字符串会报错。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;<span class="attr">red</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">18px</span>&#x27;&#125;&#125;&gt;</span>Learn React<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式属性要基于小驼峰命名法。<br>设置样式类名：要把 <code>class</code> 替换为 <code>className</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需求一：基于数据的值，来判断元素的显示隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;/* 控制元素是否显示，不论显示还是隐藏，元素本身已经渲染出来了 */&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">display:</span> <span class="attr">this.flag</span> ? &quot;<span class="attr">block</span>&quot; <span class="attr">:</span> &quot;<span class="attr">none</span>&quot;</span></span><br><span class="line"><span class="tag">        &#125;&#125;&gt;</span>显示</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;/* 控制元素是否渲染 */&#125;</span><br><span class="line">    &#123;this.flag ? <span class="tag">&lt;<span class="name">button</span>&gt;</span>渲染/不渲染<span class="tag">&lt;/<span class="name">button</span>&gt;</span> : null&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需求二：从服务器获取了一组列表数据，循环动态绑定相关的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;))</span><br><span class="line">let data = [</span><br><span class="line">    &#123;</span><br><span class="line">        id: 1,</span><br><span class="line">        title: &#x27;新闻一&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: 2,</span><br><span class="line">        title: &#x27;新闻二&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: 3,</span><br><span class="line">        title: &#x27;新闻三&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">root.render(</span><br><span class="line">    <span class="tag">&lt;&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>今日新闻<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;news-box&quot;</span>&gt;</span></span><br><span class="line">            &#123;</span><br><span class="line">                data.map( (item, index) =&gt; &#123;</span><br><span class="line">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;item.id&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#125; )</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        &#123;/* 扩展需求：没有数组，就是想单独循环 5 ci */&#125;</span><br><span class="line">        &#123;</span><br><span class="line">            new Array(5).fill(null).map( (_, index) =&gt; &#123;</span><br><span class="line">                return <span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span><br><span class="line">                    按钮&#123;index + 1&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>对于 <code>Array()</code> 函数，如果参数仅传入一个数值，则该参数表示长度，即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>) <span class="comment">// 返回数组长度为 5 的稀疏数组，其每一项都是 empty</span></span><br></pre></td></tr></table></figure><p>使用数组的迭代方法（<code>forEach</code> 或 <code>map</code>），它们不会去迭代稀疏数组，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;OK&#x27;</span>) <span class="comment">// 不打印任何输出</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以基于数组的 <code>fill</code> 方法，将稀疏数组进行填充，变为密集数组，就可以使用数组的迭代方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">fill</span>(<span class="literal">null</span>) <span class="comment">// arr2 = [null, null, null, null, null]</span></span><br><span class="line">arr2.<span class="title function_">forEach</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(&amp;#<span class="number">39</span>;<span class="variable constant_">OK</span>&amp;#<span class="number">39</span>;) <span class="comment">// 输出 5 次 &amp;#39;ok&amp;#39;</span></span><br><span class="line">&#125; )J</span><br></pre></td></tr></table></figure></blockquote><h1 id="JSX-底层渲染机制"><a href="#JSX-底层渲染机制" class="headerlink" title="JSX 底层渲染机制"></a>JSX 底层渲染机制</h1><ul><li><p>编写的 JSX 语法，编译成虚拟 DOM 对象，virtual DOM 对象是一个普通的 JS 对象，用来描述真实 DOM 对象的</p></li><li><p>虚拟 DOM 对象：框架内部自构建的一套对象体系(对象的相关成员都是 React 内部规定的，基于属性构建视图，相关特征)</p></li><li><p>基于 babel-preset-react-app 插件，把 JSX 语法编译成 React.createElement(…)语法,React.createElement(ele,props,…children)</p><blockquote><p>ele:元素类型，字符串或者函数，函数就是组件<br>props:当前元素的属性对象,没有就是 null</p><p>children:当前元素的子元素，没有就是 undefined</p></blockquote></li><li><p>React.createElement 执行，返回一个对象，对象中包含了当前元素的描述信息(虚拟 DOM 对象)</p></li><li><pre><code class="javascript">let virtualDOM = &#123;  $$typeof: Symbol(react.element),  ref: null,  key: null,  type: &#39;h1&#39;, // 标签名 [组件]  props: &#123;    id: &#39;title&#39;,    className: &#39;title&#39;,    children: &#39;hello world&#39;  &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 把构建的 virtual DOM 对象渲染成真实的 DOM 元素，第一次渲染是把所有的内容都渲染到页面中，第二次及以后的渲染，都是把最新的数据和上一次的虚拟 DOM 进行比对(DOM-DIFF)，把不同的地方重新渲染(PATCH)，这样可以提升渲染的性能</span><br><span class="line"></span><br><span class="line">基于 ReactDom 中的 render 方法</span><br><span class="line"></span><br><span class="line">- v16</span><br><span class="line"></span><br><span class="line">  ```javascript</span><br><span class="line">  ReactDOM.render(virtualDOM, container, callback)</span><br><span class="line">  ReactDOM.render(&lt;&gt;...&lt;/&gt;, document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure></code></pre></li><li><p>v18</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cosnt root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(doucment.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">   root.<span class="title function_">render</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span>...<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">   )</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>之所以有区别是因为 在react18 中默认的create-react-app中引入的是”react-dom&#x2F;client” 是客户端(浏览器)使用的包 而在react16中使用的是”react-dom” 其根对象中包括了ReactDom.render 方法</p></blockquote><p><strong>封装一个对象的迭代方法</strong></p><ol><li>基于传统的 for&#x2F;in 循环，会存在一些弊端<em>【性能差(公有私有都会迭代)，只能迭代”可枚举”，非 Symbol 类型的属性】</em></li><li>解决办法：获取对象的所有私有属性<br>a. <code>Object.getOwnPropertyNames(arr)</code> –&gt; 获取对象的私有属性(不包含 Symbol 类型的属性)<br>b. <code>Object.getOwnPropertySymbols(arr)</code> –&gt; 获取对象的私有 Symbol 类型的属性名<br>c. 获取所有私有属性<br><code>let keys = Object.getOwnPropertyNames(arr).concat(Object.getOwnPropertySymbols(arr))</code></li><li>可以基于 ES6 中的 reflect.ownKeys 代替上述操作 <em>[不能兼容 IE]</em><br><code>let keys = Reflect.ownKeys(arr)</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">each</span> = (<span class="params">obj: any, callback: <span class="built_in">Function</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;obj is not a object&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (callback === <span class="literal">null</span> || <span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;callback is not a function&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line">  keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(key, obj[key])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数组件的底层渲染机制"><a href="#函数组件的底层渲染机制" class="headerlink" title="函数组件的底层渲染机制"></a>函数组件的底层渲染机制</h1><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>使用函数去返回<code>JSX</code>试图的组件的写法就是函数组件</p><p>调用: 基于 ES6Module 规范，导入创建的组件可以不用.jsx，写标签调用组件即可<br><code>&lt;Component/ &gt;单闭合 &lt;Component&gt;&lt;/Component&gt; 双闭合</code></p><p>调用组件的时候可以给调用的组件设置传递各种各样的属性<br><code>&lt;DemoOne title=&quot;我是标题&quot; x=&#123;10&#125; data=&#123;[100,200]&#125; className=&quot;box&quot; style=&#123;&#123;fontSize:'20px'&#125;&#125;&gt;&lt;/DemoOne&gt;</code><br>a. 如果设置的属性不是字符串格式，需要基于<code>&#123;&#125;</code> 进行嵌套<br>b. 调用组件的时候，可以把一些数据&#x2F;信息基于属性 props 的方式，传递给组件</p><p><strong>命名：组件的名字，采用大驼峰 PascalCase 命名</strong></p><p><strong>渲染机制</strong> :<br>1 基于<code>babel-preset-react-app</code>把调用的组件转换为 createElement 格式(babel 插件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">DemoOne</span>,&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;\u62ll\u662F\u6807\u9898&quot;</span>,</span><br><span class="line"><span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">data</span>: [<span class="number">100</span>,<span class="number">200</span>],</span><br><span class="line"><span class="attr">className</span>: <span class="string">&quot;box&quot;</span>,</span><br><span class="line"><span class="attr">style</span>: &#123;</span><br><span class="line"><span class="attr">fontSize</span>: <span class="string">&#x27;20px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2 把 createElement 方法执行，创建出一个 virtualDom 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">$$typeof</span>: <span class="title class_">Symbol</span>(react.<span class="property">element</span>),</span><br><span class="line">    <span class="attr">key</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;<span class="attr">title</span>: <span class="string">&#x27;我是标题&#x27;</span>,<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">data</span>: 数组,<span class="attr">className</span>: <span class="string">&#x27;box&#x27;</span>, <span class="attr">style</span>: &#123;<span class="attr">fontSize</span>: <span class="string">&#x27;20px&#x27;</span>&#125;&#125;,<span class="comment">// 子节点[双闭合调用，则也包含children储存子节点]</span></span><br><span class="line">    <span class="attr">ref</span>: <span class="literal">null</span>.</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">DemoOne</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 基于 root.render 把 virtualDom 变成真是的 Dom<br>type 值不再是一个字符串,而是变成一个函数此时</p><ul><li>把函数执行 -&gt; DemoOne() -&gt; <code>&lt;DemoOne /&gt;</code></li><li>把 virtualDom 中的 props,作为实参传递给函数 -&gt; <code>DemoOne(props)</code></li><li>接收函数执行的返回结果(当前组件的 <code>virtualDOM</code> 对像)</li><li>最后基于 render 把组件返回的虚拟 DOM 变成真实的 DOM，插入到<code>#root</code> 容器中</li></ul><h2 id="属性-props-的处理"><a href="#属性-props-的处理" class="headerlink" title="属性 props 的处理"></a>属性 props 的处理</h2><p>调用组件，传递进去的属性是“只读”的 [原理：props 对象被冻结了]<br>获取： props.xxx<br>修改：props.xxx &#x3D; xxx &#x3D;&#x3D;&gt; 报错 error</p><blockquote><p>关于对象的规则设置</p><ul><li>冻结<br>冻结对象：Object.freeze(obj)<br>检测是否被冻结：Object.isFrozen(obj) &#x3D;&gt; true&#x2F;false<br>被冻结的对象：不能修改成员值、不能新增成员、不能删除现有成员、不能给成员做劫持[Object.defineProperty]</li><li>密封<br>密封对象：Object.seal(obj)<br>检测是否被密封：Object.isSealed(obj)<br>被密封的对象：可以修改成员的值，但也不能删、不能新增、不能劫持</li><li>扩展<br>把对象设置成不可扩展：Object.preventExtensions(obj)<br>检测是否可扩展：Object,isExtensible(obj)<br>被设置不可扩展的对象：除了不能新增成员，其余都可操作</li></ul></blockquote><p> 作用：父组件(index.jsx)调用子组件(DemoOne.jsx)的时候,可以基于属性，把不同的信息传递给子组件；子组件接受相应的属性值，呈现出不同的效果，让组件的复用性更强！！<br>虽然对于传递进来的属性，我们不能直接修改，但是可以做一些规则校验<br>​ 设置默认值：<br>​ 函数组件.defaultProps &#x3D; {<br>​ x：0,<br>​ …..<br>​ }<br>​ 设置其他规则，例如：数据值格式、是否必传。。。[依赖官方的插件：prop-types]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`import PropTypes from &#x27;prop-types&#x27;`</span></span><br><span class="line">函数组件.<span class="property">propTypes</span> = &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attr">title</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span></span><br><span class="line">​ <span class="attr">x</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line">​ <span class="attr">y</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([</span><br><span class="line"></span><br><span class="line"> <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line"></span><br><span class="line"> <span class="title class_">PropTypes</span>.<span class="property">bool</span></span><br><span class="line">​ ])</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递进来的属性，首先会经历规则的校验，不管校验成功还是失败，最后都会把属性给 props，只不过如果不符合设定的规则，控制台会抛出警告错误(不影响属性值的获取)<br>如果想把传递的属性值进行修改，我们可以赋值给其他内容或者修改变量&#x2F;状态值</p><h2 id="插槽-slot-处理机制"><a href="#插槽-slot-处理机制" class="headerlink" title="插槽 slot 处理机制"></a>插槽 slot 处理机制</h2><p>封装 DemoOne 组件具有更强的复用性 [传递 HTML 结构]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;DemoOne title=&#x27;xx&#x27; x=&#123;100&#125;&gt;</span><br><span class="line">    &lt;button solt=&#x27;explosion&#x27;&gt;确定&lt;/button&gt;</span><br><span class="line">    &lt;button solt=&#x27;explosion1&#x27;&gt;取消&lt;/button&gt;</span><br><span class="line">&lt;/DemoOne&gt;</span><br></pre></td></tr></table></figure><p>封装组件的时候，预留插槽位置，内容不用写，调用组件的时候基于双闭合调用的方式把插槽信息【子节点信息】传递给组件，组件内部进行渲染即可<br><code>props.children</code> 获取子节点信息</p><blockquote><p>传递数据用属性<br>传递 HTML 结构用插槽</p></blockquote><p>在组件中对<code>children</code>进行处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const DemoOne = (props) =&gt; &#123;</span><br><span class="line">    let &#123;title, x, children &#125; = props</span><br><span class="line">    // 对children的类型做处理 可以基于 React.Children 对象中提供的方法，对props.children做处理：count\forEach\map\toArray ... (对children做了较好的处理)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如下面的一个简单的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root.render(</span><br><span class="line">&lt;&gt;</span><br><span class="line">    &lt;DemoOne title=&#x27;哈哈&#x27; x=&#123;10&#125;&gt;</span><br><span class="line">        // 取slot字段名 进行判断筛选处理</span><br><span class="line">        &lt;span slot=&#x27;footer&#x27;&gt;我是页脚&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;哈哈&lt;/span&gt;</span><br><span class="line">        &lt;span slot=&#x27;header&#x27;&gt;我是页眉&lt;/span&gt;</span><br><span class="line">    &lt;/DemoOne&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const DemoOne = (props) =&gt; &#123;</span><br><span class="line">    let &#123;title, x, children &#125; = props</span><br><span class="line">    children = React.Children.toArray(children)</span><br><span class="line">    let headerSlot=[],</span><br><span class="line">        footerSlot=[],</span><br><span class="line">        defaultSlot=[];</span><br><span class="line">    children.forEach(child=&gt;&#123;</span><br><span class="line">        // 传递进来的插槽信息都是编译的virtualDOM 不是标签</span><br><span class="line">        let &#123;slot&#125; = child.props</span><br><span class="line">        if (slot === &#x27;header&#x27;) &#123;</span><br><span class="line">            headerSlot.push(child)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &#123;headerSlot&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态组件"><a href="#静态组件" class="headerlink" title="静态组件"></a>静态组件</h2><p>函数组件是静态组件<br>第一次渲染组件，把函数执行：</p><ul><li>产生一个私有的上下文：EC(V)</li><li>把解析出来的 props [包含 children] 传递进来 [被冻结]</li><li>对函数返回的 JSX 元素进行渲染</li></ul><p> 当我们点击按钮的时候，会把函数绑定并且执行</p><ul><li>修改上级上下文 EC(V)中变量</li><li>私有变量值发生了改变</li><li>视图不会更新</li></ul><p>类组件写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">创建类组件</span><br><span class="line">创建一个构造函数(类)</span><br><span class="line">要求必须继承React.Component/PureComponent这个类</span><br><span class="line">习惯于使用ES6中的class创建类</span><br><span class="line">必须给类设置render方法放在原型上面在render中返回需要渲染的视图</span><br><span class="line">*/</span><br><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">class Vote extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-中的事件"><a href="#React-中的事件" class="headerlink" title="React 中的事件"></a>React 中的事件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">const App = () =&gt; &#123;</span><br><span class="line">const clickHandler = (event) =&gt; &#123;</span><br><span class="line">event.preventDefault() // 取消默认行为</span><br><span class="line">event.stopPropagation() // 取消事件的冒泡</span><br><span class="line"></span><br><span class="line">alert(&quot;我是App中的clickHandler！&quot;)</span><br><span class="line">/*</span><br><span class="line"> *     在React中，无法通过return false取消默认行为</span><br><span class="line"> *     return false;</span><br><span class="line"> *</span><br><span class="line"> *     事件对象</span><br><span class="line"> *         - React事件中同样会传递事件对象，可以在响应函数中定义参数来接收事件对象</span><br><span class="line"> *         - React中的事件对象同样不是原生的事件对象，是经过React包装后的事件对象</span><br><span class="line"> *         - 由于对象进行过包装，所以使用过程中我们无需再去考虑兼容性问题</span><br><span class="line"> * */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">&lt;div</span><br><span class="line">onClick=&#123;() =&gt; &#123;</span><br><span class="line">alert(&quot;div&quot;)</span><br><span class="line">&#125;&#125;</span><br><span class="line">style=&#123;&#123;</span><br><span class="line">width: 200,</span><br><span class="line">height: 200,</span><br><span class="line">margin: &quot;100px auto&quot;,</span><br><span class="line">backgroundColor: &quot;#bfa&quot;,</span><br><span class="line">&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&#123;/*</span><br><span class="line">      在React中事件需要通过元素的属性来设置，</span><br><span class="line">        和原生JS不同，在React中事件的属性需要使用驼峰命名法：</span><br><span class="line">           onclick -&gt; onClick</span><br><span class="line">           onchange -&gt; onChange</span><br><span class="line">        属性值不能直接执行代码，而是需要一个回调函数：</span><br><span class="line">          onclick=&quot;alert(123)&quot;</span><br><span class="line">          onClick=&#123;()=&gt;&#123;alert(123)&#125;&#125;</span><br><span class="line">    */&#125;</span><br><span class="line">&lt;button</span><br><span class="line">onClick=&#123;() =&gt; &#123;</span><br><span class="line">alert(123)</span><br><span class="line">&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">点我一下</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;clickHandler&#125;&gt;哈哈&lt;/button&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;a href=&quot;https://www.baidu.com&quot; onClick=&#123;clickHandler&#125;&gt;</span><br><span class="line">超链接</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *   &lt;button onclick=&quot;alert(123)&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line"> *</span><br><span class="line"> *   &lt;button id=&quot;btn01&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line"> *</span><br><span class="line"> *   document.getElementById(&#x27;btn01&#x27;).onclick = function()&#123;&#125;;</span><br><span class="line"> *   document.getElementById(&#x27;btn01&#x27;).addEventListener(&#x27;click&#x27;, function()&#123;&#125;, false);</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">// 导出App</span><br><span class="line">export default App</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="React-中的-state"><a href="#React-中的-state" class="headerlink" title="React 中的 state"></a>React 中的 state</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数执行了 ---&gt; 组件创建完毕！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 在React中，当组件渲染完毕后，再修改组件中的变量，不会使组件重新渲染</span></span><br><span class="line"><span class="comment">   *   要使得组件可以收到变量的影响，必须在变量修改后对组件进行重新渲染</span></span><br><span class="line"><span class="comment">   *   这里我们就需要一个特殊变量，当这个变量被修改使，组件会自动重新渲染</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * state相当于一个变量，</span></span><br><span class="line"><span class="comment">   *   只是这个变量在React中进行了注册，</span></span><br><span class="line"><span class="comment">   *   React会监控这个变量的变化，当state发生变化时，会自动触发组件的重新渲染</span></span><br><span class="line"><span class="comment">   *   使得我们的修改可以在页面中呈现出来</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 在函数组件中，我们需要通过钩子函数，获取state</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 使用钩子 useState() 来创建state</span></span><br><span class="line"><span class="comment">   *   import &#123;useState&#125; from &quot;react&quot;;</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 它需要一个值作为参数，这个值就是state的初始值</span></span><br><span class="line"><span class="comment">   *   该函数会返回一个数组</span></span><br><span class="line"><span class="comment">   *     数组中第一个元素，是初始值</span></span><br><span class="line"><span class="comment">   *       - 初始值只用来显示数据，直接修改不会触发组件的重新渲染</span></span><br><span class="line"><span class="comment">   *     数组中的第二个元素，是一个函数，通常会命名为setXxx</span></span><br><span class="line"><span class="comment">   *       - 这个函数用来修改state，调用其修改state后会触发组件的重新渲染，</span></span><br><span class="line"><span class="comment">   *           并且使用函数中的值作为新的state值</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">// let counter = result[0];</span></span><br><span class="line">  <span class="comment">// let setCounter = result[1];</span></span><br><span class="line">  <span class="comment">// const [counter, setCounter] = result;</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   *   当点击+时，数字增大</span></span><br><span class="line"><span class="comment">   *   点击-时，数字减少</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个变量存储数字</span></span><br><span class="line">  <span class="comment">// let counter = 2;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 点击后数字+1</span></span><br><span class="line">    <span class="comment">// alert(&#x27;+1&#x27;);</span></span><br><span class="line">    <span class="comment">// counter++;</span></span><br><span class="line">    <span class="title function_">setCounter</span>(counter + <span class="number">1</span>) <span class="comment">// 将counter值修改为2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">lessHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 点击后数字-1</span></span><br><span class="line">    <span class="comment">// alert(&#x27;-1&#x27;);</span></span><br><span class="line">    <span class="comment">// counter--;</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">setCounter</span>(counter - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">app</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;lessHandler&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addHandler&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出App</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><h1 id="state-的注意"><a href="#state-的注意" class="headerlink" title="state 的注意"></a>state 的注意</h1><p><strong>state</strong></p><ul><li><p>state 实际就是一个被 React 管理的变量，当我们通过 setState()修改变量的值时，会触发组件的自动重新渲染</p></li><li><p>只有 state 值发生变化时，组件才会重新渲染</p></li><li><p>当 state 的值是一个对象时，修改时是使用新的对象去替换已有对象</p></li><li><p>当通过 setState 去修改一个 state 时，并不表示修改当前的 state 它修改的是组件下一次渲染时 state 值</p></li><li><p>setState()会触发组件的重新渲染，它是异步的所以当调用 setState()需要用旧 state 的值时，一定要注意<strong>有可能出现计算错误的情况</strong>为了避免这种情况，可以通过为 setState()传递回调函数的形式来修改 state 值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useState&#125; from &quot;react&quot;;</span><br><span class="line">const [counter, setCounter] = useState(1);</span><br><span class="line">const [user, setUser] = useState(&#123;name: &#x27;孙悟空&#x27;, age: 18&#125;);</span><br><span class="line">const addHandler = () =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            // setCounter(counter + 1); // 将counter值修改为2</span><br><span class="line">            setCounter((prevCounter)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">                /*</span><br><span class="line">                *   setState()中回调函数的返回值将会成为新的state值</span><br><span class="line">                *       回调函数执行时，React会将最新的state值作为参数传递</span><br><span class="line">                * */</span><br><span class="line">                return prevCounter + 1;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // setCounter(prevState =&gt; prevState + 1);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">        const updateUserHandler = () =&gt; &#123;</span><br><span class="line">        // setUser(&#123;name:&#x27;猪八戒&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">        // 如果直接修改旧的state对象，由于对象还是那个对象，所以不会生效</span><br><span class="line">        // user.name = &#x27;猪八戒&#x27;;</span><br><span class="line">        // console.log(user);</span><br><span class="line">        // setUser(user);</span><br><span class="line"></span><br><span class="line">        // const newUser = Object.assign(&#123;&#125;, user);</span><br><span class="line">        // newUser.name = &#x27;猪八戒&#x27;;</span><br><span class="line">        // setUser(newUser);</span><br><span class="line"></span><br><span class="line">        setUser(&#123;...user, name: &#x27;猪八戒&#x27;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    return &lt;div className=&#123;&#x27;app&#x27;&#125;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;counter&#125; -- &#123;user.name&#125; -- &#123;user.age&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;addHandler&#125;&gt;1&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;updateUserHandler&#125;&gt;2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 导出App</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></li></ul><h1 id="React-中的双向数据绑定"><a href="#React-中的双向数据绑定" class="headerlink" title="React 中的双向数据绑定"></a>React 中的双向数据绑定</h1><p><strong>使用<code>useState</code>去控制表单</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &quot;react&quot;</span><br><span class="line">import Card from &quot;../UI/Card/Card&quot;</span><br><span class="line">import &quot;./LogsForm.css&quot;</span><br><span class="line">const LogsForm = () =&gt; &#123;</span><br><span class="line">/*</span><br><span class="line"> *   当表单项发生变化时，获取用户输入的内容</span><br><span class="line"> * */</span><br><span class="line">// 创建三个变量，用来存储表单中的数据</span><br><span class="line">// let inputDate = &#x27;&#x27;;</span><br><span class="line">// let inputDesc = &#x27;&#x27;;</span><br><span class="line">// let inputTime = 0;</span><br><span class="line"></span><br><span class="line">// const [inputDate, setInputDate] = useState(&#x27;&#x27;);</span><br><span class="line">// const [inputDesc, setInputDesc] = useState(&#x27;&#x27;);</span><br><span class="line">// const [inputTime, setInputTime] = useState(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">// 将表单数据统一到一个state中</span><br><span class="line">const [formData, setFormData] = useState(&#123;</span><br><span class="line">inputDate: &quot;&quot;,</span><br><span class="line">inputDesc: &quot;&quot;,</span><br><span class="line">inputTime: &quot;&quot;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 创建一个响应函数，监听日期的变化</span><br><span class="line">const dateChangeHandler = (e) =&gt; &#123;</span><br><span class="line">// 获取到当前触发事件的对象</span><br><span class="line">// 事件对象中保存了当前事件触发时的所有信息</span><br><span class="line">// event.target 执行的是触发事件的对象（DOM对象）</span><br><span class="line">//console.log(e.target.value);</span><br><span class="line">// setInputDate(e.target.value);</span><br><span class="line">setFormData(&#123;</span><br><span class="line">...formData,</span><br><span class="line">inputDate: e.target.value,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 监听内容的变化</span><br><span class="line">const descChangeHandler = (e) =&gt; &#123;</span><br><span class="line">// 获取到当前触发事件的对象</span><br><span class="line">// 事件对象中保存了当前事件触发时的所有信息</span><br><span class="line">// event.target 执行的是触发事件的对象（DOM对象）</span><br><span class="line">//console.log(e.target.value);</span><br><span class="line">// setInputDesc(e.target.value);</span><br><span class="line"></span><br><span class="line">setFormData(&#123;</span><br><span class="line">...formData,</span><br><span class="line">inputDesc: e.target.value,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//监听时长的变化</span><br><span class="line">const timeChangeHandler = (e) =&gt; &#123;</span><br><span class="line">// 获取到当前触发事件的对象</span><br><span class="line">// 事件对象中保存了当前事件触发时的所有信息</span><br><span class="line">// event.target 执行的是触发事件的对象（DOM对象）</span><br><span class="line">//console.log(e.target.value);</span><br><span class="line">// setInputTime(e.target.value);</span><br><span class="line">setFormData(&#123;</span><br><span class="line">...formData,</span><br><span class="line">inputTime: e.target.value,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当表单提交时，汇总表单中的数据</span><br><span class="line">/*</span><br><span class="line"> *   在React中，通常表单不需要自行提交</span><br><span class="line"> *       而是要通过React提交</span><br><span class="line"> * */</span><br><span class="line">const formSubmitHandler = (e) =&gt; &#123;</span><br><span class="line">// 取消表单的默认行为</span><br><span class="line">e.preventDefault()</span><br><span class="line">// 获取表单项中的数据日期、内容、时长</span><br><span class="line">// 将数据拼装为一个对象</span><br><span class="line">const newLog = &#123;</span><br><span class="line">date: new Date(formData.inputDate),</span><br><span class="line">desc: formData.inputDesc,</span><br><span class="line">time: +formData.inputTime,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清空表单项</span><br><span class="line">setFormData(&#123;</span><br><span class="line">inputDate: &quot;&quot;,</span><br><span class="line">inputDesc: &quot;&quot;,</span><br><span class="line">inputTime: &quot;&quot;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(newLog)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *   提交表单后如何清空表单中的旧数据</span><br><span class="line"> *       现在这种表单，在React我们称为非受控组件</span><br><span class="line"> *</span><br><span class="line"> *   我们可以将表单中的数据存储到state中，</span><br><span class="line"> *       然后将state设置为表单项value值，</span><br><span class="line"> *       这样当表单项发生变化，state会随之变化，</span><br><span class="line"> *       反之，state发生变化，表单项也会跟着改变，这种操作我们就称为双向绑定</span><br><span class="line"> *       这样一来，表单就成为了一个受控组件</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">&lt;Card className=&quot;logs-form&quot;&gt;</span><br><span class="line">&lt;form onSubmit=&#123;formSubmitHandler&#125;&gt;</span><br><span class="line">&lt;div className=&quot;form-item&quot;&gt;</span><br><span class="line">&lt;label htmlFor=&quot;date&quot;&gt;日期&lt;/label&gt;</span><br><span class="line">&lt;input</span><br><span class="line">onChange=&#123;dateChangeHandler&#125;</span><br><span class="line">value=&#123;formData.inputDate&#125;</span><br><span class="line">id=&quot;date&quot;</span><br><span class="line">type=&quot;date&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;form-item&quot;&gt;</span><br><span class="line">&lt;label htmlFor=&quot;desc&quot;&gt;内容&lt;/label&gt;</span><br><span class="line">&lt;input</span><br><span class="line">onChange=&#123;descChangeHandler&#125;</span><br><span class="line">value=&#123;formData.inputDesc&#125;</span><br><span class="line">id=&quot;desc&quot;</span><br><span class="line">type=&quot;text&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;form-item&quot;&gt;</span><br><span class="line">&lt;label htmlFor=&quot;time&quot;&gt;时长&lt;/label&gt;</span><br><span class="line">&lt;input</span><br><span class="line">onChange=&#123;timeChangeHandler&#125;</span><br><span class="line">value=&#123;formData.inputTime&#125;</span><br><span class="line">id=&quot;time&quot;</span><br><span class="line">type=&quot;number&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;form-btn&quot;&gt;</span><br><span class="line">&lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/Card&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default LogsForm</span><br></pre></td></tr></table></figure><h1 id="React-中的-portal"><a href="#React-中的-portal" class="headerlink" title="React 中的 portal"></a>React 中的 portal</h1><ul><li><p>组件默认会作为父组件的后代渲染到页面中</p><blockquote><p>存在一些问题 比如要写对话框和模态框的时候需要渲染到根目录下</p></blockquote></li><li><p>通过 protal 可以将组件渲染到页面中的指定位置</p></li><li><p>使用方法</p><ul><li>在<code>index.html</code>添加一个新元素</li><li>修改组件的渲染方式<ul><li>通过 ReactDom.createPortal() 作为返回值创建元素</li><li>参数<ol><li>jsx (修改前 return 的代码)</li><li>目标位置 (DOM 元素)</li></ol></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Backdrop.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取backdrop的根元素</span></span><br><span class="line"><span class="keyword">const</span> backdropRoot = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;backdrop-root&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Backdrop</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;backdrop&quot;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    backdropRoot</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Backdrop</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="React-中的CSS-Module"><a href="#React-中的CSS-Module" class="headerlink" title="React 中的CSS-Module"></a>React 中的<code>CSS-Module</code></h1><p>CSS 模块</p><ul><li>类似于 Vue 中的 style 中的<code>scope</code>可以避免被全局污染</li><li>使用步骤<ol><li><em>创建一个 xxx.module.css</em></li><li><em>在组件中引入 css</em><br><code>import classes from &#39;./App.module.css&#39;;</code></li><li><em>通过 classes 来设置类</em><br><code>className=&#123;classes.p1&#125;</code></li><li><em>CSS 模块可以动态的设置唯一的 class 值</em></li></ol></li></ul><h1 id="React-Fragment"><a href="#React-Fragment" class="headerlink" title="React.Fragment"></a>React.Fragment</h1><ul><li>是一个专门用来作为父容器的组件</li><li><em>它只会将它里边的子元素直接返回，不会创建任何多余的元素</em></li><li>当我们希望有一个父容器<strong>但同时又不希望父容器在网页中产生多余的结构时</strong>就可以使用 Fragment</li></ul><h1 id="React-中的-Context"><a href="#React-中的-Context" class="headerlink" title="React 中的 Context"></a>React 中的 Context</h1><p><code>Context</code>相当于一个公共的存储空间,我们可以将多个组件中都需要访问的数据统一存储到一个<code>Context</code>中,这样无需通过<code>props</code>逐层传递,即可使组件访问到这些数据<br>通过<code>React.createContext()</code>创建 context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TestContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用方式</p><ul><li><p>使用方式一(不推荐)</p><ol><li><p>引入 context</p></li><li><p>使用<code>Xxx.Consumer</code>组件来创建元素</p></li><li><p>Comsumer 的标签体需要一个回调函数会将 context 设置为回调函数的参数通过参数能访问到 context 中存储的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TestContext</span> <span class="keyword">from</span> <span class="string">&#x27;../store/testContext&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">A</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TestContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(ctx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;ctx.name&#125; - &#123;ctx.age&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">TestContext.Consumer</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> A</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用 Context 方式二</p><ol><li>导入 Context</li><li>使用钩子函数 useContext()获取到 context</li><li>useContext() 需要一个 Context 作为参数它会将 Context 中数据获取并作为返回值返回</li></ol></li><li><p>Xxx.Provider</p><ul><li><p><em>表示数据的生产者，可以使用它来指定 Context 中的数据</em></p></li><li><p>通过 value 来指定 Context 中存储的数据， 这样一来，在该组件的所有的子组件中都可以通过 Context 来访问它所指定数据</p></li><li><p>当我们通过 Context 访问数据时，他会读取离他最近的 Provider 中的数据，如果没有 Provider，则读取 Context 中的默认数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TestContext</span> <span class="keyword">from</span> <span class="string">&#x27;../store/testContext&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">B</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 使用钩子函数获取Context</span></span><br><span class="line">  <span class="keyword">const</span> ctx = <span class="title function_">useContext</span>(<span class="title class_">TestContext</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;ctx.name&#125; -- &#123;ctx.age&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="React-中的-Effect"><a href="#React-中的-Effect" class="headerlink" title="React 中的 Effect"></a>React 中的 Effect</h1><h2 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h2><p><strong>React</strong>组件有部分逻辑都可以直接编写到组件的函数体中，像是对数组调用<code>filter、map</code>等方法，像是判断某个组件是否显示等。但是有一部分逻辑如果直接写在函数体中，会影响到组件的渲染，这部分会产生“副作用”的代码，是一定不能直接写在函数体中。</p><h2 id="React-StrictMode"><a href="#React-StrictMode" class="headerlink" title="React.StrictMode"></a>React.StrictMode</h2><p>编写 React 组件时，我们要极力的避免组件中出现那些会产生“副作用”的代码。同时，如果你的 React 使用了严格模式，也就是在 React 中使用了<code>React.StrictMode</code>标签，那么 React 会非常“智能”的去检查你的组件中是否写有副作用的代码，当然这个智能是加了引号的，我们来看看 React 官网的文档是如何说明的：</p><p>Strict mode can’t automatically detect side effects for you, but it can help you spot them by making them a little more deterministic. This is done by intentionally double-invoking the following functions:</p><ul><li>Class component <code>constructor</code>, <code>render</code>, and <code>shouldComponentUpdate</code> methods</li><li>Class component static <code>getDerivedStateFromProps</code> method</li><li>Function component bodies</li><li>State updater functions (the first argument to <code>setState</code>)</li><li>Functions passed to <code>useState</code>, <code>useMemo</code>, or <code>useReducer</code></li></ul><p>上文的关键字叫做“double-invoking”即重复调用，这句话是什么意思呢？大概意思就是，React 并不能自动替你发现副作用，但是它会想办法让它显现出来，从而让你发现它。那么它是怎么让你发现副作用的呢？React 的严格模式，在处于开发模式下，会主动的重复调用一些函数，以使副作用显现。所以在处于开发模式且开启了 React 严格模式时，这些函数会被调用两次：</p><ul><li>类组件的的 <code>constructor</code>, <code>render</code>, 和 <code>shouldComponentUpdate</code> 方法</li><li>类组件的静态方法 <code>getDerivedStateFromProps</code></li><li>函数组件的函数体</li><li>参数为函数的<code>setState</code></li><li>参数为函数的<code>useState</code>, <code>useMemo</code>, or <code>useReducer</code></li></ul><p>重复的调用会使副作用更容易凸显出来，你可以尝试着在函数组件的函数体中调用一个<code>console.log</code>你会发现它会执行两次</p><h2 id="setState-执行流程"><a href="#setState-执行流程" class="headerlink" title="setState 执行流程"></a>setState 执行流程</h2><p><strong>Too many re-renders</strong></p><ul><li>当我们直接在函数中调用 setState 时,就会触发上述报错</li><li>setState() 的执行流程 (函数组件)<br><code>setCount()</code>—&gt; dispatchSetDate()—&gt;会先判断，组件当时处于什么阶段 ( 如果是渲染阶段 —&gt; 不会检查 state 值是否相同 | 如果不是渲染阶段—&gt; 值不同，重新渲染；值相同，不重新渲染)</li></ul><h2 id="使用-useEffect"><a href="#使用-useEffect" class="headerlink" title="使用 useEffect"></a>使用 useEffect</h2><p><code>useEffect()</code>是一个钩子函数，需要一个函数作为参数，这个作为参数的函数，将会在组件渲染完毕后执行，开发中可以将会产生副作用的代码编写到其中</p><ul><li><p>默认情况下，useEffect()中的函数,会在组件渲染完成后调用，并且是每次渲染完成后都会调用</p></li><li><p>在 useEffect() 可以传递一个第二参数，第二参数是一个数组，在数组中可以指定 Effect 的依赖项，指定后，只有当依赖项发生变化时，Effect 才会被触发</p></li><li><p>通常会将 Effect 中使用的所有的变量都设置成依赖项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行了～～&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (ctx.<span class="property">totalAMount</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">setShowDetails</span>(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [ctx])</span><br></pre></td></tr></table></figure></li><li><p>**setState()**是由钩子函数 useState()生成的 不会发现变化可以不用加到 dep 里面</p></li><li><p>如果依赖项设置的是空数组，则意味 Effect 只会在组件初始化时触发一次</p></li></ul><h2 id="Effect-函数的返回"><a href="#Effect-函数的返回" class="headerlink" title="Effect 函数的返回"></a>Effect 函数的返回</h2><p>在 Effect 的回调函数中，可以指定一个函数作为返回值，这个函数可以称为清理函数，他会在下次 Effect 执行前调用可以在此函数中，做一些工作来清除上次 Effect 执行所带来的影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Effetc</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了&#x27;</span>)</span><br><span class="line">    props.<span class="title function_">onFilter</span>(keyword)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">clearTImeout</span>(timer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [keyword])</span><br></pre></td></tr></table></figure><h1 id="React-中的-Reducer"><a href="#React-中的-Reducer" class="headerlink" title="React 中的 Reducer"></a>React 中的 Reducer</h1><p>在 React 的函数组件中，我们可以通过 useState()来创建 state。这种创建 state 的方式会给我们返回两个东西 state 和 setState()。state 用来读取数据，而 setState()用来设置修改数据。但是这种方式也存在着一些不足，因为所有的修改 state 的方式都必须通过 setState()来进行，如果遇到一些复杂度比较高的 state 时，这种方式似乎就变得不是那么的优雅，比如现在有很多数据，但是<code>useState()</code>只给我们提供了一个<code>setCartData()</code>方法，就会很麻烦</p><p>为了解决复杂<code>State</code>带来的不便，<code>React</code>为我们提供了一个新的使用<code>State</code>的方式。<code>Reducer</code>个人认为<code>Reducer</code>可以翻译为“整合器”，它的作用就是将那些和同一个<code>state</code>相关的所有函数都整合到一起，方便在组件中进行调用。</p><p>当然工具都有其使用场景，<code>Reducer</code>也不例外，它只适用于那些比较复杂的<code>state</code>，对于简单的<code>state</code>使用<code>Reducer</code>只能是徒增烦恼。下面用一个简单的演示一下</p><p>和<code>State</code>相同<code>Reducer</code>也是一个钩子函数，语法如下：<br><code>const [state, dispatch] = useReducer(reducer, initialArg, init);</code><br>参数</p><ul><li><strong>reducer</strong>：整合函数<ul><li><em>对于我们当前 state 的所有操作都应该在该函数中定义</em></li><li><em>该函数的返回值，会成为 state 的新值</em></li><li><em>reducer 在执行时，会收到两个参数：</em><ul><li><em>state 当前最新的 state</em></li><li>action 它需要一个对象 在对象中会存储 dispatch 所发送的指令</li></ul></li></ul></li><li><strong>initialArg</strong> : state 的初始值，作用和 useState()中的值是一样</li></ul><p>返回值</p><ul><li><strong>数组</strong><ul><li><em>第一个参数，state 用来获取 state 的值</em></li><li><em>第二个参数，state 修改的派发器<strong>通过派发器可以发送操作 state 的命令</strong>具体的修改行为将会由另外一个函数(reducer)执行</em></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 为了避免reducer会重复创建，通常reducer会定义到组件的外部</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">countReducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// console.log(&#x27;reducer执行了！&#x27;, state);</span></span><br><span class="line">  <span class="comment">// console.log(action.type);</span></span><br><span class="line">  <span class="comment">// 可以根据action中不同type来执行不同的操作</span></span><br><span class="line">  <span class="comment">// if(action.type === &#x27;ADD&#x27;)&#123;</span></span><br><span class="line">  <span class="comment">//     return state + 1;</span></span><br><span class="line">  <span class="comment">// &#125;else if(action.type === &#x27;SUB&#x27;)&#123;</span></span><br><span class="line">  <span class="comment">//     return state - 1;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return state;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SUB&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 之前的写法</span></span><br><span class="line">  <span class="comment">// const [count, setCount] = useState(1);</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// const addHandler = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     setCount(prevState =&gt; prevState + 1);</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// const subHandler = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     setCount(prevState =&gt; prevState - 1);</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="comment">// 现在的写法</span></span><br><span class="line">  <span class="keyword">const</span> [count, countDispatch] = <span class="title function_">useReducer</span>(countReducer, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 增加count的值</span></span><br><span class="line">    <span class="title function_">countDispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">subHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 增加count的值</span></span><br><span class="line">    <span class="title function_">countDispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;SUB&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">fontSize:</span> <span class="attr">30</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width:</span> <span class="attr">200</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">height:</span> <span class="attr">200</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">margin:</span> &#x27;<span class="attr">100px</span> <span class="attr">auto</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">textAlign:</span> &#x27;<span class="attr">center</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;subHandler&#125;</span>&gt;</span>减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addHandler&#125;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-中的-memo"><a href="#React-中的-memo" class="headerlink" title="React 中的 memo"></a>React 中的 memo</h1><p><strong>React.memo()</strong> 是一个高阶组件</p><ul><li><em>它接收另一个组件作为参数，并且会返回一个包装过的新组件</em></li><li><em>包装过的新组件就会具有缓存功能，<strong>装过后，只有组件的 props 发生变化化</strong>才会触发组件的重新的渲染，否则总是返回缓存中结果</em></li></ul><h1 id="React-中的-useCallback"><a href="#React-中的-useCallback" class="headerlink" title="React 中的 useCallback"></a>React 中的 useCallback</h1><p><strong>useCallback</strong>：是一个钩子函数，用来创建 React 中的回调函数，创建的回调函数不会总在组件重新渲染时重新创建<br><code>useCallback()</code>参数</p><ol><li>回调函数</li><li>依赖数组<ul><li><em>当依赖数组中的变量发生变化时，回调函数才会重新创建</em></li><li><em>如果不指定依赖数组，回调函数每次都会重新创建</em></li><li><em>一定要将回调函数中使用到的所有变量都设置到依赖数组中</em> 除了（setState）</li></ul></li></ol><h1 id="React-中的-Hooks"><a href="#React-中的-Hooks" class="headerlink" title="React 中的 Hooks"></a>React 中的 Hooks</h1><p>React 中的钩子函数只能在函数组件或自定义钩子中调用，我们需要将 React 中钩子函数提取到一个公共区域时，就可以使用自定义钩子<br><em>自定义钩子其实就是一个普通函数，只是它的名字需要使用 use 开头</em><br>比如下面封装了<code>fetch</code>自定义函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useFetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>([])</span><br><span class="line">  <span class="comment">// 添加一个state来记录数据是否正在加载,false表示没有加载数据，true表示加载</span></span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 创建一个state来记录错误信息</span></span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchData = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">true</span>)</span><br><span class="line">      <span class="title function_">setError</span>(<span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:1337/api/students&#x27;</span>)</span><br><span class="line">      <span class="comment">//判断请求是否加载成功</span></span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">        <span class="title function_">setData</span>(data.<span class="property">data</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;数据加载失败！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="title function_">setError</span>(e)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置返回值</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading,</span><br><span class="line">    error,</span><br><span class="line">    data,</span><br><span class="line">    fetchData</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p><strong>A Predictable State Container for JS Apps</strong></p><ul><li>A Predictable State Container for JS Apps 是 Redux 官方对于 Redux 的描述，这句话可以这样翻译“一个专为 JS 应用设计的可预期的状态容器”，简单来说 Redux 是一个可预测的状态容器。</li></ul><h2 id="状态-State"><a href="#状态-State" class="headerlink" title="状态(State)"></a><strong>状态</strong>(State)</h2><p>state 直译过来就是状态 state 不过就是一个变量，一个用来记录（组件）状态的变量。组件可以根据不同的状态值切换为不同的显示</p><h2 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a><strong>容器(Container)</strong></h2><p>容器当然是用来装东西的，状态容器即用来存储状态的容器。状态多了，自然需要一个东西来存储，但是容器的功能却不是仅仅能存储状态，它实则是一个状态的管理器，除了存储状态外，它还可以用来对 state 进行查询、修改等所有操作。</p><h2 id="可预测（Predictable）"><a href="#可预测（Predictable）" class="headerlink" title="可预测（Predictable）"></a>可预测（Predictable）</h2><p>可预测指我们在对 state 进行各种操作时，其结果是一定的。即以相同的顺序对 state 执行相同的操作会得到相同的结果。简单来说，Redux 中对状态所有的操作都封装到了容器内部，外部只能通过调用容器提供的方法来操作 state，而不能直接修改 state。这就意味着外部对 state 的操作都被容器所限制，对 state 的操作都在容器的掌控之中，也就是可预测。</p><p>总的来说，<strong>Redux 是一个稳定、安全的状态管理器</strong>。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 Redux 之前，你需要先明确一点 Redux 是 JS 应用的状态容器，它并不是只能在 React 使用，而是可以应用到任意的 JS 应用中（包括前端 JS，和服务器中 Node.js）。总之，凡是 JS 中需要管理的状态的 Redux 都可以胜任。</p><h2 id="在网页中使用"><a href="#在网页中使用" class="headerlink" title="在网页中使用"></a>在网页中使用</h2><p>我们先来在网页中使用以下 Redux，在网页中使用 Redux 就像使用 jQuery 似的，直接在网页中引入 Redux 的库文件即可：<br><code>&lt;script src=&quot;https://unpkg.com/redux@4.2.0/dist/redux.js&quot;&gt;&lt;/script&gt;的</code><br>如果不使用 redux 的时候</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const btn01 = document.getElementById(&#x27;btn01&#x27;); const btn02 =</span><br><span class="line">document.getElementById(&#x27;btn02&#x27;); const counterSpan =</span><br><span class="line">document.getElementById(&#x27;counter&#x27;); let count = 1;</span><br><span class="line">btn01.addEventListener(&#x27;click&#x27;, ()=&gt;&#123; count--; counterSpan.innerText = count;</span><br><span class="line">&#125;); btn02.addEventListener(&#x27;click&#x27;, ()=&gt;&#123; count++; counterSpan.innerText =</span><br><span class="line">count; &#125;);</span><br></pre></td></tr></table></figure><p>上述代码中 count 就是一个状态，只是这个状态没有专门的管理器，它的所有操作都在事件的响应函数中进行处理，这种状态就是不可预测的状态，因为在任何的函数中都可以对这个状态进行修改，没有任何安全限制。Redux 的真实使用场景依然是大型应用中的复杂 state。</p><p>Redux 是一个状态容器，所以使用 Redux 必须先创建容器对象，它的所有操作都是通过容器对象来进行的，创建容器的方式有多种，我们先说一种好理解的：<br><code>Redux.createStore(reducer,[perloadedState],[enhancer])</code><br><strong>createStore</strong>用来创建一个<strong>Redux 中的容器对象</strong>，它需要三个参数：reducer、preloadedState、enhancer</p><ul><li><strong>reducer</strong>：是一个函数，state 操作的整合函数，每次修改 state 都会触发该函数，返回值会变成新的 state</li><li><strong>preloadedState</strong>：是 state 的初始值，可以在这里指定也可以在 reducer 中指定。</li><li><strong>enhancer</strong>：增强函数用来对 state 的功能进行扩展</li></ul><p>三个参数中，只有 reducer 是必须的，来看一个 Reducer 的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">countReducer</span> = (<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SUB&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reducer 用来整合关于 state 的所有操作，容器修改 state 时会自动调用该函数，函数调用时会接收到两个参数：state 和 action，state 表示当前的 state，可以通过该 state 来计算新的 state。<code>state = &#123;count:0&#125;</code>这是在指定 state 的默认值，如果不指定，第一次调用时 state 的值会是 undefined。也可以将该值指定为 createStore()的第二个参数。action 是一个普通对象，用来存储操作信息。</p><p>将 reducer 传递进 createStore 后，我们会得到一个 store 对象：<br><code>const store = Redux.createStore(countReducer);</code><br>store 对象创建后，对 state 的所有操作都需要通过它来进行：</p><p>读取 state：<br><code>store.getState()</code></p><p>修改 state：<br><code>store.dispatch(&#123;type:&#39;ADD&#39;&#125;)</code></p><p>dipatch 用来触发 state 的操作，可以将其理解为是想 reducer 发送任务的工具。它需要一个对象作为参数，这个对象将会成为 reducer 的第二个参数 action，需要将操作信息设置到对象中传递给 reducer。action 中最重要的属性是 type，type 用来识别对 state 的不同的操作，上例中’ADD’表示增加操作，’SUB’表示减少的操作</p><p>除了这些方法外，store 还拥有一个 subscribe 方法，这个方法用来订阅 state 变化的信息。该方法需要一个回调函数作为参数，当 store 中存储的 state 发生变化时，回调函数会自动调用，我们可以在回调函数中定义 state 发生变化时所要触发的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// store中state发生变化时触发</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如此一来，刚刚的代码被修改成了这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn01&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> btn02 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn02&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> counterSpan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;counter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">countReducer</span> = (<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SUB&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(countReducer)</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counterSpan.<span class="property">innerText</span> = store.<span class="title function_">getState</span>().<span class="property">count</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">btn01.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;SUB&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">btn02.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改后的代码相较于第一个版本要复杂一些，同时也解决了之前代码中存在的一些问题：</p><ol><li>前一个版本的代码 state 就是一个变量，可以任意被修改。state 不可预测，容易被修改为错误的值。新代码中使用了 Redux，Redux 中的对 state 的所有操作都封装到了 reducer 函数中，可以限制 state 的修改使 state 可预测，有效的避免了错误的 state 值。</li><li>前一个版本的代码，每次点击按钮修改 state，就要手动的修改 counterSpan 的 innerText，非常麻烦，这样一来我们如果再添加新的功能，依然不能忘记对其进行修改。新代码中，counterSpan 的修改是在 store.subscribe()的回调函数中进行的，state 每次发生变化其值就会随之变化，不需要再手动修改。换句话说，state 和 DOM 元素通过 Redux 绑定到了一起。</li></ol><p>通过上例也不难看出，Redux 中最最核心的东西就是这个 store，只要拿到了这个 store 对象就相当于拿到了 Redux 中存储的数据。在加上 Redux 的核心思想中有一条叫做“单一数据源”，也就是所有的 state 都会存储到一课对象树中，并且这个对象树会存储到一个 store 中。所以到了 React 中，组件只需获取到 store 即可获取到 Redux 中存储的所有 state。</p><p>下面给出一个具体的代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;countSpan&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;nameSpan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addFive&quot;</span>&gt;</span>加5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/redux@4.2.0/dist/redux.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> subBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sub&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> addBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> addFiveBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;addFive&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> countSpan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;countSpan&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> nameSpan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nameSpan&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *   网页中使用redux的步骤：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *       1.引入redux核心包</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *       2.创建reducer整合函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *       3.通过reducer对象创建store</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *       4.对store中的state进行订阅</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *       5.通过dispatch派发state的操作指令</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       * */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = &#123; count: <span class="number">1</span>, name: <span class="string">&#x27;孙悟空&#x27;</span> &#125;, action</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *   state 表示当前state，可以根据这个state生成新的state</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *   action 是一个js对象，它里边会保存操作的信息</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *           type表示操作的类型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *           其他需要传递的参数，也可以在action中设置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&#x27;SUB&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&#x27;ADD_N&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.<span class="property">count</span> + action.<span class="property">payload</span> &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> state</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(reducer)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      nameSpan.<span class="property">innerText</span> = store.<span class="title function_">getState</span>().<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 打印state的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(store.getState());</span></span></span><br><span class="line"><span class="language-javascript">        countSpan.<span class="property">innerText</span> = store.<span class="title function_">getState</span>().<span class="property">count</span></span></span><br><span class="line"><span class="language-javascript">        nameSpan.<span class="property">innerText</span> = store.<span class="title function_">getState</span>().<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      subBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;SUB&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      addBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      addFiveBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;ADD_N&#x27;</span>, <span class="attr">payload</span>: <span class="number">50</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="RTX-Redux-Toolkit-工具包"><a href="#RTX-Redux-Toolkit-工具包" class="headerlink" title="**RTX(Redux Toolkit)**工具包"></a>**RTX(Redux Toolkit)**工具包</h1><p>在 React 中使用 RTK<br><code>yarn add react-redux @reduxjs/toolkit</code></p><p>具体使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用RTK来构建store</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore, createSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="comment">// createSlice：创建reducer的切片</span></span><br><span class="line"><span class="comment">// 它需要一个配置对象作为参数，通过对象的不同的属性来指定它的配置</span></span><br><span class="line"><span class="keyword">const</span> stuSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;stu&#x27;</span>, <span class="comment">// 用来自动生成action中的type</span></span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;花果山&#x27;</span></span><br><span class="line">  &#125;, <span class="comment">// state的初始值</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">//指定state的各种操作，直接在对象中添加方法</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="comment">//可以通过不同的方法来指定对state的不同操作</span></span><br><span class="line">      <span class="comment">// 两个参数：state 这个state的是一个代理对象，可以直接修改</span></span><br><span class="line">      state.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setAge</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">age</span> = <span class="number">28</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 切片对象会自动的帮助我们生成action</span></span><br><span class="line"><span class="comment">// actions中存储的是slice自动生成action创建器（函数），调用函数后会自动创建action对象</span></span><br><span class="line"><span class="comment">// action对象的结构 &#123;type:name/函数名, payload:函数的参数&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; setName, setAge &#125; = stuSlice.<span class="property">actions</span></span><br><span class="line"><span class="comment">// const nameAction = setName(&#x27;哈哈&#x27;);</span></span><br><span class="line"><span class="comment">// const ageAction = setAge(30);</span></span><br><span class="line"><span class="comment">// console.log(nameAction);</span></span><br><span class="line"><span class="comment">// console.log(ageAction);</span></span><br><span class="line"><span class="comment">// 创建store 用来创建store对象，需要一个配置对象作为参数</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">student</span>: stuSlice.<span class="property">reducer</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h2 id="RTX-具体使用案例"><a href="#RTX-具体使用案例" class="headerlink" title="RTX 具体使用案例"></a>RTX 具体使用案例</h2><p><code>store/index.js</code> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore, createSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">const</span> stuSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;stu&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;花果山&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = action.<span class="property">payload</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setAge</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">age</span> = action.<span class="property">payload</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; setName, setAge &#125; = stuSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">student</span>: stuSlice.<span class="property">reducer</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p><code>App.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; setName, setAge &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// useSelector() 用来加载state中的数据</span></span><br><span class="line">  <span class="keyword">const</span> student = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">student</span>)</span><br><span class="line">  <span class="comment">// 通过useDispatch()来获取派发器对象</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">  <span class="comment">// 获取action的构建器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setNameHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">setName</span>(<span class="string">&#x27;沙和尚&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setAgeHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">setAge</span>(<span class="number">33</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;student.name&#125; ---</span></span><br><span class="line"><span class="language-xml">        &#123;student.age&#125; ---</span></span><br><span class="line"><span class="language-xml">        &#123;student.gender&#125; ---</span></span><br><span class="line"><span class="language-xml">        &#123;student.address&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setNameHandler&#125;</span>&gt;</span>修改name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setAgeHandler&#125;</span>&gt;</span>修改age<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><h2 id="拆分-RTX"><a href="#拆分-RTX" class="headerlink" title="拆分 RTX"></a>拆分 RTX</h2><p>当有不同的多个数据的时候比如存在学生姓名和学校<br><code>schoolSlice.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建学校的slice</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">const</span> schoolSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;school&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;花果山一小&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;花果山大街28号&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = action.<span class="property">payload</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setAddress</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">address</span> = action.<span class="property">payload</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; setName, setAddress &#125; = schoolSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; <span class="attr">reducer</span>: schoolReducer &#125; = schoolSlice</span><br></pre></td></tr></table></figure><p><code>stuSlice.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createSlice 创建reducer的切片</span></span><br><span class="line"><span class="comment">// 它需要一个配置对象作为参数，通过对象的不同的属性来指定它的配置</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stuSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;stu&#x27;</span>, <span class="comment">// 用来自动生成action中的type</span></span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;花果山&#x27;</span></span><br><span class="line">  &#125;, <span class="comment">// state的初始值</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定state的各种操作，直接在对象中添加方法</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="comment">// 可以通过不同的方法来指定对state的不同操作</span></span><br><span class="line">      <span class="comment">// 两个参数：state 这个state的是一个代理对象，可以直接修改</span></span><br><span class="line">      state.<span class="property">name</span> = action.<span class="property">payload</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setAge</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">age</span> = action.<span class="property">payload</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片对象会自动的帮助我们生成action</span></span><br><span class="line"><span class="comment">// actions中存储的是slice自动生成action创建器（函数），调用函数后会自动创建action对象</span></span><br><span class="line"><span class="comment">// action对象的结构 &#123;type:name/函数名, payload:函数的参数&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; setName, setAge &#125; = stuSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; <span class="attr">reducer</span>: stuReducer &#125; = stuSlice</span><br></pre></td></tr></table></figure><p><code>store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用RTK来构建store</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; stuReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./stuSlice&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; schoolReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./schoolSlice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store 用来创建store对象，需要一个配置对象作为参数</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">student</span>: stuReducer,</span><br><span class="line">    <span class="attr">school</span>: schoolReducer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p><code>App.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; setName, setAge &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/stuSlice&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  setName <span class="keyword">as</span> setSchoolName,</span><br><span class="line">  setAddress <span class="keyword">as</span> setSchoolAddress</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./store/schoolSlice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// useSelector() 用来加载state中的数据</span></span><br><span class="line">  <span class="comment">// const student = useSelector(state =&gt; state.student);</span></span><br><span class="line">  <span class="comment">// // 引入学校的state</span></span><br><span class="line">  <span class="comment">// const school = useSelector(state =&gt; state.school);</span></span><br><span class="line">  <span class="keyword">const</span> &#123; student, school &#125; = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过useDispatch()来获取派发器对象</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">  <span class="comment">// 获取action的构建器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setNameHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">setName</span>(<span class="string">&#x27;沙和尚&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setAgeHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">setAge</span>(<span class="number">33</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;student.name&#125; ---</span></span><br><span class="line"><span class="language-xml">        &#123;student.age&#125; ---</span></span><br><span class="line"><span class="language-xml">        &#123;student.gender&#125; ---</span></span><br><span class="line"><span class="language-xml">        &#123;student.address&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setNameHandler&#125;</span>&gt;</span>修改name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setAgeHandler&#125;</span>&gt;</span>修改age<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;school.name&#125; ---</span></span><br><span class="line"><span class="language-xml">        &#123;school.address&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(setSchoolName(&#x27;高老庄中小&#x27;))&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        修改学校名字</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(setSchoolAddress(&#x27;高老庄府前街19号&#x27;))&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        修改学校地址</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><h1 id="RTXQ-使用"><a href="#RTXQ-使用" class="headerlink" title="RTXQ 使用"></a>RTXQ 使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApi, fetchBaseQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit/dist/query/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Api对象</span></span><br><span class="line"><span class="comment">//createApi() 用来创建RTKQ中的API对象</span></span><br><span class="line"><span class="comment">// RTKQ的所有功能都需要通过该对象来进行</span></span><br><span class="line"><span class="comment">// createApi() 需要一个对象作为参数</span></span><br><span class="line"><span class="keyword">const</span> studentApi = <span class="title function_">createApi</span>(&#123;</span><br><span class="line">  <span class="attr">reducerPath</span>: <span class="string">&#x27;studentApi&#x27;</span>, <span class="comment">// Api的标识，不能和其他的Api或reducer重复</span></span><br><span class="line">  <span class="attr">baseQuery</span>: <span class="title function_">fetchBaseQuery</span>(&#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:1337/api/&#x27;</span></span><br><span class="line">  &#125;), <span class="comment">// 指定查询的基础信息，发送请求使用的工具</span></span><br><span class="line">  <span class="title function_">endpoints</span>(<span class="params">build</span>) &#123;</span><br><span class="line">    <span class="comment">// build是请求的构建器，通过build来设置请求的相关信息</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">getStudents</span>: build.<span class="title function_">query</span>(&#123;</span><br><span class="line">        <span class="title function_">query</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// 用来指定请求子路径</span></span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;students&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// endpoints 用来指定Api中的各种功能，是一个方法，需要一个对象作为返回值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Api对象创建后，对象中会根据各种方法自动的生成对应的钩子函数</span></span><br><span class="line"><span class="comment">// 通过这些钩子函数，可以来向服务器发送请求</span></span><br><span class="line"><span class="comment">// 钩子函数的命名规则 getStudents --&gt; useGetStudentsQuery</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; useGetStudentsQuery &#125; = studentApi</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> studentApi</span><br></pre></td></tr></table></figure><h1 id="React-中的-router"><a href="#React-中的-router" class="headerlink" title="React 中的 router"></a>React 中的 router</h1><p>使用 React 这些工具所编写的项目通常都是单页应用（SPA）。单页应用中，整个应用中只含有一个页面，React 会根据不同的状态在应用中显示出不同的组件。但是我们之前所编写应用还存在着一个问题，整个应用只存在一个页面，一个请求地址，这就使得用户只能通过一个地址访问应用，当我们点击组件中的不同链接时应用的地址是不会发生变化的。这又有什么问题呢？由于应用只有一个地址，所以我们通过该地址访问应用时，总会直接跳转到应用的首页。如此一来，我们便不敢随意的刷新页面，因为一旦刷新页面便直接跳转到首页。在对页面进行分享时，也只能分享网站的首页，而不能分享指定的页面。</p><p>怎么办呢？难道我们要将一个页面拆分为多个页面吗？很明显不能这么做，这么做以后应用的跳转便脱离了 React 的控制，增加应用的复杂度，提高了项目维护的成本。</p><p>为了解决这个问题，我们需要引入一个新的工具 React Router，React Router 为我们提供一种被称为客户端路由的东西，通过客户端路由可以将 URL 地址和 React 组件进行映射，当 URL 地址发生变化时，它会根据设置自动的切换到指定组件。并且这种切换完全不依赖于服务器。换句话说，在用户看来浏览器的地址栏确实发生了变化，但是这一变化并不由服务器处理，而是通过客户端路由进行切换。<br>… 懒的写了</p><h1 id="关于-React-中的-hook"><a href="#关于-React-中的-hook" class="headerlink" title="关于 React 中的 hook"></a>关于 React 中的 hook</h1><p>关于 React 中的钩子函数，我们已经非常熟悉了。钩子函数的功能非常的强大，而它的使用又十分简单。关于钩子函数的使用，我们只需记住两点：</p><ol><li>钩子只能在 React 组件和自定义钩子中使用</li><li>钩子不能在嵌套函数或其他语句（if、switch、white、for 等）中使用</li></ol><h2 id="React-中自带的钩子函数"><a href="#React-中自带的钩子函数" class="headerlink" title="React 中自带的钩子函数"></a>React 中自带的钩子函数</h2><ol><li><strong>useState</strong></li><li><strong>useEffect</strong></li><li><strong>useContext</strong></li><li><strong>useReducer</strong></li><li><strong>useCallback</strong></li><li><strong>useRef</strong></li><li><strong>useMemo</strong></li><li><strong>useImperativeHandle</strong></li><li><strong>useLayoutEffect</strong></li><li><strong>useDebugValue</strong></li><li><strong>useDeferredValue</strong></li><li><strong>useTransition</strong></li><li><strong>useId</strong></li><li><strong>useSyncExternalStore</strong></li><li><strong>useInsertionEffect</strong></li></ol><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>useMemo 和 useCallback 十分相似，useCallback 用来缓存函数对象，useMemo 用来缓存函数的执行结果。在组件中，会有一些函数具有十分的复杂的逻辑，执行速度比较慢。闭了避免这些执行速度慢的函数返回执行，可以通过 useMemo 来缓存它们的执行结果，像是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> 复杂逻辑函数()</span><br><span class="line">&#125;, [依赖项])</span><br></pre></td></tr></table></figure><p>useMemo 中的函数会在依赖项发生变化时执行，注意！是执行，这点和 useCallback 不同，useCallback 是创建。执行后返回执行结果，如果依赖项不发生变化，则一直会返回上次的结果，不会再执行函数。这样一来就避免复杂逻辑的重复执行。</p><h2 id="UseImperativeHandle"><a href="#UseImperativeHandle" class="headerlink" title="UseImperativeHandle"></a>UseImperativeHandle</h2><p>在 React 中可以通过 forwardRef 来指定要暴露给外部组件的 ref：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyButton</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>自定义按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上例中，MyButton 组件将 button 的 ref 作为组件的 ref 向外部暴露，其他组件在使用 MyButton 时，就可以通过 ref 属性访问：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyButton</span> ref=&#123;btnRef&#125; /&gt;</span><br></pre></td></tr></table></figure><p>通过 useImperativeHandle 可以手动的指定 ref 要暴露的对象，比如可以修改 MyButton 组件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyButton</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>自定义按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>useImperativeHandle 的第二个参数是一个函数，函数的返回值会自动赋值给 ref（current 属性）。上例中，我们将返回值为<code>&#123;name:&#39;孙悟空&#39;&#125;</code>，当然返回孙悟空没有什么意义。实际开发中，我们可以将一些操作方法定义到对象中，这样可以有效的减少组件对 DOM 对象的直接操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyButton</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">setDisabled</span>(<span class="params"></span>) &#123;</span><br><span class="line">        btnRef.<span class="property">current</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;btnRef&#125;</span>&gt;</span>自定义按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> btnRef = <span class="title function_">useRef</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    btnRef.<span class="property">current</span>.<span class="title function_">setDisabled</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">ref</span>=<span class="string">&#123;btnRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandler&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UseLayoutEffect"><a href="#UseLayoutEffect" class="headerlink" title="UseLayoutEffect"></a>UseLayoutEffect</h2><p>useLayoutEffect 的方法签名和 useEffect 一样，功能也类似。不同点在于，useLayoutEffect 的执行时机要早于 useEffect，它会在 DOM 改变后调用。在老版本的 React 中它和 useEffect 的区别比较好演示，React18 中，useEffect 的运行方式有所变化，所以二者区别不好演示。</p><p>useLayoutEffect 使用场景不多，实际开发中，在 effect 中需要修改元素样式，且使用 useEffect 会出现闪烁现象时可以使用 useLayoutEffect 进行替换。<img src="https://my-wp.oss-cn-beijing.aliyuncs.com/wp-content/uploads/2022/06/20220622111732278.png" alt="img"></p><h2 id="UseDebugValue"><a href="#UseDebugValue" class="headerlink" title="UseDebugValue"></a>UseDebugValue</h2><p>用来给自定义钩子设置标签，标签会在 React 开发工具中显示，用来调试自定义钩子，不常用。</p><h2 id="UseDeferredValue"><a href="#UseDeferredValue" class="headerlink" title="UseDeferredValue"></a>UseDeferredValue</h2><p>useDeferredValue 用来设置一个延迟的 state，比如我们创建一个 state，并使用 useDeferredValue 获取延迟值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const [queryStr, setQueryStr] = useState(&#x27;&#x27;);</span><br><span class="line">const deferredQueryStr = useDeferredValue(queryStr);</span><br></pre></td></tr></table></figure><p>上边的代码中 queryStr 就是一个常规的 state，deferredQueryStr 就是 queryStr 的延迟值。设置延迟值后每次调用 setState 后都会触发两次组件的重新渲染。第一次时，deferredQueryStr 的值是 queryStr 修改前的值，第二次才是修改后的值。换句话，延迟值相较于 state 来说总会慢一步更新。</p><p>延迟值可以用在这样一个场景，一个 state 需要在多个组件中使用。一个组件的渲染比较快，而另一个组件的渲染比较慢。这样我们可以为该 state 创建一个延迟值，渲染快的组件使用正常的 state 优先显示。渲染慢的组件使用延迟值，慢一步渲染。当然必须结合 React.memo 或 useMemo 才能真正的发挥出它的作用。</p><h2 id="UseTransition"><a href="#UseTransition" class="headerlink" title="UseTransition"></a>UseTransition</h2><p>当我们在组件中修改 state 时，会遇到复杂一些的 state，当修改这些 state 时，甚至会阻塞到整个应用的运行，为了降低这种 state 的影响，React 为我们提供了 useTransition，通过 useTransition 可以降低 setState 的优先级。</p><p>useTransition 会返回一个数组，数组中有两个元素，第一个元素是 isPending，它是一个变量用来记录 transition 是否在执行中。第二个元素是 startTransition，它是一个函数，可以将 setState 在其回调函数中调用，这样 setState 方法会被标记为 transition 并不会立即执行，而是在其他优先级更高的方法执行完毕，才会执行。</p><p>除了 useTransition 外，React 还直接为为我们提供了一个 startTransition 函数，在不需要使用 isPending 时，可以直接使用 startTransition 也可以达到相同的效果。</p><h2 id="UseId"><a href="#UseId" class="headerlink" title="UseId"></a>UseId</h2><p>生成唯一 id，使用于需要唯一 id 的场景，但不适用于列表的 key。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NestJS学习</title>
      <link href="/posts/7251401c.html"/>
      <url>/posts/7251401c.html</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-简介"><a href="#NestJS-简介" class="headerlink" title="NestJS 简介"></a>NestJS 简介</h1><p><strong>Nestjs 是一个用于构建高效的可扩展的基于Nodejs服务端 应用程序开发框架</strong></p><p>完全支持typescript 并结合的<strong>AOP面向切面编程</strong>的方式</p><p><strong>Spring MVC</strong> 风格 其中有依赖注入和IOC控制反转</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a><strong>IOC</strong></h2><p>Inversion of Control 字面意思是<strong>控制反转</strong>，具体的定义是高层模块不应该依赖底层模块，二者都应该依赖其抽象，抽象不应该依赖细节</p><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a><strong>DI</strong></h2><p>依赖注入（Dependency Injection）其实和IoC是同根生，这两个原本就是一个东西，只不过由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系）。 类A依赖类B的常规表现是在A中使用B的instance。</p><p>未使用控制反转和依赖注入之前的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;月晕&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强耦合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">new</span> <span class="title function_">A</span>().<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">new</span> <span class="title function_">A</span>().<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B中代码的实验是需要依赖A的 两者的代码耦合度非常高。当两者之间的业务逻辑复杂程度增加的情况下 维护成本与代码可读性都会增加 并且会很难在引入额外的模块进行功能扩展</p><p>为了解决上面的问题可以使用<strong>IOC</strong>容器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;月晕&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">  <span class="attr">mo</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mo</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params">key: <span class="built_in">string</span>, mo: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mo</span>[key] = mo</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">mo</span>[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="keyword">new</span> <span class="title class_">Container</span>()</span><br><span class="line">container.<span class="title function_">provide</span>(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">new</span> <span class="title function_">A</span>(<span class="string">&#x27;月晕&#x27;</span>))</span><br><span class="line">container.<span class="title function_">provide</span>(<span class="string">&#x27;c&#x27;</span>, <span class="keyword">new</span> <span class="title function_">A</span>(<span class="string">&#x27;月晕52&#x27;</span>))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = container.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">c</span> = container.<span class="title function_">get</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是写了一个中间件，来收集依赖，主要是为了解耦，减少维护成本</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p><strong>装饰器是一种特殊的类型声明 可以附加在类、方法、属性、参数上面</strong></p><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p><strong>主要是通过@符号来添加装饰器</strong><br>会自动把class的构造函数传入到装饰器的第一个参数 <strong>target</strong> 然后通过<code>prototype</code>可以自定义添加属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">doc</span>: <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span><br><span class="line">  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@doc</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// doc(yueyun)</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">yueyun1</span>: <span class="built_in">any</span> = <span class="keyword">new</span> <span class="title function_">yueyun</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yueyun1.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><p>会返回两个参数 <strong>原型对象</strong> and <strong>属性的名称</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">doc</span>: <span class="title class_">PropertyDecorator</span> = <span class="function">(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="meta">@doc</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><p>会返回三个参数 <strong>原型对象</strong> <strong>方法的名称</strong> <strong>属性描述符[可写对应writable | 可枚举对应enumerable | 可配置对应configurable]</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">doc</span>: <span class="title class_">MethodDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  key: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  descriptor: <span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, key, descriptor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@doc</span></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性装饰器-1"><a href="#属性装饰器-1" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><p>会返回三个参数 <strong>原型对象</strong> <strong>方法的名称</strong> <strong>参数的位置(从0开始)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">currency</span>: <span class="title class_">ParameterDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  key: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  index: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, key, index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yueyun</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params">name: <span class="built_in">string</span>, <span class="meta">@currency</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个GET请求"><a href="#实现一个GET请求" class="headerlink" title="实现一个GET请求"></a>实现一个GET请求</h3><p><strong>定义装饰器</strong><br>使用装饰器工厂<br>定义 descriptor 的类型 通过 descriptor描述符里面的value 把axios的结果返回给当前使用装饰器的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 函数柯里化 在包装了一层</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Get</span> = (<span class="attr">url</span>: <span class="built_in">string</span>): <span class="function"><span class="params">MethodDecorator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">any</span>, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;Get decorator&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> func = descriptor.<span class="property">value</span></span><br><span class="line">    axios</span><br><span class="line">      .<span class="title function_">get</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">func</span>(res.<span class="property">data</span>, &#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">          <span class="attr">success</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">func</span>(err, &#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">          <span class="attr">success</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Controller class&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;https://api.apiopen.top/api/getHaoKanVideo?page=0&amp;size=10&#x27;</span>)</span><br><span class="line">  <span class="title function_">getList</span>(<span class="params">res: <span class="built_in">any</span>, status: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, status)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-cli-使用"><a href="#nestJS-cli-使用" class="headerlink" title="nestJS&#x2F;cli 使用"></a>nestJS&#x2F;cli 使用</h1><p>项目的开发离不开工程化的部分，比如创建项目、编译构建、开发时的HRM等</p><p>Nest项目自然也是一样，所以它在<code>@nestjs/cli</code>这个包里提供了 nest 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn install -g @nestjs/cli</span><br><span class="line">nest new &lt;your project name&gt;</span><br></pre></td></tr></table></figure><p>如果想更新版本则使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g @nestjs/cli</span><br></pre></td></tr></table></figure><p>可以使用<code>nest -h</code> 去查看提供了什么命令</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104152854282.png" alt="image-20231104152854282"></p><p>有创建项目的<code>nest new</code>，有创建代码的 <code>nest generate</code>，还有编译构建的<code>nest build</code>，开发模式的<code>nest start</code>等</p><h2 id="nest-new"><a href="#nest-new" class="headerlink" title="nest new"></a><code>nest new</code></h2><p>首先使用<code>nest new --help</code>看看有什么选项</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104153515535.png" alt="image-20231104153515535"></p><p><code>--skip-get || --skip-install</code>: 就是跳过git 初始化和npm install</p><p><code>--package-manager</code>: 包管理器</p><p><code>--language</code>: 语言 </p><p>等等等</p><h2 id="nest-generate"><a href="#nest-generate" class="headerlink" title="nest generate"></a><code>nest generate</code></h2><p>生成特定的代码</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104153941334.png" alt="image-20231104153941334"></p><p>当然也有一些使用的配置项</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104154145969.png" alt="image-20231104154145969"></p><h2 id="nest-build"><a href="#nest-build" class="headerlink" title="nest build"></a><code>nest build</code></h2><p>用来构建项目 会在dist目录下生成编译后的代码</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/NestJs/image-20231104154337390.png" alt="image-20231104154337390"></p><p><code>--webpack</code> 和 <code>--tsc</code>是指定用什么来编译，默认是tsc编译</p><p>tsc不做打包,webpack会做打包,两种方式都可以</p><p>这些选项都可以在<code>nest-cli.json</code>配置</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>nest在@nestjs&#x2F;cli包里提供了nest命令，可以用来做很多事情</p><ul><li>生成项目结构和各种代码</li><li>编译代码</li><li>监听文件变动自动编译</li><li>打印项目依赖信息</li></ul><p>也就是这些</p><ul><li>nest new 创建新项目</li><li>nest generate 生成各种代码</li><li>nest build 使用tsc或webpack构建</li><li>nest start 启动开发服务 </li><li>nest info 打印node 包 nest包等依赖信息</li></ul><p>很多配置都可以在nest-cli.json里配置，比如<strong>generateOptions</strong>、<strong>compilerOptions</strong> 等</p><h1 id="nestJS控制器"><a href="#nestJS控制器" class="headerlink" title="nestJS控制器"></a>nestJS控制器</h1><p>Controller Request (获取传递过来的参数)</p><table><thead><tr><th>装饰器</th><th>参数</th></tr></thead><tbody><tr><td>@Request()</td><td>req</td></tr><tr><td>@Response()</td><td>res</td></tr><tr><td>@Next()</td><td>next</td></tr><tr><td>@Session()</td><td>req.session</td></tr><tr><td>@Param(key?: string)</td><td><code>req.params</code>&#x2F;<code>req.params[key]</code> (指的是动态参数&#x2F;:id)</td></tr><tr><td>@Body(key?: string)</td><td><code>req.body</code>&#x2F;<code>req.body[key]</code></td></tr><tr><td>@Query(key?: string)</td><td><code>req.query</code>&#x2F;<code>req.query[key]</code> (传入数据时的params)</td></tr><tr><td>@Headers(name?: string)</td><td><code>req.headers</code>&#x2F;<code>req.headers[name]</code></td></tr><tr><td>@HttpCode</td><td>Code</td></tr></tbody></table><h2 id="获取Get参数"><a href="#获取Get参数" class="headerlink" title="获取Get参数"></a>获取Get参数</h2><p>可以使用Request装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Controller</span>,</span><br><span class="line">  <span class="title class_">Get</span>,</span><br><span class="line">  <span class="title class_">Post</span>,</span><br><span class="line">  <span class="title class_">Body</span>,</span><br><span class="line">  <span class="title class_">Patch</span>,</span><br><span class="line">  <span class="title class_">Param</span>,</span><br><span class="line">  <span class="title class_">Delete</span>,</span><br><span class="line">  <span class="title class_">Request</span>,</span><br><span class="line">  <span class="title class_">Query</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DemoService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Headers</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common/decorators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">findAll</span>(<span class="params"><span class="meta">@Request</span>() req: <span class="built_in">any</span>, <span class="meta">@Query</span>() query: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span> === query)</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">name</span> === <span class="string">&#x27;月晕&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="title class_">Msg</span>: <span class="string">&#x27;月晕&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="title class_">Msg</span>: <span class="string">&#x27;你不是本人&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Post获取参数"><a href="#Post获取参数" class="headerlink" title="Post获取参数"></a>Post获取参数</h2><p>也能使用<strong>Reques</strong>装饰器或者<strong>Body</strong>装饰器也可以直接读取key值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>(<span class="string">&#x27;name&#x27;</span>) body: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="title class_">Msg</span>: <span class="string">&#x27;创建成功&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>可以使用<strong>Request</strong>装饰器 或者 <strong>Param</strong>装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">     <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">      findId (<span class="meta">@Param</span>() param) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(param)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">code</span>:<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取header信息"><a href="#读取header信息" class="headerlink" title="读取header信息"></a>读取header信息</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">     <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">      findId (<span class="meta">@Headers</span>() header) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(header)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">code</span>:<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> demoService: DemoService</span>) &#123;&#125;</span><br><span class="line">     <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  <span class="meta">@HttpCode</span>(<span class="number">500</span>)</span><br><span class="line">  findId (<span class="meta">@Headers</span>() header) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="attr">code</span>:<span class="number">500</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-Session"><a href="#nestJS-Session" class="headerlink" title="nestJS Session"></a>nestJS Session</h1><p>session 是服务器 为每个用户的浏览器创建的一个会话对象 这个session 会记录到 浏览器的 cookie 用来区分用户</p><p>我们使用的是nestjs 默认框架express 他也支持express 的插件 所以我们就可以安装express的session</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add express-session -S</span><br><span class="line">yarn add @types/express-session -D</span><br></pre></td></tr></table></figure><p>然后在main.ts 引入 通过app.use 注册session</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> session <span class="keyword">from</span> <span class="string">&#x27;express-session&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>())</span><br></pre></td></tr></table></figure><p><strong>参数配置详解</strong></p><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>secret</td><td>生成服务端session 签名 可以理解为加盐</td></tr><tr><td>name</td><td>生成客户端cookie 的名字 默认 connect.sid</td></tr><tr><td>cookie</td><td>设置返回到前端 key 的属性，默认值为{ path: ‘&#x2F;’, httpOnly: true, secure: false, maxAge: null }。</td></tr><tr><td>rolling</td><td>在每次请求时强行设置 cookie，这将重置 cookie 过期时间(默认:false)</td></tr></tbody></table><p>nestJS配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VersioningType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> session <span class="keyword">from</span> <span class="string">&#x27;express-session&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  app.<span class="title function_">enableVersioning</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">VersioningType</span>.<span class="property">URI</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123; <span class="attr">secret</span>: <span class="string">&quot;YueYun&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;yueyun.session&quot;</span>, <span class="attr">rolling</span>: <span class="literal">true</span>, <span class="attr">cookie</span>: &#123; <span class="attr">maxAge</span>: <span class="literal">null</span> &#125; &#125;))</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><h2 id="验证码案例"><a href="#验证码案例" class="headerlink" title="验证码案例"></a>验证码案例</h2><p>前端： Vue3 ts element-plus fetch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div class=&quot;wraps&quot;&gt;</span><br><span class="line">          &lt;el-form :label-position=&quot;labelPosition&quot; label-width=&quot;100px&quot; :model=&quot;formLabelAlign&quot; style=&quot;max-width: 460px&quot;&gt;</span><br><span class="line">               &lt;el-form-item label=&quot;账号&quot;&gt;</span><br><span class="line">                    &lt;el-input v-model=&quot;formLabelAlign.name&quot; /&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">               &lt;el-form-item label=&quot;密码&quot;&gt;</span><br><span class="line">                    &lt;el-input type=&quot;password&quot; v-model=&quot;formLabelAlign.password&quot; /&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">               &lt;el-form-item label=&quot;验证码&quot;&gt;</span><br><span class="line">                    &lt;div style=&quot;display:flex&quot;&gt;</span><br><span class="line">                         &lt;el-input  v-model=&quot;formLabelAlign.code&quot; /&gt;</span><br><span class="line">                         &lt;img @click=&quot;resetCode&quot; :src=&quot;codeUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">               &lt;el-form-item&gt;</span><br><span class="line">                    &lt;el-button @click=&quot;submit&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">               &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/el-form&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">     </span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; onMounted, reactive, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"> </span><br><span class="line">const codeUrl = ref&lt;string&gt;(&#x27;/api/user/code&#x27;)</span><br><span class="line"> </span><br><span class="line">const resetCode = () =&gt; codeUrl.value = codeUrl.value + &#x27;?&#x27; + Math.random()</span><br><span class="line"> </span><br><span class="line">const labelPosition = ref&lt;string&gt;(&#x27;right&#x27;)</span><br><span class="line"> </span><br><span class="line">const formLabelAlign = reactive(&#123;</span><br><span class="line">     name: &quot;&quot;,</span><br><span class="line">     password: &quot;&quot;,</span><br><span class="line">     code: &quot;&quot;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">const submit = async () =&gt; &#123;</span><br><span class="line">     await fetch(&#x27;/api/user/create&#x27;, &#123;</span><br><span class="line">          method: &quot;POST&quot;,</span><br><span class="line">          body: JSON.stringify(formLabelAlign),</span><br><span class="line">          headers: &#123;</span><br><span class="line">               &#x27;content-type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;).then(res =&gt; res.json())</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">     </span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">     padding: 0;</span><br><span class="line">     margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.wraps &#123;</span><br><span class="line">     display: flex;</span><br><span class="line">     justify-content: center;</span><br><span class="line">     align-items: center;</span><br><span class="line">     height: inherit;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">html,</span><br><span class="line">body,</span><br><span class="line">#app &#123;</span><br><span class="line">     height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>后端nestjs 验证码插件 svgCaptcha</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add svg-captcha -S</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span>, <span class="title class_">Param</span>, <span class="title class_">Request</span>, <span class="title class_">Query</span>, <span class="title class_">Headers</span>, <span class="title class_">HttpCode</span>, <span class="title class_">Res</span>, <span class="title class_">Req</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-user.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UpdateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/update-user.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> svgCaptcha <span class="keyword">from</span> <span class="string">&#x27;svg-captcha&#x27;</span>;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService</span>) &#123; &#125;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">  <span class="title function_">createCaptcha</span>(<span class="params"><span class="meta">@Req</span>() req, <span class="meta">@Res</span>() res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> captcha = svgCaptcha.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">size</span>: <span class="number">4</span>,<span class="comment">//生成几个验证码</span></span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">50</span>, <span class="comment">//文字大小</span></span><br><span class="line">      <span class="attr">width</span>: <span class="number">100</span>,  <span class="comment">//宽度</span></span><br><span class="line">      <span class="attr">height</span>: <span class="number">34</span>,  <span class="comment">//高度</span></span><br><span class="line">      <span class="attr">background</span>: <span class="string">&#x27;#cc9966&#x27;</span>,  <span class="comment">//背景颜色</span></span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">code</span> = captcha.<span class="property">text</span> <span class="comment">//存储验证码记录到session</span></span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;image/svg+xml&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(captcha.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;create&#x27;</span>)</span><br><span class="line">  <span class="title function_">createUser</span>(<span class="params"><span class="meta">@Req</span>() req, <span class="meta">@Body</span>() body</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>.<span class="property">code</span>, body)</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">code</span>.<span class="title function_">toLocaleLowerCase</span>() === body?.<span class="property">code</span>?.<span class="title function_">toLocaleLowerCase</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;验证码正确&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;验证码错误&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-提供者"><a href="#nestJS-提供者" class="headerlink" title="nestJS 提供者"></a>nestJS 提供者</h1><h2 id="Proveders"><a href="#Proveders" class="headerlink" title="Proveders"></a>Proveders</h2><p>Provides 是 Nest 的一个基本概念 许多基本的Nest类可能被视为 <strong>provider-service、repository、factory、helper</strong> 等，都可以通过<strong>constructor</strong> 注入依赖关系，这就意味着对象可以彼此创建各种关系 并且连接对象实例的功能在很大程度上可以委托给nest的运行时系统。Provider只是一个用@Injectable() 装饰器注释的类</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>module 引入 service 在 providers 注入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Module</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserSerice</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserController</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">    <span class="attr">controllers</span>: [<span class="title class_">UserService</span>]</span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">UserService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>在Controller 层就能使用注入好的service</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义名称"><a href="#自定义名称" class="headerlink" title="自定义名称"></a>自定义名称</h3><p>基本用法其实上是一种语法糖</p><p>全称是下面这样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Yueyun&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>自定义名称之后 需要用对应的<strong>Inject</strong>取</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Inject</span>(<span class="string">&#x27;Yueyun&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义注入值"><a href="#自定义注入值" class="headerlink" title="自定义注入值"></a>自定义注入值</h3><p>通过<strong>useValue</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Yueyun&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;JD&quot;</span>,</span><br><span class="line">    <span class="attr">useValue</span>: [<span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PDD&#x27;</span>, <span class="string">&#x27;JD&#x27;</span>]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;Yueyun&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece,</span></span><br><span class="line"><span class="params">        <span class="meta">@Inject</span>(<span class="string">&#x27;JD&#x27;</span>) <span class="keyword">private</span> shopList:<span class="built_in">string</span>[]</span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="title function_">findAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findAll</span>() + <span class="variable language_">this</span>.<span class="property">shopList</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>如果服务 之间有相互依赖 或者逻辑处理 可以使用useFactory</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService2</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService3</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service3&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Xiaoman&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;JD&quot;</span>,</span><br><span class="line">    <span class="attr">useValue</span>: [<span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PDD&#x27;</span>, <span class="string">&#x27;JD&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="title class_">UserService2</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Test&quot;</span>,</span><br><span class="line">    <span class="attr">inject</span>: [<span class="title class_">UserService2</span>],</span><br><span class="line">    <span class="title function_">useFactory</span>(<span class="params">UserService2: UserService2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService3</span>(<span class="title class_">UserService2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Controller</span>,<span class="title class_">Get</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;Yueyun&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> userService:UserSerivece,</span></span><br><span class="line"><span class="params">        <span class="meta">@Inject</span>(<span class="string">&#x27;JD&#x27;</span>) <span class="keyword">private</span> shopList:<span class="built_in">string</span>[],</span></span><br><span class="line"><span class="params">        <span class="meta">@Inject</span>(<span class="string">&#x27;Testt&#x27;</span>) <span class="keyword">private</span> <span class="keyword">readonly</span> Test:<span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="title function_">findAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findAll</span>() + <span class="variable language_">this</span>.<span class="property">shopList</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Get</span>()</span><br><span class="line">    <span class="title function_">findAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findAll</span>() + <span class="variable language_">this</span>.<span class="property">Test</span>.<span class="title function_">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h3><p>useFactory 返回一个promise 或者其他异步操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService2</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService3</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service3&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Xiaoman&quot;</span>,</span><br><span class="line">    <span class="attr">useClass</span>: <span class="title class_">UserService</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;JD&quot;</span>,</span><br><span class="line">    <span class="attr">useValue</span>: [<span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PDD&#x27;</span>, <span class="string">&#x27;JD&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="title class_">UserService2</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;Test&quot;</span>,</span><br><span class="line">    <span class="attr">inject</span>: [<span class="title class_">UserService2</span>],</span><br><span class="line">    <span class="title function_">useFactory</span>(<span class="params">UserService2: UserService2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService3</span>(<span class="title class_">UserService2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="string">&quot;sync&quot;</span>,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">useFactory</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">r</span>(<span class="string">&#x27;sync&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="nestJS-模块"><a href="#nestJS-模块" class="headerlink" title="nestJS 模块"></a>nestJS 模块</h1><h2 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块@Module"></a>模块@Module</h2><p>每个Nest应用程序至少有一个模块，即根模块 ，根模块是Nest开始安排应用程序树的地方 事实上，根模块可能是应用程序中唯一的模块 特别是当应用程序很小的时候，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的<strong>功能</strong></p><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>当使用<code>nest g res user</code>创建一个CURD模板的时候 nestjs会自动帮我们引入模块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DemoModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo/demo.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">DemoModule</span>, <span class="title class_">UserModule</span>],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="共享模块"><a href="#共享模块" class="headerlink" title="共享模块"></a>共享模块</h3><p>例如user的Service想暴露给其他模块使用就可以使用exports 导出该服务</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.controller&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">  <span class="comment">// 导出</span></span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">UserService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>由于App.modules 已经引入该模块 就可以直接使用user模块的Service</p><h1 id="NestJS-调试"><a href="#NestJS-调试" class="headerlink" title="NestJS 调试"></a>NestJS 调试</h1>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NestJS </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理</title>
      <link href="/posts/e28d3347.html"/>
      <url>/posts/e28d3347.html</url>
      
        <content type="html"><![CDATA[<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><h2 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a><strong>浏览器的进程模型</strong></h2><h3 id="何为进程"><a href="#何为进程" class="headerlink" title="何为进程"></a>何为进程</h3><p>程序运行需要它自己的专属的内存空间 可以简单的把这块内存空间理解为进程<br>每个应用至少有一个进程，进程之间相互独立，即使通信 需要同意</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/brwose_1.jpg" alt="图片1"></p><h3 id="何为线程"><a href="#何为线程" class="headerlink" title="何为线程"></a>何为线程</h3><p>有了进程之后，就可以运行程序代码了<br> 运行代码的 <strong>容器</strong>  称之为 <strong>线程</strong><br> 一个进程至少有一个线程 所以在进程开启后会自动创建一个线程来运行代码 该线程称之为主线程<br> 如果程序需要同时执行多块代码，主线程就会开启更多的线程来执行代码，所以一个进程总可以包含多个线程</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse2.jpg"></p><h3 id="浏览器有哪些进程和线程"><a href="#浏览器有哪些进程和线程" class="headerlink" title="浏览器有哪些进程和线程"></a>浏览器有哪些进程和线程</h3><p>浏览器内部工作复杂，为了避免相互影响，当启动浏览器后会自动开启多个进程(如：浏览器进程、网络进程、渲染进程)</p><p>其中主要的线程有：  </p><ul><li>浏览器进程<br>主要负责界面显示、用户交互、子进程管理、浏览器进程内部会启动多个线程处理不同的任务</li><li>网络进程<br>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务  </li><li><strong>渲染进程</strong><br>渲染进程启动后，会开启一个渲染主线程，主线程负责执行 <code>HTML、css、JS</code>代码，默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同标签页之间的不相互影响</li></ul><h2 id="渲染主线程是如何工作的"><a href="#渲染主线程是如何工作的" class="headerlink" title="渲染主线程是如何工作的"></a><strong>渲染主线程是如何工作的</strong></h2><p>渲染主线程是浏览器中最繁忙的线程，需要处理的任务包括但不限于</p><ul><li>解析HTML、CSS</li><li>计算样式，布局</li><li>处理图层</li><li>执行全局JS代码</li><li>执行事件处理函数和一些回调函数</li><li>…</li></ul><blockquote><p>为什么渲染进程不使用多个线程来处理这些事情？</p></blockquote><p>主线程执行的时候该 如何调度任务？</p><p><strong>排队：</strong> 即 事件循环(<strong><code>event loop</code></strong>) 使用消息队列来处理(<strong><code>message queue</code></strong>)</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse3.jpg"></p><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在，如果有就取出第一个任务执行，执行完一个后进入下一次循环如果没有则进入休眠状态</li><li>其他所有线程(包括其他进程的线程)可以随时向消息队列添加任务，新任务会加消息队列的末尾，在添加新任务的时，如果主状态是休眠状态，则会将其唤醒以继续循环拿任务</li></ol><p>整个过程被称之为 事件循环 (消息循环)</p><h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>代码执行的过程中会遇到一些<strong>无法立即执行的任务</strong> 比如:  </p><ul><li>计时完成后需要执行的任务 – <code>setTimeout</code>、<code>setInterval</code></li><li>网络通信完成后需要执行的任务 – <code>XHR</code>、<code>FETCH</code></li><li>用户操作后执行的任务 – <code>addEventListener</code></li></ul><p>如果让渲染主进程等待这些任务的时机到达，就会导致主线程长期处于<strong>阻塞</strong>状态从而导致浏览器<strong>卡死</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse4.png"></p><p><strong>渲染主线程承担着极其重要的工作,无论如何都不能阻塞</strong></p><p>因此浏览器选择<strong>异步</strong>来解决这个问题<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse5.png"></p><p>使用异步的方式，渲染主线程永不会阻塞</p><details class="folding-tag" cyan><summary> 如何理解`JS`的异步？ </summary>              <div class='content'>              <p><code>JS</code>是一门单线程的语言,这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个<br> 而渲染主线程承担着很多的工作 比如 渲染<code>html、css</code> 执行<code>js</code>等<br> 如果采用同步的方式就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行<br> 这样一来 一方面会导致繁忙的主线程效率低，另一方面导致页面无法更新，用户体验不好<br> 所以浏览器采用异步的方式来避免，具体做法是当某些任务发送时，比如计算器、网络请求、事件监听、主线程将任务交给其他线程去处理。自身立即结束任务的执行，转而执行后面的代码，当其他线程完成时，将事先传递的回调函数包装成任务，加入消息队列的末尾排队，等待主线程调度执行<br> 在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行</p>              </div>            </details><h3 id="JS为何会阻碍渲染"><a href="#JS为何会阻碍渲染" class="headerlink" title="JS为何会阻碍渲染"></a><code>JS</code>为何会阻碍渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Megumi&lt;/h1&gt;</span><br><span class="line">  &lt;button&gt; CLICK ME&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const title = document.querySelector(&#x27;h1&#x27;);</span><br><span class="line">    const button = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">    const delay = (duration) =&gt; &#123;</span><br><span class="line">      const start = Date.now();</span><br><span class="line">      while (Date.now() - start &lt; duration) &#123;</span><br><span class="line">        // do nothing</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    button.addEventListener(&#x27;click&#x27;, event =&gt; &#123;</span><br><span class="line">      title.innerHTML = &#x27;EXPLOSION!&#x27;;</span><br><span class="line">      delay(5000)</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>点击按钮会卡5s 后才会重新绘制</strong></p><h3 id="任务优先级"><a href="#任务优先级" class="headerlink" title="任务优先级"></a>任务优先级</h3><p>任务没有优先级 在消息队列中先进先出</p><p>但是<strong>消息队列</strong>是有优先级的<br>w3c的最新解释：  </p><ul><li>每一个任务都有任务类型，<strong>同一个类型的任务必须在一个队列</strong>，不同类型的任务可以分属于不同的队列，在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行 (<strong><code>microtask queue</code></strong>)</li></ul><blockquote><p>随着浏览器的复杂度提升，<code>W3C</code>不在使用宏队列的说法</p></blockquote><p>在目前 <strong>chrom</strong>的实现中,至少包含下面的队列:  </p><ul><li>延时队列：用于存放计时器到达过的回调任务，优先级 中</li><li>交互队列：用于存放用户操作后产生的事件处理任务 优先级 高</li><li>微队列：用户存放需要最快执行的任务，优先级 最高</li></ul><blockquote><p>添加任务到微队列的主要方式是使用 Promise MutationObserver</p><p>例如  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即把一个函数添加到微队列</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(函数)</span><br></pre></td></tr></table></figure></blockquote><details class="folding-tag" yellow><summary> `JAVASCRIPT`的事件循环 </summary>              <div class='content'>              <p>事件循环又叫消息循环,是浏览器渲染主线程的工作方式<br> 在<code>Chrome</code>的源码中,会开启一个不会结束的<code>for</code>循环,每次循环从消息队列中取出第一个任务执行,而其他线程只需要在合适的时候将任务加入到队列末尾即可<br> 过去简单的把消息队列分为宏任务和微任务 这种说法已经不能满足浏览器的复杂性 取而代之的是一种更加灵活多变的处理方式<br> 根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列，不同任务队列有不同的优先级 再一次事件循环中，由浏览器自行决定那一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级 必须优先调度执行</p>              </div>            </details><details class="folding-tag" red><summary> `JS`中的计时器能做到精确计时吗？为什么？ </summary>              <div class='content'>              <p>不能，因为</p><ul><li>计算机硬件没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身就会有偏差，JS是调用的操作系统的函数</li><li>按照W3C的标准，如果嵌套层级超过5层，则会有4毫秒的最少事件</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲的时去运行</li></ul>              </div>            </details><h1 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h1><p><strong>渲染时间点</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse6.png"></p><p>当浏览器的网络线程收到<code>HTML</code>文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列<br>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程</p><p>整个渲染的流程分为多个阶段，分别是：<br><strong>HTML解析</strong> ——&gt; <strong>样式计算</strong> ——&gt; <strong>布局</strong>——&gt; <strong>分层</strong>——&gt;<strong>绘制</strong>——&gt;<strong>分块</strong>——&gt;<strong>光栅化</strong>——&gt;<strong>画</strong></p><p>每个阶段都有明确的输入和输出，上一个阶段的输出会成为下一个阶段的输入<br>这样，整个渲染流程就形成了一套组织严密的生产流水线</p><h2 id="1-解析HTML-Parse-HTML"><a href="#1-解析HTML-Parse-HTML" class="headerlink" title="1. 解析HTML - Parse HTML"></a>1. 解析HTML - Parse HTML</h2><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse7.png"></p><p><strong>Document Object Modal</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse8.png"></p><p><strong>CSS Object Modal</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse9.png"></p><p>渲染的第一步是解析<strong>HTML</strong>  解析过程中遇到<strong>CSS</strong>解析遇到<strong>JS</strong>执行<strong>JS</strong> 为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载HTML中的外部CSS文件和外部的JS文件</p><p>如果主线程解析到link位置，此时外部的CSS文件还没有下载解析好，主线程不会等待，继续解析后续的HTML，这是因为下载和解析CSS的工作是在预解析线程中进行的，这就是CSS不会阻塞HTML解析的根本原因</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse10.png"></p><p>如果主线程遇到JS时必须暂停一切的任务，等待下载执行完后才能继续 解析线程可以分担一点下载JS的任务  <img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse11.png"></p><p>主线程遇到<code>script</code>位置，会停止解析HTML,转而等待JS文件下载好，并将全局代码解析执行完成后，才继续解析HTML。这是因为JS代码的执行过程可能会修改当前的DOM树，所以DOM树的生成必须暂停，这就是JS会阻塞HTML解析的根本原因<br>在第一步完成后 会得到DOM树和CSSOM树 浏览器的默认样式、内部样式、外部样式、行内样式会包含在CSSOM树中</p><h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2. 计算"></a><strong>2. 计算</strong></h2><p>主线程会遍历得到的DOM树，依次为树中的每个节点计算出它的最终样式，称之为 <strong>Computed Style</strong></p><p>在这一过程中 很多预设值会变成绝对值 比如 RED 会变成 <code>rgb(255,0,0)</code> 相对单位会变成绝对单位 比如 em 会变成px</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse12.png"></p><p>这一步完成后会得到一棵带样式的DOM树</p><h2 id="3-布局"><a href="#3-布局" class="headerlink" title="3. 布局"></a><strong>3. 布局</strong></h2><p>布局阶段会依次遍历DOM树的每一个节点,计算每一个节点的几何信息，例如节点的高度，相对包含块的位置</p><p>大部分的时候 DOM 树和布局树并非一一对应</p><p>比如<code>display: none</code>的节点没有几何信息 因此不会生成到布局树 又比如使用了伪元素选择器 虽然<strong>DOM</strong>树中不存在这些伪元素节点 但它们拥有几何信息 所以会生成到布局树中 还有匿名行盒 匿名快盒 等 会导致无法一一对应</p><h2 id="4-分层"><a href="#4-分层" class="headerlink" title="4.分层"></a><strong>4.分层</strong></h2><p>主线程会使用一套复杂的策略对整个布局树进行分层</p><p>分层的好处在于 将来某一个层改变后、仅会对该层进行后续处理 从而提高效率</p><p>滚动条 推叠上下文 <code>transfrom</code> <code>opacity</code>等样式都会影响分层的结果 可以通过<code>will-change</code>属性更大程序的影响分层结果</p><h2 id="5-绘制"><a href="#5-绘制" class="headerlink" title="5.绘制"></a><strong>5.绘制</strong></h2><p>主线程会为每个层单独产生绘制指令集 用于描述这一层的内容该如何画出来<br>完成绘制之后，主线程将每个图层的绘制信息提交给合成线程，剩余的工作将由合成线程完成<img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse13.png"></p><h2 id="6-分块"><a href="#6-分块" class="headerlink" title="6.分块"></a><strong>6.分块</strong></h2><p>将每层分为多个小区域<br>分块的工作是交给多个线程同时进行的<br>合成线程首先对每个图层进行分块，将其划分为更多的小区域<br>会从线程池中拿取多个线程来完成分块工作</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse14.png"></p><h2 id="7-光栅化"><a href="#7-光栅化" class="headerlink" title="7.光栅化"></a><strong>7.光栅化</strong></h2><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse15.png"></p><p>合成线程会将信息交给GPU进程 以极高的速度完成光栅化<br>GPU进程会开启多个线程来完成光栅化 并且优先处理靠近视口区域的块<br>光栅化的结果 就是一块一块的位图</p><h2 id="8-画"><a href="#8-画" class="headerlink" title="8.画"></a><strong>8.画</strong></h2><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/browse16.png"></p><p>合成线程拿到每个层、每个块的位图后、生成一个个指引(quad)信息<br> 指引会标识出每个位图应该画到屏幕的那个位置以及会考虑到旋转 缩放等变形<br> 变形发生在合成线程 与渲染主线程无关 这就是<code>transform</code>高效率的本质原因<br> 合成线程会把quad提交给GPU进程 有GPU进程产生系统调用 提交给GPU硬件 最终完成屏幕的成像</p><h2 id="什么是reflow"><a href="#什么是reflow" class="headerlink" title="什么是reflow"></a><strong>什么是reflow</strong></h2><p>reflow的本质就是重新计算layout树<br> 当进行了会影响布局树的操作后，需要重新计算布局树 会引发layout<br> 为了避免连续的多次操作导致布局树反复计算 浏览器会合并这些操作 当JS代码全部完成后在进行统一计算 所以改动属性造成的reflow是异步的<br> 也同样因为如此 当JS获取布局属性时，就可能造成无法获取到最新的布局信息<br> 决定立即获取属性立即reflow</p><h2 id="什么是repaint"><a href="#什么是repaint" class="headerlink" title="什么是repaint"></a><strong>什么是repaint</strong></h2><p>repaint的本质就是重新根据分层信息计算了绘制指令<br>当改动了可见样式后 就需要重新计算 会引发repaint<br>由于元素的布局信息也属于可见样式 所以reflow一定会引发repaint</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>是基于已有知识来猜测答案的一种问题求解策略</p><p>枚举的思想是不断地猜测，从可能的集合中一一尝试，然后在判断题目的条件是否成立</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>建立简洁的数学模型</li><li>枚举的要素举例清楚</li><li>减少枚举的空间</li><li>选择合适的枚举顺序</li></ul><p>例: <strong>一个数组中的数互不相同，求其中和为0的数对的个数</strong></p><p>当然可能一眼就看出来暴力的解法 即两层<code>for</code>循环嘛</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum0</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] === <span class="number">0</span>) &#123;</span><br><span class="line">        res++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然有没有优化的空间呢？ 我们发现(a,b)与(b,a)是不是都是答案 不妨要求第一个数要出现在靠前的位置代码如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum0</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] === <span class="number">0</span>) &#123;</span><br><span class="line">        res++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res*<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就减少了J的循环开销 但是能不能在优化呢？</p><p>两个数是否都要去枚举出来呢？题目的条件已经确定了其他因素的条件能不能找到一种方法直接判断那个数是否存在呢？就可以省掉枚举一次的时间(可以使用桶记录遍历过的树) 有点类似哈希表</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum0</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> hashTable = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123; </span><br><span class="line">    <span class="keyword">let</span> num = nums[i]</span><br><span class="line">    <span class="keyword">if</span> (hashTable[<span class="number">0</span>-num]) &#123;</span><br><span class="line">      <span class="comment">// return</span></span><br><span class="line">      res++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hashTable[num] = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果抽象在生活中理解就是 现在有一群人 要找朋友<br>第一种方法呢就是两个人都说自己想找什么样的朋友 在去匹配<br>第二种方法就是一个人说了自己想找什么样的朋友让主持人去帮忙留意在配对</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="leetcode-两数之和"><a href="#leetcode-两数之和" class="headerlink" title="leetcode 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">leetcode 两数之和</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> twoSum = <span class="keyword">function</span>(<span class="params">nums,target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashTable = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> num = nums[i]</span><br><span class="line">        <span class="keyword">if</span>(hashTable[target-num]!==<span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [i,hashTable[target-num]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashTable[num] = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-三数之和"><a href="#leetcode-三数之和" class="headerlink" title="leetcode 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">leetcode 三数之和</a></h4><p>分析:更两数之和不同的点在于 三个数如果要枚举的情况更加复杂 如果采取暴力的三层循环 很可能会超时 而且去重会很麻烦,故采取双指针做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 先排序 方便使用指针</span></span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="comment">// 先判断特殊条件 如果最小的大于0 或者最大的小于0</span></span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>]&gt;<span class="number">0</span> || nums[n-<span class="number">1</span>]&lt;<span class="number">0</span>) <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> iNum = nums[i]</span><br><span class="line">        <span class="keyword">let</span> left = i+<span class="number">1</span> <span class="comment">// 左指针</span></span><br><span class="line">        <span class="keyword">let</span> right = n-<span class="number">1</span><span class="comment">// 右指针</span></span><br><span class="line">        <span class="comment">// 对 a 进行去重 (a:iNum,b:left,c:right)</span></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">1</span> &amp;&amp; iNum==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">// 对left和right进行遍历</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;right) &#123;</span><br><span class="line">            <span class="keyword">const</span> lNum = nums[left]</span><br><span class="line">            <span class="keyword">const</span> rNum = nums[right]</span><br><span class="line">            <span class="comment">// 小于0 则说明左边的数字太小了</span></span><br><span class="line">            <span class="keyword">if</span> (iNum+lNum+rNum &lt; <span class="number">0</span>) left++</span><br><span class="line">            <span class="comment">// 大于0 则说明右边的数字太大了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (iNum+lNum+rNum&gt;<span class="number">0</span>) right--</span><br><span class="line">            <span class="comment">// 如果等于0</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">push</span>([iNum,lNum,rNum])</span><br><span class="line">                <span class="comment">// 注意此时要对left和right进行去重</span></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right &amp;&amp; rNum==nums[right-<span class="number">1</span>]) right--</span><br><span class="line">                <span class="keyword">while</span>(letf&lt;right &amp;&amp; lNum==nums[left+<span class="number">1</span>]) left ++</span><br><span class="line">                right--</span><br><span class="line">                left++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-四数之和"><a href="#leetcode-四数之和" class="headerlink" title="leetcode 四数之和"></a><a href="https://leetcode.cn/problems/4sum/">leetcode 四数之和</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实和三数之后类似 无疑就是在三数之后上面多加了一层for循环而已</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fourSun = <span class="keyword">function</span>(<span class="params">nums,target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">4</span>) <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="comment">// 遍历第一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> iNum = nums[i]</span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">1</span> &amp;&amp; iNum==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">// 特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> (iNum+nums[i+<span class="number">1</span>]+nums[i+<span class="number">2</span>]+nums[i+<span class="number">3</span>]&gt;target) <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> (iNum+nums[n-<span class="number">1</span>]+nums[n-<span class="number">2</span>]+nums[n-<span class="number">3</span>]&lt;target) <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">// 转化成三数之和</span></span><br><span class="line">        <span class="keyword">let</span> threeSum = target-iNum</span><br><span class="line">        ... 相同操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-最接近三数之和"><a href="#leetcode-最接近三数之和" class="headerlink" title="leetcode 最接近三数之和"></a><a href="https://leetcode.cn/problems/3sum-closest/">leetcode 最接近三数之和</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也是三数之和的那套逻辑就是比较了一下最小值</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> threeSumClosest = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) </span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> ans = nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> iNum = nums[i]</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; iNum === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">let</span> l = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> r = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">const</span> lNum = nums[l]</span><br><span class="line">            <span class="keyword">const</span> rNum = nums[r]</span><br><span class="line">            <span class="keyword">let</span> sum = iNum + lNum + rNum</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(target - sum) &lt; <span class="title class_">Math</span>.<span class="title function_">abs</span>(target-ans)) &#123;</span><br><span class="line">                ans = sum</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                l++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                r--</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="leetcode-字母异位词分组"><a href="#leetcode-字母异位词分组" class="headerlink" title="leetcode 字母异位词分组"></a><a href="https://leetcode.cn/problems/group-anagrams/">leetcode 字母异位词分组</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashTable = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">sort</span>()</span><br><span class="line">        <span class="keyword">const</span> key = array.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(hashTable[key] != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            hashTable[key].<span class="title function_">push</span>(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashTable[key] = [str]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(hashTable))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-最长连续序列"><a href="#leetcode-最长连续序列" class="headerlink" title="leetcode 最长连续序列"></a><a href="https://leetcode.cn/problems/longest-consecutive-sequence">leetcode 最长连续序列</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">    <span class="keyword">const</span> hashTable = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[nums[i]-<span class="number">1</span>]!==underfined) &#123;</span><br><span class="line">            hashTable[nums[i]]++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashTable[nums[i]] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(hashTable)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="leetcode-接雨水"><a href="#leetcode-接雨水" class="headerlink" title="leetcode 接雨水"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">leetcode 接雨水</a></h4><p>解法1：暴力每层(会超时)<br>思路就是一层一层的向上遍历然后累加就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trap = <span class="keyword">function</span> (<span class="params">height</span>) &#123;</span><br><span class="line"><span class="comment">// 按照每层来计算</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> maxHeight = <span class="title class_">Math</span>.<span class="title function_">max</span>(...height)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=maxHeight;i++) &#123;</span><br><span class="line">        <span class="comment">// 有一个启动项目isStart</span></span><br><span class="line">        <span class="keyword">let</span> isStart = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;height.<span class="property">length</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isStart&amp;&amp;height[j]&lt;i) &#123;</span><br><span class="line">                temp++</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(height[j]&gt;=i) &#123;</span><br><span class="line">                sum += temp</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                isStart = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二：暴力(每列)</p><p>每列每列的遍历只需要找到这一列的最左边和最右边的高度就可以求出，每列的雨水了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trap (height) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> n = height.<span class="property">length</span></span><br><span class="line">    <span class="comment">// 两端不用考虑</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="comment">// 找出左边最高的墙</span></span><br><span class="line">        <span class="keyword">let</span> max_left= <span class="title class_">Math</span>.<span class="title function_">max</span>(...height.<span class="title function_">slice</span>(<span class="number">0</span>,i-<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 找出右边最高的墙</span></span><br><span class="line">        <span class="keyword">let</span> max_right = <span class="title class_">Math</span>.<span class="title function_">max</span>(...height.<span class="title function_">slice</span>(i+<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 找出两端最小的</span></span><br><span class="line">        <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(max_left,max_right)</span><br><span class="line">        <span class="keyword">if</span>(min&gt;height[i]) &#123;</span><br><span class="line">            sum+=min-height</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法三：(解法二上面的优化)</p><p>发现在解法二中每次遍历都要重新遍历左边和右边 思考过后显然是没什么必要的可以形成数组取不同的<code>i</code>即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tarp = <span class="keyword">function</span> (<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = height.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> max_left = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> max_right = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        max_left[i]= <span class="title class_">Math</span>.<span class="title function_">max</span>(max_left[i-<span class="number">1</span>],height[i-<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=n-<span class="number">2</span>;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">        max_right[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(max_right[i+<span class="number">1</span>],height[i+<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(max_left[i],max_right[i])</span><br><span class="line">        <span class="keyword">if</span>(min&gt;height[i]) &#123;</span><br><span class="line">            sum+=min-height[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法四：找特殊的高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trap = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = height.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> maxHeight = <span class="title class_">Math</span>.<span class="title function_">max</span>(...height)</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 从左边依次遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height[i] === maxHeight) &#123;</span><br><span class="line">      left = i</span><br><span class="line">      <span class="keyword">break</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> right = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 从右边依次遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (height[i] === maxHeight) &#123;</span><br><span class="line">      right = i</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算left和right之间的水滴</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = left + <span class="number">1</span>; i &lt; right; i++) &#123;</span><br><span class="line">    sum+=maxHeight-height[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算最左边到left的水滴</span></span><br><span class="line">  <span class="keyword">let</span> leftTemp = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; left; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftTemp &gt; height[i]) &#123;</span><br><span class="line">      sum += leftTemp - height[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      leftTemp = height[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// leftTemp = height[i]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> rightTemp = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt; right; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rightTemp &gt; height[i]) &#123;</span><br><span class="line">      sum+=rightTemp-height[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rightTemp = height[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机操作系统</title>
      <link href="/posts/dbeddcc1.html"/>
      <url>/posts/dbeddcc1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机操作系统 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/posts/e255a10a.html"/>
      <url>/posts/e255a10a.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h1><p><strong>总结理解了<code>TCP/IP</code>的必备基础知识，包括<code>OSI</code>参考模型、网络概念本质、网络构建等</strong></p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>在计算机网络与信息通信领域，人们经常会提起<strong>协议</strong>，互联网中常有的具有代表性的协议有**<code>IP,TCP,HTTP</code>** 等，而<code>LAN</code>(局域网)中常见的协议有IPX&#x2F;SPX等</p><h3 id="常见的协议"><a href="#常见的协议" class="headerlink" title="常见的协议"></a>常见的协议</h3><p>计算机网络体系结构将这些网络协议进行了系统的归纳 <strong>TCP&#x2F;IP 就是IP、TCP、HTTP等协议的集合。</strong></p><table><thead><tr><th align="left">网络体系结构</th><th align="center">协议</th><th>主要用途</th></tr></thead><tbody><tr><td align="left">TCP&#x2F;IP</td><td align="center">IP、ICMP、TCP、UDP、HTTP、SNMP等</td><td>互联网、局域网</td></tr><tr><td align="left">IPX&#x2F;SPX</td><td align="center">IPX、SPX、NPC…</td><td>个人电脑局域网</td></tr><tr><td align="left">…</td><td align="center">…</td><td>…</td></tr></tbody></table><h3 id="协议的重要性"><a href="#协议的重要性" class="headerlink" title="协议的重要性"></a>协议的重要性</h3><p>简单来说 协议就是计算机与计算机之间通过网络实现通信时事先达到的一种约定 这种约定使得不同的厂商的设备 不同的cpu 不同的操作系统组成的计算机只要遵守相同的协议就能进行通信 如果使用的协议不同就无法通信 这就好比不同国家的不同语言说话怎样也无法理解。<br>协议可以分成很多种，每一种协议都明确规定了行为规范，两台计算机必须能够<strong>支持相同的协议</strong>并<strong>遵守相同的协议</strong>进行处理才能实现相互通信</p><blockquote><p>CPU和OS</p><ul><li>CPU(Central Processing Unit)：中央处理器，他如同一台计算机的心脏，每个程序都是由它调度执行的，CPU的性能很大程度上也决定着一台计算机的处理性能</li><li>OS(Operating System)：操作系统，是一种基础的软件，他集合了CPU管理，内存管理，计算机外围设备管理以及程序运行管理等重要的功能 本篇只介绍TCP和IP协议的处理 很多情况其实已经内嵌到操作系统中了</li></ul></blockquote><h3 id="协议的理解"><a href="#协议的理解" class="headerlink" title="协议的理解"></a>协议的理解</h3><p>举个简单的例子 现在有A，B，C三个人，A只会说汉语，B只会说英语，C都会说，现在A要与C说话，A与B说话该怎么进行沟通呢？ 现在我们规定  </p><ul><li>将汉语和英语当作 ‘<strong>协议</strong>‘</li><li>将聊天当作 ‘<strong>通信</strong>‘</li><li>将说话的内容当作 ‘<strong>数据</strong>‘</li></ul><p>那么由于A与B各持一种语言 无法交流 因为他们之间谈话的协议(语言)不同 双方都无法将数据(想说的话)传递给对方<br>A和C 之间的聊天情况 两个人都使用汉语这个<strong>协议</strong>就能理解对方所要表达的具体含义了 A和C为了顺利沟通采用了同一协议，使得他们之间能够传递所期望的数据(说给对方的话)</p><p>如此看来，协议如同人们平常说话的语言，虽然语言是人类说话的特性 但计算机和计算机之间进行通信的时候也可以是认为基于人类的语言实现了相互通信</p><p>计算机从物理连接层面到应用程序的软件层面，各个组件都严格遵循着事先达成的约定才能真正的实现通信 每个计算机还必须装有实现通信最基本的功能</p><h3 id="分组交换协议"><a href="#分组交换协议" class="headerlink" title="分组交换协议"></a>分组交换协议</h3><p>分组交换是指将大数据分割为一个个叫包(Packet)的较小单位进行传输的方法，这里的包，就如同我们在邮局里见到的邮包 分组交换就是将大数据分装为一个个这样的邮包交给对方</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network1.png" alt="network1"></p><p>当人们邮寄包裹的时候 通常会填写一个寄件单贴到表单上在交给邮局 邮寄一般都会有寄件人和收件人的详细地址，类似地，计算机通信也会在每一个分组中附加上源主机地址和目标主机地址给通信线路 这些发送端地址，接收端地址，己及分组序列号写入的部分称为’报文首部’</p><p>一个较大的数据被分为多个分组时，为了标明是原始数据中的那一部分 就有必要将分组的序号写入包中，接收端会根据这个序号，再将每个分组按序号重新装配为原始数据</p><p>通信协议中，通常会根据报文首部应该写入那些信息，应该如何处理这些信息，相互通信的每一台计算机则根据协议构造报文首部，读取首部内容等</p><h2 id="协议分层和OSI参考模型"><a href="#协议分层和OSI参考模型" class="headerlink" title="协议分层和OSI参考模型"></a>协议分层和OSI参考模型</h2><h3 id="协议的分层"><a href="#协议的分层" class="headerlink" title="协议的分层"></a>协议的分层</h3><p>ISO在制定标准化OSI 对网络体系结构进行了充分的讨论 最终形成了做为通信协议设计指标的OSI参考模型 将通信协议中必要的功能分成了7层 使得比较复杂的网络协议更加简单化</p><p>在这一模型中 每个分层都接受由它下一层所提供的特定服务，并且负责为自己的上一层提供特定的服务，上下层进行交互时所遵循的约定叫做<strong>接口</strong>同一层之间的交互所遵循的约定叫做<strong>协议</strong></p><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>OSI参考模型将这样一个复杂的协议整理并分成了易于理解的七个分层<img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network2.png" alt="network2"></p><blockquote><p>OSI(参考模型)：将通信划分为7个分层 称之为OSI参考模型</p><p>OSI(协议)：让异构的计算机之间能相互通信，OSI协议以OSI参考模型为基础界定了每个阶层的协议和每个阶层之间相关接口的标准</p></blockquote><h3 id="五层网络模型"><a href="#五层网络模型" class="headerlink" title="五层网络模型"></a>五层网络模型</h3><p>面对复杂的问题，可以使用分层的方式来简化<br>经过不断的演化，网络最终形成了五层模型：</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network3.png" alt="network3"></p><h3 id="四层、五层、七层"><a href="#四层、五层、七层" class="headerlink" title="四层、五层、七层"></a>四层、五层、七层</h3><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network4.png" alt="network4"></p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL(<strong>uniform resource localtor</strong>,统一资源定位符) 用于定位网络服务<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network5.png" alt="image-20230112104100679"> </p><p>URL是一个固定格式的字符串</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network6.png" alt="image-20230112102913056"></p><p>表达了<strong>那台计算机(domain)<strong>中的那个</strong>程序(port)<strong>寻找</strong>那个服务(path)</strong>,并注明了获取服务的<strong>具体细节(path)</strong>,以及要用什么样的协议<strong>通信(schema)</strong></p><ul><li>当协议是<code>http</code>端口为<code>80</code>时，端口可以省略</li><li>当协议是<code>https</code>端口为<code>443</code>时，端口可以省略</li><li><code>schema</code>、<code>domain</code>、<code>path</code>是必填的，其他的根据具体的要求填写</li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>超文本传输协议(Hyper Text Transfer Protocol,HTTP)是一个广泛运用互联网的应用层协议</p><p>该协议规定了两个方面的内容：</p><ul><li><strong>传递消息的模式</strong></li><li><strong>传递消息的格式</strong></li></ul><h3 id="传递消息的模式"><a href="#传递消息的模式" class="headerlink" title="传递消息的模式"></a>传递消息的模式</h3><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network7.png" alt="image-20230112110047746"></p><p>HTTP使用了一种极为简单的消息传递模式，「请求-响应」模式发起请求的称之为客户端，接收请求并完成响应的称之为服务器。「请求-响应」完成后，一次交互结束。</p><h3 id="传递消息的格式"><a href="#传递消息的格式" class="headerlink" title="传递消息的格式"></a>传递消息的格式</h3><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network8.png" alt="image-20230113214343300"></p><p>​HTTP的消息格式是一种纯文本的格式 文本分三个部分:</p><blockquote><p>请求行<br>请求头  </p><p>请求体</p></blockquote><p><strong>具体每一部分写什么内容，要看具体的服务要求</strong></p><h3 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h3><ol><li><p>安装<code>vscode</code>插件<code>REST Clinet</code> </p></li><li><p>新建文件<code>xxx.http</code></p></li><li><p>编写请求文本</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/user/login</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">Host localhost:7001</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-1c">&#123;</span></span><br><span class="line"><span class="language-1c"><span class="string">&quot;loginId&quot;</span>: &#x27;admin&#x27;,</span></span><br><span class="line"><span class="language-1c"><span class="string">&quot;loginPwd&quot;</span>: &#x27;explosion&#x27;</span></span><br><span class="line"><span class="language-1c">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="熟悉关键信息"><a href="#熟悉关键信息" class="headerlink" title="熟悉关键信息"></a>熟悉关键信息</h3><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>请求行中的第一个单词是请求方法</p><p><strong>在HTTP协议中，请求方法仅有语义的区别</strong>，只是表达了这次请求的「愿望」。  </p><blockquote><p>关于请求方法的协议原文见 <a href="https://www.rfc-editor.org/rfc/rfc7231.html">HTTP&#x2F;1.1规范RFC7231-Chapter4</a></p><p><img src="http://mdrs.yuanjin.tech/img/202301131908971.png" alt="image-20230113190854930"></p></blockquote><p>比如<code>GET</code>表达了客户端想要获取一些东西，<code>POST</code>表达了客户端想要提交一些东西</p><p>常见的方法有：</p><ul><li><code>GET</code> 获取</li><li><code>post</code> 提交</li><li><code>PUT</code> 修改</li><li><code>DELETE</code> 删除</li></ul><p>具体在开发中应该选择什么请求方法，一定是看服务方的要求</p><h5 id="请求头-Host"><a href="#请求头-Host" class="headerlink" title="请求头 - Host"></a>请求头 - <code>Host</code></h5><p><code>Host</code>标注了<code>URL</code>地址中的<code>Domain + Port</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Host: study.duyiedu.com</span><br></pre></td></tr></table></figure><h5 id="请求头-Content-Type"><a href="#请求头-Content-Type" class="headerlink" title="请求头 - Content-Type"></a>请求头 - <code>Content-Type</code></h5><p><code>Content-Type</code>标注了附带的请求体是什么格式</p><p>比如，请求体的数据为<code>loginId:admin, loginPwd:123456</code>，请求体可以用不同的格式发出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">loginId=admin&amp;loginPwd=123123</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123; &quot;loginId&quot;: &quot;admin&quot;, &quot;loginPwd&quot;: &quot;123123&quot; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=aaa</span><br><span class="line"></span><br><span class="line">--aaa</span><br><span class="line">Content-Disposition: form-data; name=&quot;loginId&quot;</span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">--aaa</span><br><span class="line">Content-Disposition: form-data; name=&quot;loginPwd&quot;</span><br><span class="line"></span><br><span class="line">123456</span><br><span class="line">--aaa</span><br><span class="line">Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;small.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">文件的二进制</span><br><span class="line">--aaa--</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h5><p>响应码（状态码、消息码）是响应行中的一个数字，后面往往跟上一个对应的单词，用于表达服务器对这个响应的整体「态度」</p><p>常见的响应码有：<img src="http://mdrs.yuanjin.tech/img/202301121310570.png" alt="image-20230112131000507"></p><p>常见的状态码有：</p><ol><li><p>200 OK：一切正常。</p></li><li><p>301 Moved Permanently：资源已被永久重定向。</p><p><code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我已经永远的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了响应头的Location中了</code></p><blockquote><p>试试请求：<a href="http://www.douyutv.com/">www.douyutv.com</a></p></blockquote></li><li><p>302 Found：资源已被临时重定向。</p><p><code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我临时的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></p></li><li><p>304 Not Modified：文档内容未被修改。</p><p><code>你的请求我收到了，你要的东西跟之前是一样的，没有任何的变化，所以我就不给你结果了，你自己就用以前的吧。啥？你没有缓存以前的内容，关我啥事</code></p></li><li><p>400 Bad Request：语义有误，当前请求无法被服务器理解。</p><p><code>你给我发的是个啥啊，我听都听不懂</code></p></li><li><p>403 Forbidden：服务器拒绝执行。</p><p><code>你的请求我已收到，但是我就是不给你东西</code></p></li><li><p>404 Not Found：资源不存在。</p><p><code>你的请求我收到了，但我没有你要的东西</code></p></li><li><p>500 Internal Server Error：服务器内部错误。</p><p><code>你的请求我已收到，但这道题我不会，解不出来，先睡了</code></p></li></ol><h5 id="响应头-Content-Type"><a href="#响应头-Content-Type" class="headerlink" title="响应头 - Content-Type"></a>响应头 - <code>Content-Type</code></h5><p><code>Content-Type</code>标注了附带的响应体是什么格式</p><p>常见的值有：</p><ol><li><code>text/plain</code>: 普通的纯文本</li><li><code>text/html</code>：html文档</li><li><code>text/javascript</code> 或 <code>application/javascript</code>：js代码</li><li><code>text/css</code>：css代码</li><li><code>image/jpeg</code>：jpg图片</li><li><code>attachment</code>：附件</li><li>其他<code>MIME</code>类型</li></ol><h1 id="浏览器的通信能力"><a href="#浏览器的通信能力" class="headerlink" title="浏览器的通信能力"></a>浏览器的通信能力</h1><h2 id="用户代理"><a href="#用户代理" class="headerlink" title="用户代理"></a>用户代理</h2><p>浏览器可以代替用户完成http请求，代替用户解析响应结果，所以我们称之为：</p><p><strong>用户代理 user agent</strong></p><p>在网络层面，对于前端开发者，必须要知道浏览器拥有的两大核心能力：</p><ul><li>自动发出请求的能力</li><li>自动解析响应的能力</li></ul><h3 id="自动发出请求的能力"><a href="#自动发出请求的能力" class="headerlink" title="自动发出请求的能力"></a>自动发出请求的能力</h3><p>当一些事情发生的时候，浏览器会代替用户自动发出http请求，常见的包括：</p><ol><li><p><strong>用户在地址栏输入了一个url地址，并按下了回车</strong></p><p>浏览器会自动解析URL，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p></li><li><p><strong>当用户点击了页面中的a元素</strong></p><p>浏览器会拿到a元素的href地址，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p></li><li><p><strong>当用户点击了提交按钮<code>&lt;button type=&quot;submit&quot;&gt;...&lt;/button&gt;</code></strong></p><p>浏览器会获取按钮所在的<code>&lt;form&gt;</code>元素，拿到它的<code>action</code>属性地址，同时拿到它<code>method</code>属性值，然后把表单中的数据组织到请求体中，发出<code>指定方法</code>的请求，同时抛弃当前页面。</p><blockquote><p>这种方式的提交现在越来越少见了</p></blockquote></li><li><p><strong>当解析HTML时遇到了<code>&lt;link&gt; &lt;img&gt; &lt;script&gt; &lt;video&gt; &lt;audio&gt;</code>等元素</strong></p><p>浏览器会拿到对应的地址，发出<code>GET</code>请求</p></li><li><p><strong>当用户点击了刷新</strong></p><p>浏览器会拿到当前页面的地址，以及当前页面的请求方法，重新发一次请求，同时抛弃当前页面。</p></li></ol><blockquote><p>浏览器在发出请求时，会自动附带一些请求头</p></blockquote><p>&#x3D;&#x3D;重点来了&#x3D;&#x3D;</p><p>从古至今，服务器和浏览器都有一个约定：</p><p><strong>当发送GET请求时，不会附带请求体</strong></p><p>这个约定深刻的影响着后续的前后端各种应用，现在，几乎所有人都在潜意识中认同了这一点，无论是前端开发人员还是后端开发人员。</p><p>由于前后端程序的默认行为，逐步造成了GET和POST的各种差异：</p><ol><li><p>浏览器在发送 GET 请求时，不会附带请求体</p></li><li><p>GET 请求的传递信息量有限，适合传递少量数据；POST 请求的传递信息量是没有限制的，适合传输大量数据。</p></li><li><p>GET 请求只能传递 ASCII 数据，遇到非 ASCII 数据需要进行编码；POST 请求没有限制</p></li><li><p>大部分 GET 请求传递的数据都附带在 path 参数中，能够通过分享地址完整的重现页面，但同时也暴露了数据，若有敏感数据传递，不应该使用 GET 请求，至少不应该放到 path 中</p></li><li><p>POST 不会被保存到浏览器的历史记录中</p></li><li><p>刷新页面时，若当前的页面是通过 POST 请求得到的，则浏览器会提示用户是否重新提交。若是 GET 请求得到的页面则没有提示。</p></li></ol><h3 id="自动解析响应的能力"><a href="#自动解析响应的能力" class="headerlink" title="自动解析响应的能力"></a>自动解析响应的能力</h3><p>浏览器不仅能发送请求，还能够针对服务器的各种响应结果做出不同的自动处理</p><p>常见的处理有：</p><ol><li><p><strong>识别响应码</strong></p><p>浏览器能够自动识别响应码，当出现一些特殊的响应码时浏览器会自动完成处理，比如<code>301、302</code></p></li><li><p><strong>根据响应结果做不同的处理</strong></p><p>浏览器能够自动分析响应头中的<code>Content-Type</code>，根据不同的值进行不同处理，比如：</p><ul><li><p><code>text/plain</code>: 普通的纯文本，浏览器通常会将响应体原封不动的显示到页面上</p></li><li><p><code>text/html</code>：html文档，浏览器通常会将响应体作为页面进行渲染</p></li><li><p><code>text/javascript</code>或<code>application/javascript</code>：js代码，浏览器通常会使用JS执行引擎将它解析执行</p></li><li><p><code>text/css</code>：css代码，浏览器会将它视为样式</p></li><li><p><code>image/jpeg</code>：浏览器会将它视为jpg图片</p></li><li><p><code>application/octet-stream</code>：二进制数据，会触发浏览器下载功能</p></li><li><p><code>attachment</code>：附件，会触发下载功能</p><p>该值和其他值不同，应放到<code>Content-Disposition</code>头中。</p></li></ul></li></ol><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><blockquote><p>访问：<a href="http://www.baidu.com![image-20220428165629557](https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network9.png)">www.baidu.com![image-20220428165629557](https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network9.png)</a></p></blockquote><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><blockquote><p>浏览器本身就具备网络通信的能力，但在早期，浏览器并没有把这个能力开放给JS。</p><p>最早是微软在IE浏览器中把这一能力向JS开放，让JS可以在代码中实现发送请求，并不会刷新页面，这项技术在2005年被正式命名为AJAX（<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML）</p></blockquote><p>AJAX 就是指在web应用程序中异步向服务器发送请求。</p><p>它的实现方式有两种，<code>XMLHttpRequest 简称XHR</code>和<code>Fetch</code></p><p>以下是两者的对比</p><table><thead><tr><th>功能点</th><th>XHR</th><th>Fetch</th></tr></thead><tbody><tr><td>基本的请求能力</td><td>✅</td><td>✅</td></tr><tr><td>基本的获取响应能力</td><td>✅</td><td>✅</td></tr><tr><td>监控请求进度</td><td>✅</td><td>❌</td></tr><tr><td>监控响应进度</td><td>✅</td><td>✅</td></tr><tr><td>Service Worker中是否可用</td><td>❌</td><td>✅</td></tr><tr><td>控制cookie的携带</td><td>❌</td><td>✅</td></tr><tr><td>控制重定向</td><td>❌</td><td>✅</td></tr><tr><td>请求取消</td><td>✅</td><td>✅</td></tr><tr><td>自定义referrer</td><td>❌</td><td>✅</td></tr><tr><td>流</td><td>❌</td><td>✅</td></tr><tr><td>API风格</td><td><code>Event</code></td><td><code>Promise</code></td></tr><tr><td>活跃度</td><td>停止更新</td><td>不断更新</td></tr></tbody></table><h1 id="跨域问题及解决方案"><a href="#跨域问题及解决方案" class="headerlink" title="跨域问题及解决方案"></a>跨域问题及解决方案</h1><h2 id="同源策略及跨域问题"><a href="#同源策略及跨域问题" class="headerlink" title="同源策略及跨域问题"></a>同源策略及跨域问题</h2><p><strong>同源策略</strong>是一套浏览器<strong>安全机制</strong>，当一个<strong>源</strong>的文档和脚本，与另一个<strong>源</strong>的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。</p><p>简单来说，同源策略对 <strong>同源资源</strong> <strong>放行</strong>，对 <strong>异源资源</strong> <strong>限制</strong></p><p>因此限制造成的开发问题，称之为<strong>跨域（异源）问题</strong></p><h3 id="同源和异源"><a href="#同源和异源" class="headerlink" title="同源和异源"></a>同源和异源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源(origin) = 协议 + 域名 + 端口</span><br></pre></td></tr></table></figure><p>例如:</p><p><code>https://study.duyiedu.com/api/movie</code>的源为<code>https://study.duyiedu.com</code></p><p><code>http://localhost:7001/index.html</code>的源为<code>http://localhost:7001</code></p><p>两个URL地址的源<strong>完全相同</strong>，则称之为<strong>同源</strong>，否则称之为<strong>异源（跨域）</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network10.png" alt="image-20230112163455982"></p><h3 id="跨域出现的场景"><a href="#跨域出现的场景" class="headerlink" title="跨域出现的场景"></a>跨域出现的场景</h3><p>跨域可能出现在三种场景：</p><ul><li><p><strong>网络通信</strong></p><p>a元素的跳转；加载css、js、图片等；AJAX等等</p></li><li><p>JS API</p><p><code>window.open</code>、<code>window.parent</code>、<code>iframe.contentWindow</code>等等</p></li><li><p>存储</p><p><code>WebStorage</code>、<code>IndexedDB</code>等等</p></li></ul><p>对于不同的跨域场景，以及每个场景中不同的跨域方式，同源策略都有不同的限制。</p><p>本文重点讨论<strong>网络通信</strong>中<code>AJAX</code>的跨域问题</p><h3 id="网络中的跨域"><a href="#网络中的跨域" class="headerlink" title="网络中的跨域"></a>网络中的跨域</h3><p>当浏览器运行页面后，会发出很多的网络请求，例如CSS、JS、图片、AJAX等等</p><p>请求页面的源称之为<strong>页面源</strong>，在该页面中发出的请求称之为<strong>目标源</strong>。</p><p>当页面源和目标源一致时，则为<strong>同源请求</strong>，否则为<strong>异源请求（跨域请求）</strong></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network11.png" alt="image-20230112163616513"></p><h3 id="浏览器如何限制异源请求？"><a href="#浏览器如何限制异源请求？" class="headerlink" title="浏览器如何限制异源请求？"></a>浏览器如何限制异源请求？</h3><p>浏览器出于多方面的考量，制定了非常繁杂的规则来限制各种跨域请求，但总体的原则非常简单：</p><ul><li>对标签发出的跨域请求轻微限制</li><li>对AJAX发出的跨域请求<strong>严厉限制</strong></li></ul><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network12.png" alt="image-20230112201027855"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS（Cross-Origin Resource Sharing）是最正统的跨域解决方案，同时也是浏览器推荐的解决方案。</p><p>CORS是一套规则，用于帮助浏览器判断是否校验通过。</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network13.png" alt="image-20230112202539003"></p><p>CORS的基本理念是：</p><ul><li>只要服务器明确表示<strong>允许</strong>，则校验<strong>通过</strong></li><li>服务器明确拒绝或没有表示，则校验不通过</li></ul><p><strong>所以，使用CORS解决跨域，必须要保证服务器是「自己人」</strong></p><h4 id="请求分类"><a href="#请求分类" class="headerlink" title="请求分类"></a>请求分类</h4><p>CORS将请求分为两类：&#x3D;&#x3D;简单请求&#x3D;&#x3D;和&#x3D;&#x3D;预检请求&#x3D;&#x3D;。</p><p>对不同种类的请求它的规则有所区别。</p><p>所以要理解CORS，首先要理解它是如何划分请求的。</p><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><blockquote><p>完整判定逻辑：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests</a></p></blockquote><p>简单来说，只要全部满足下列条件，就是简单请求：</p><ul><li><p>请求方法是<code>GET</code>、<code>POST</code>、<code>HEAD</code>之一</p></li><li><p>头部字段满足CORS安全规范，详见 <a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header">W3C</a></p><blockquote><p>浏览器默认自带的头部字段都是满足安全规范的，只要开发者不改动和新增头部，就不会打破此条规则</p></blockquote></li><li><p>如果有<code>Content-Type</code>，必须是下列值中的一个</p><ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li></ul><h5 id="预检请求-preflight"><a href="#预检请求-preflight" class="headerlink" title="预检请求(preflight)"></a>预检请求(preflight)</h5><p>只要不是简单请求，均为预检请求</p><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的跨域请求哪些是简单请求，哪些是预检请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://douyin.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="对简单请求的验证"><a href="#对简单请求的验证" class="headerlink" title="对简单请求的验证"></a>对简单请求的验证</h4><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network14.png" alt="image-20230112204546583"></p><h4 id="对预检请求的验证"><a href="#对预检请求的验证" class="headerlink" title="对预检请求的验证"></a>对预检请求的验证</h4><ol><li>发送预检请求</li></ol><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network15.png" alt="image-20230112204634493"></p><ol start="2"><li>发送真实请求（和简单请求一致）</li></ol><h4 id="细节1-关于cookie"><a href="#细节1-关于cookie" class="headerlink" title="细节1 - 关于cookie"></a>细节1 - 关于cookie</h4><p>默认情况下，ajax的跨域请求并不会附带cookie，这样一来，某些需要权限的操作就无法进行</p><p>不过可以通过简单的配置就可以实现附带cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch api</span></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样一来，该跨域的ajax请求就是一个<em>附带身份凭证的请求</em></p><p>当一个请求需要附带cookie时，无论它是简单请求，还是预检请求，都会在请求头中添加<code>cookie</code>字段</p><p>而服务器响应时，需要明确告知客户端：服务器允许这样的凭据</p><p>告知的方式也非常的简单，只需要在响应头中添加：<code>Access-Control-Allow-Credentials: true</code>即可</p><p>对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝。</p><p>另外要特别注意的是：**对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin 的值为*</code>*<em>。这就是为什么不推荐使用</em>的原因</p><h4 id="细节2-关于跨域获取响应头"><a href="#细节2-关于跨域获取响应头" class="headerlink" title="细节2 - 关于跨域获取响应头"></a>细节2 - 关于跨域获取响应头</h4><p>在跨域访问时，JS只能拿到一些最基本的响应头，如：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p><p><code>Access-Control-Expose-Headers</code>头让服务器把允许浏览器访问的头放入白名单，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Expose-Headers: authorization, a, b</span><br></pre></td></tr></table></figure><p>这样JS就能够访问指定的响应头了。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>在很久很久以前…并没有CORS方案</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network16.png" alt="image-20230112205454350"></p><p>在那个年代，古人靠着非凡的智慧来解决这一问题</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network17.png" alt="image-20230112205613983"></p><p>虽然可以解决问题，但JSONP有着明显的缺陷：</p><ul><li><p>仅能使用GET请求</p></li><li><p>容易产生安全隐患</p><blockquote><p>恶意攻击者可能利用<code>callback=恶意函数</code>的方式实现<code>XSS</code>攻击</p></blockquote></li><li><p>容易被非法站点恶意调用</p></li></ul><p><strong>因此，除非是某些特殊的原因，否则永远不应该使用JSONP</strong></p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>CORS和JSONP均要求服务器是「自己人」</p><p>那如果不是呢？</p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network18.png" alt="image-20230112210551647" style="zoom:50%;" /><p>那就找一个中间人（代理）</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network19.png" alt="image-20230115133326930"></p><p>比如，前端小王想要请求获取王者荣耀英雄数据，但直接请求腾讯服务器会造成跨域</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network20.png" alt="image-20230115133732560"></p><p>由于腾讯服务器不是「自己人」，小王决定用代理解决</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network21.png" alt="image-20230115133817554"></p><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>最重要的，是要保持<strong>生产环境和开发环境一致</strong></p><p>下面是一张决策图</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network22.png" alt="image-20230115145335319"></p><p>具体的几种场景</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/network23.png" alt="image-20230115150610750"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack、rollup、gulp、vite等打包工具</title>
      <link href="/posts/f5cc586d.html"/>
      <url>/posts/f5cc586d.html</url>
      
        <content type="html"><![CDATA[<h1 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h1><ul><li>浏览器不能使用模块化规范(兼容性) 和 使用模块化规范也会面临模块过多时的加载问题</li><li>希望有工具可以对代码进行打包，将多个模块打包成一个文件</li><li>构建工具起这样的工作,通过构建工具可以将使用的ESM规范编写的代码转换成旧的JS语法,这样可以使得所有的浏览器都可以支持代码</li></ul><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>使用步骤：<br>    1.初始化项目 <code>yarn init -y</code><br>    2.安装依赖<code>webpack</code> <code>webpack-cli</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add <span class="literal">-D</span> webpack webpack<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>​3.在项目中创建<code>src</code> 目录，然后编写代码(index.js)<br>​4.执行 <code>yarn webpack</code> 来对代码进行打包 (打包后观察 dist 目录)<br>配置文件（webpack.config.js）<br>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>, <span class="comment">// 设置打包模式 production 生产模式 development 开发模式</span></span><br><span class="line">  <span class="comment">//entry: &quot;./src/index.js&quot;, // 用来指定打包的主文件, 默认为: ./src/index.js</span></span><br><span class="line">  <span class="comment">// entry: [&quot;./src/a.js&quot;, &quot;./src/b.js&quot;]</span></span><br><span class="line">  <span class="comment">// entry: &#123;</span></span><br><span class="line">  <span class="comment">//   hello: &quot;./src/a.js&quot;,</span></span><br><span class="line">  <span class="comment">//   b: &quot;./src/b.js&quot;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 指定打包的目录,必须要绝对路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>, <span class="comment">// 打包后的文件夹</span></span><br><span class="line">    <span class="comment">//clean: true, // 自动清理打包目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    webpack 默认情况下，只会处理js文件，如果我们希望它可以处理其他类型的文件,则需要引入loader</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    以CSS 为例子:</span></span><br><span class="line"><span class="comment">      - 使用css-loader 可以处理js中的样式</span></span><br><span class="line"><span class="comment">      - 使用步骤：</span></span><br><span class="line"><span class="comment">          1.安装: yarn add css-loader -D</span></span><br><span class="line"><span class="comment">          2.配置: </span></span><br><span class="line"><span class="comment">          module: &#123;</span></span><br><span class="line"><span class="comment">            rules: [</span></span><br><span class="line"><span class="comment">              &#123;test: /\.css$/i, use: &quot;css-loader&quot;&#125;</span></span><br><span class="line"><span class="comment">            ]</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/i</span>, <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|svg)$/i</span>, <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>&#125; <span class="comment">// 图片资源类型的数据,可以通过指定type来处理</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写js代码时，经常需要使用一些js中的新特性(箭头函数，解构赋值),而新特性在旧的浏览器中兼容性并不好,此时旧导致我们无法使用一些新的特性<br>我们可以通过一些工具使用新特性编写代码，将新代码转换为旧代码<br><code>babel</code> 就是这样的一个工具,可以将新的js语法转换为旧的js，以提高代码的兼容性<br>我们如果希望在webpack支持babel，则需要向webpack中引入babel的loader</p><p><strong>使用步骤</strong></p><p>1.<code>npm install -D babel-loader @babel/core @babel/preset-env</code><br>2.配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在package.json中设置兼容性</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;defaults&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>插件(plugin)</p><ul><li><p>插件用来为webpack来扩展功能</p></li><li><p>html-webpack-plugin</p><ul><li><p>这个插件可以在打包代码后,自动打包目录生成html页面</p></li><li><p>使用步骤</p><ol><li><p>安装依赖 <code>yarn add -D html-webpack-plugin</code></p></li><li><p>引入配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HTMLPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;suki&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><p>开发服务器（webpack-dev-server）</p><p>安装<br>    <code>yarn add -D webpack-dev-server</code> （可以将本地的html当成localhost:8080访问）</p><p>启动<br>    <code>yarn webpack serve --open</code></p><p>配置源码的映射<br>    <code>devtool: &quot;inline-source-map&quot;</code></p><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><p>Vite 也是前端的构建工具</p><p>相较于webpack，vite采用了不同的运行方式<br>    1.开发时，并不对代码打包，而是直接采用ESM的方式来运行项目<br>    2.在项目部署时，在对项目进行打包</p><p>除了速度外，vite使用起来也更加方便</p><p>基本使用:<br>    1.安装开发依赖 vite<br>    2.vite的源码目录就是项目根目录<br>    3.开发命令:<br>        vite 启动开发服务器<br>        vite build 打包代码<br>        vite preview 预览打包后的代码</p><p>使用命令构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@laster</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><p>配置文件: <code>vite-config.js</code></p><p>格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> legacy <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-legacy&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">legacy</span>(&#123;</span><br><span class="line">      <span class="attr">targets</span>: [<span class="string">&quot;defaults&quot;</span>,<span class="string">&quot;ie 11&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 打包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打包工具 </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue部分源码分析</title>
      <link href="/posts/ea5e4ee3.html"/>
      <url>/posts/ea5e4ee3.html</url>
      
        <content type="html"><![CDATA[<h1 id="VUE3-框架的三大模块"><a href="#VUE3-框架的三大模块" class="headerlink" title="VUE3 框架的三大模块"></a>VUE3 框架的三大模块</h1><ol><li>compiler 编译系统</li><li>runtime 渲染系统</li><li>reactive 响应系统</li></ol><h2 id="Reactive-的实现"><a href="#Reactive-的实现" class="headerlink" title="Reactive 的实现"></a><strong>Reactive 的实现</strong></h2><p>在 Vue2 中实现响应式是使用<code>Object.defineProperty</code>来实现数据劫持如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="number">18</span> <span class="comment">// 设置属性的值</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span> <span class="comment">// 如果为 true，属性的值可以被修改；如果为 false，属性的值是只读的。</span></span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span> <span class="comment">//如果为 true，属性可以通过对象的迭代方法（例如 for...in 循环）枚举；如果为 false，属性不可枚举。</span></span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span> <span class="comment">// 如果为 true，属性的特性可以被修改或者删除；如果为 false，属性的特性不可更改。</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人访问age属性了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    number = value</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性&#x27;</span>,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 Vue3 中使用 Proxy 来实现数据劫持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target,key，reactive</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人访问get属性了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,reactive)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target,key,value,reactive</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性&#x27;</span>,value)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,reactive)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Proxy 的优势</p><ol><li>Proxy 可以直接监听对象而非属性</li><li>Proxy 用于创建一个对象的代理，从而实现基本操作的拦截和自定义劫持整个对象，并返回一个新对象。</li><li>Object.defineProperty 无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实施响应。</li><li>Object.defineProperty 只能劫持对象的属性，因此我们需要对每个对象的每个属性进行遍历。Vue2.X 里，是通过递归 + 遍历 data 对象来实现对数据的监控的，如果属性值也是对象那么需要深度遍历，显然如果能劫持一个完整的对象才是更好的选择。</li></ol></blockquote><p><strong>Reflect</strong></p><ul><li>不是一个函数对象，因此它是不可构造的。直接使用静态方式即可。</li><li>反射</li><li>作用：可以通过编程的方式操作对象</li><li>用法和 Object 类似,但是 Object 具有局限性</li><li>比如增加删除属性需要写 try catch，而 Reflect 不需要 直接 if else 判断即可</li><li>比如在 object 的 key 只能是 String，而 Reflect 可以 value-value</li><li>Reflect 提供的是一整套反射能力 API，它们的调用方式，参数和返回值都是统一风格的，我们可以使用 Reflect 写出更优雅的反射代码。</li></ul><p>Reactive 的实现</p><ul><li>reactive.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一些工具函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;isObject,hasChanged,isArray&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="comment">// 引入track trigger 更新触发函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;track,trigger&#125; <span class="keyword">from</span> <span class="string">&#x27;./effect&#x27;</span></span><br><span class="line"><span class="comment">// 建立proxyMap映射表 用于存储代理对象(代理对象相同时直接引用就行)</span></span><br><span class="line"><span class="keyword">const</span> proxyMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 判断传入的target是否是对象</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.判断是否是reactive包reactive</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_">isReactive</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(proxyMap.<span class="title function_">has</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target,&#123;</span><br><span class="line">    <span class="comment">// receiver 代理对象本身</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,key,receiver</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">      <span class="comment">// 如果是(reactive(reacitve))的情况（重复代理情况）</span></span><br><span class="line">      <span class="keyword">if</span>(key===<span class="string">&#x27;__isReactive&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target,,key)</span><br><span class="line">      <span class="comment">// 递归遍历深层次对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">isObject</span>(res) ? <span class="title function_">reactive</span>(res) : res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,key,value,receiver</span>)&#123;</span><br><span class="line">      <span class="comment">// 处理数组</span></span><br><span class="line">      <span class="keyword">const</span> oldLength = target.<span class="property">length</span></span><br><span class="line">      <span class="keyword">const</span> oldVlaue = target[key]</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,receiver)</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_">hasChanged</span>(oldVlaue,value)) &#123;</span><br><span class="line">        <span class="comment">// 触发更新</span></span><br><span class="line">        <span class="title function_">trigger</span>(target,key)</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">isArray</span>(target)&amp;&amp;<span class="title function_">hasChanged</span>(oldLength,target.<span class="property">length</span>)) &#123;</span><br><span class="line">          <span class="title function_">trigger</span>(target,<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target,proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多次代理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isReactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// 强行转化成布尔值</span></span><br><span class="line">  <span class="keyword">return</span> !!(target &amp;&amp; target.<span class="property">__isReactive</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>effect.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * activeEffect 用于存储当前的effect函数</span></span><br><span class="line"><span class="comment"> * 作用：用于在track中存储依赖收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> activeEffect</span><br><span class="line"><span class="comment">// effectStack 用于存储effect函数的栈防止丢失effect函数</span></span><br><span class="line"><span class="keyword">const</span> effectStack = []</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn, options = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">effectFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      activeEffect = effectFn</span><br><span class="line">      <span class="comment">// 入栈</span></span><br><span class="line">      effectStack.<span class="title function_">push</span>(effectFn)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 出栈</span></span><br><span class="line">      effectStack.<span class="title function_">pop</span>()</span><br><span class="line">      <span class="comment">// 恢复activeEffect</span></span><br><span class="line">      activeEffect = effectStack[effectStack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// options.lazy 为true时不会立即执行effect函数（区别computed和watch和普通的响应）</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">lazy</span>) &#123;</span><br><span class="line">    <span class="title function_">effectFn</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">sheduler</span>) &#123;</span><br><span class="line">    effectFn.<span class="property">sheduler</span> = options.<span class="property">sheduler</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effectFn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依赖收集</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果没有activeEffect 说明不是在effect中执行的则不需要收集依赖直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!acctiveEffect) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//depsMap Map对象 用于存储目标对象与其属性之间的依赖关系。它的作用是将目标对象映射到一个包含属性依赖的 Map，以便在需要时快速找到对应属性的依赖集合。</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="comment">// 如果没有depsMap 说明是第一次收集依赖</span></span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="comment">// 初始化depsMap</span></span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dep是Set对象，它用于存储具体属性的依赖集合。每个属性都有一个对应的 dep 集合，其中存储了依赖于该属性的副作用函数（effects）。</span></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, (dep = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.<span class="title function_">add</span>(acctiveEffect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  dep.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effectFn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (effectFn.<span class="property">sheduler</span>) &#123;</span><br><span class="line">      effectFn.<span class="title function_">sheduler</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">effectFn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>utils.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="comment">// 类型是null 类型是object</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span> &amp;&amp; val !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">haschanged</span>(<span class="params">oldValue, newValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    oldValue !== newValue &amp;&amp; !(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(oldValue) &amp;&amp; <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(newValue))</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> target === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Ref 实现</strong></p><p>ref.js 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject, hasChanged &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; track, trigger &#125; <span class="keyword">from</span> <span class="string">&#x27;./effect&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(value)) <span class="keyword">return</span> value</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isRef</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="property">__isRef</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">convert</span>(value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">__isRef</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="title function_">track</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newValue, <span class="variable language_">this</span>.<span class="property">_value</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">convert</span>(newValue)</span><br><span class="line">      <span class="title function_">tigger</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>computed 实现</strong><br>computed.js 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; effect, track, trigger &#125; <span class="keyword">from</span> <span class="string">&#x27;./effect&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">getterOrOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> getter, setter</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isFunction</span>(getterOrOptions)) &#123;</span><br><span class="line">    getter = getterOrOptions</span><br><span class="line">    setter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;computed value must be readonly&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getter = getterOrOptions.<span class="property">get</span></span><br><span class="line">    setter = getterOrOptions.<span class="property">set</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComputedRefImpl</span>(getter, setter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputedRefImpl</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">getter, setter</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_setter</span> = setter</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span> = <span class="title function_">effect</span>(getter, &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 调度机制</span></span><br><span class="line">      <span class="attr">scheduler</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">          <span class="title function_">trigger</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="title function_">effect</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">track</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_setter</span>(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="runtime-渲染系统"><a href="#runtime-渲染系统" class="headerlink" title="runtime 渲染系统"></a><strong>runtime 渲染系统</strong></h2><p>首先介绍一下什么是虚拟 DOM</p><p>虚拟 DOM：</p><ul><li>用 JS 对象来描述 DOM 节点</li><li>种类有：Element、Text、Fragment、</li></ul><ol><li>Element:<br>对应普通元素，如 div、p、span 等,使用 doucment.createElement 创建,type 指定标签名，props 指定元素属性，children 指定子元素，可以为数组或者字符串，为字符串时代表只有一个文本子节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: string,</span><br><span class="line"><span class="attr">props</span>: <span class="title class_">Object</span>,</span><br><span class="line"><span class="attr">children</span>: string | <span class="title class_">VNode</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;app&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">children</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Text:<br>对应文本节点，使用 document.createTextNode 创建，text 指定文本内容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: symbol,</span><br><span class="line"><span class="attr">props</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">text</span>: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Fragment:<br>对应 Fragment，不会渲染的节点，相当于 templete 或 react 的 Fragment，type 为 symbol，props 为 null，children 为数组表示子节点，最后渲染时会将子节点的所有子节点挂载到 Fragment 父节点上</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: symbol,</span><br><span class="line"><span class="attr">props</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">children</span>: <span class="title class_">VNode</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Components:<br>Component 是组件，组件有自己特殊的一套渲染方法，但组件的最终产物，也是上面三种 VNode 的集合。组件的 type，就是组件定义的对象，props 即是外部传入组件的 props 数据，children 是组件的 slot</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line"><span class="attr">props</span>: <span class="title class_">Object</span>,</span><br><span class="line"><span class="attr">children</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">type</span>:&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&#123;&#123;msg&#125;&#125; &#123;&#123;name&#125;&#125;`</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShaperFlags</p><ul><li>一组标记，用于快速识别 VNode 的类型和他的子节点类型</li><li>使用位运算</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 例子</span><br><span class="line">// 与运算，只有两个都为1时才为1</span><br><span class="line">0 0 1 0 0 0 1 1</span><br><span class="line">0 0 1 0 1 1 1 1</span><br><span class="line">&amp;</span><br><span class="line">0 0 1 0 0 0 1 1</span><br><span class="line">// 或运算，只要有一个为1就为1</span><br><span class="line">0 0 1 0 0 0 1 1</span><br><span class="line">0 0 1 0 1 1 1 1</span><br><span class="line">|</span><br><span class="line">0 0 1 0 1 1 1 1</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ShapeFlags</span> = &#123;</span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="number">1</span>, <span class="comment">// 普通元素 00000001</span></span><br><span class="line">  <span class="attr">TEXT</span>: <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 文本节点 00000010</span></span><br><span class="line">  <span class="attr">FRAGMENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// Fragment 00000100</span></span><br><span class="line">  <span class="attr">COMPONENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 组件 00001000</span></span><br><span class="line">  <span class="attr">TEXT_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// 子节点是文本 00010000</span></span><br><span class="line">  <span class="attr">ARRAY_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">5</span>, <span class="comment">// 子节点是数组 00100000</span></span><br><span class="line">  <span class="attr">CHILDREN</span>: (<span class="number">1</span> &lt;&lt; <span class="number">4</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>) <span class="comment">// 子节点是文本或数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用二进制位运算<code>&lt;&lt;</code>和<code>|</code>,使用时用<code>&amp;</code>运算判断,如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span>) &#123;</span><br><span class="line">  <span class="comment">// 是普通元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">33</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ELMENT</span> <span class="comment">// 1 true</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span> <span class="comment">// 0 false</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span> <span class="comment">// 0 false</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span> <span class="comment">//    true</span></span><br><span class="line">flag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">CHILDREN</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>生成可以用<br><code>let flag = ShapeFlags.ELEMENT | ShapeFlags.ARRAY_CHILDREN</code></p><p>VNode 的初步形成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type, props, children, shapeFlag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>vnode.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isArray, isNumber, isString &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils&#x27;</span></span><br><span class="line"><span class="comment">// ShapeFlags: 二进制位运算</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ShapeFlags</span> = &#123;</span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">TEXT</span>: <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">  <span class="attr">FRAGMENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">  <span class="attr">COMPONENT</span>: <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  <span class="attr">TEXT_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">  <span class="attr">ARRAY_CHILDREN</span>: <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  <span class="attr">CHILDREN</span>: (<span class="number">1</span> &lt;&lt; <span class="number">4</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Text：类型Symbol</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Text</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Text&#x27;</span>)</span><br><span class="line"><span class="comment">// Fragment：类型SymbolS</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Fragment</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Fragment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vnode有四种类型：dom元素，纯文本，Fragment，组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string | Object | Text | Fragment</span>&#125; <span class="variable">type</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object | null</span>&#125; <span class="variable">props</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String | Array | null | number</span>&#125; <span class="variable">children</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">VNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">type, props, children</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> shapeFlag = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(type)) &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="title class_">Text</span>) &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="title class_">Fragment</span>) &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    shapeFlag = <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(children) || <span class="title function_">isNumber</span>(children)) &#123;</span><br><span class="line">    <span class="comment">// a|=b ==&gt;</span></span><br><span class="line">    shapeFlag |= <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span></span><br><span class="line">    children = children.<span class="title function_">toString</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(children)) &#123;</span><br><span class="line">    shapeFlag |= <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    props,</span><br><span class="line">    children,</span><br><span class="line">    shapeFlag</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>render.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ShapeFlags</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">export</span> funtion render (vnode,container) &#123;</span><br><span class="line">  <span class="title function_">mount</span>(vnode,container)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funtion mount (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; shapeFlag &#125; = vnode</span><br><span class="line">  <span class="comment">// 判断不同类型的vnode</span></span><br><span class="line">  <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountElement</span>(vnode,container)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountText</span>(vnode,container)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountFragment</span>(vnode,container)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span>)&#123;</span><br><span class="line">    <span class="title function_">mountComponent</span>(vnode,container)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountElement</span> (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type,props &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(type)</span><br><span class="line">  <span class="comment">// 挂载属性</span></span><br><span class="line">  <span class="title function_">mountProps</span>(props,el)</span><br><span class="line">  <span class="comment">// 挂载子节点</span></span><br><span class="line">  <span class="title function_">mountChildren</span>(vnode,el)</span><br><span class="line">  <span class="comment">// 挂载到容器</span></span><br><span class="line">  container.<span class="title function_">appendChild</span>(el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountText</span> (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> textNode = doucment.<span class="title function_">createTextNode</span>(vnode.<span class="property">children</span>)</span><br><span class="line">  container.<span class="title function_">appendChild</span>(textNode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountFragment</span> (vnode,container) &#123;</span><br><span class="line">  <span class="title function_">mountChildren</span>(vnode,container)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountComponent</span> (vnode,container) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区别 attributes 和 直接的dom api</span></span><br><span class="line"><span class="keyword">const</span> domPropsRE = <span class="regexp">/\[A-Z]|^(?:value|checked|selected|muted)$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountProps</span> (props,el) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = props[key]</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;class&#x27;</span>:</span><br><span class="line">        el.<span class="property">className</span> = value</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;style&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> styleName <span class="keyword">in</span> value)&#123;</span><br><span class="line">          el.<span class="property">style</span>[styleName] = value[styleName]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/^on[^a-z]/</span>.<span class="title function_">test</span>(key))&#123;</span><br><span class="line">          <span class="keyword">const</span> eventName = key.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>()</span><br><span class="line">          el.<span class="title function_">addEventListener</span>(eventName,value )</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(domPropsRE.<span class="title function_">test</span>(key))&#123;</span><br><span class="line">          <span class="comment">// &#123;&quot;checked&quot;:&#x27;&#x27;&#125;</span></span><br><span class="line">          <span class="keyword">if</span>(value === <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> el[key] === <span class="string">&#x27;boolean&#x27;</span>)&#123;</span><br><span class="line">            value = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          el[key] = value</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(value == <span class="literal">null</span> || value === <span class="literal">false</span>)&#123;</span><br><span class="line">            el.<span class="title function_">removeAttribute</span>(key)</span><br><span class="line">          &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            el.<span class="title function_">setAttribute</span>(key,value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountChildren</span> (vnode,container) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;shapeFlag,children&#125; = vnode</span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="title function_">mountText</span>(vnode,container)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历子节点 递归</span></span><br><span class="line">    children.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> <span class="title function_">mount</span>(child,container))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现广义的 diff 算法 <code>patch</code></strong></p><p>render.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ShapeFlags</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="comment">// 比较vnode的Props差异函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; patchProps &#125; <span class="keyword">from</span> <span class="string">&#x27;./patchProp&#x27;</span></span><br><span class="line"><span class="comment">// 渲染render函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line">  <span class="comment">// 初次渲染</span></span><br><span class="line">  <span class="comment">// 上一次的vnode存储</span></span><br><span class="line">  <span class="keyword">const</span> prevVNode = container.<span class="property">_vnode</span></span><br><span class="line">  <span class="comment">// first: 判断n2是否存在(即newVNode)</span></span><br><span class="line">  <span class="keyword">if</span> (!vnode) &#123;</span><br><span class="line">    <span class="comment">// 如果n1存在,则卸载</span></span><br><span class="line">    <span class="keyword">if</span> (prevNode) &#123;</span><br><span class="line">      <span class="comment">// 卸载</span></span><br><span class="line">      <span class="title function_">unmount</span>(prevVNode)</span><br><span class="line">      container.<span class="property">_vnode</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// n2存在 进行patch差异化比较</span></span><br><span class="line">    <span class="title function_">patch</span>(prevVNode, vnode, container)</span><br><span class="line">  &#125;</span><br><span class="line">  container.<span class="property">_vnode</span> = vnode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode | null</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n1 &amp;&amp; !<span class="title function_">isSameVNode</span>(n1, n2)) &#123;</span><br><span class="line">    <span class="comment">// n1存在 且 n1和n2不是同一个vnode</span></span><br><span class="line">    <span class="comment">// n1被卸载后，n2将会创建，因此anchor至关重要。需要将它设置为n1的下一个兄弟节点</span></span><br><span class="line">    anchor = (n1.<span class="property">anchor</span> || n1.<span class="property">el</span>).<span class="property">nextSibling</span></span><br><span class="line">    <span class="title function_">umount</span>(n1)</span><br><span class="line">    n1 = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; shapeFlag &#125; = n2</span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span>) &#123;</span><br><span class="line">    <span class="title function_">processComponent</span>(n1, n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT</span>) &#123;</span><br><span class="line">    <span class="title function_">processText</span>(n1, n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span>) &#123;</span><br><span class="line">    <span class="title function_">processFragment</span>(n1, n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">processElement</span>(n1, n2, container, anchor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode: vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 递归创建子节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountElement</span>(<span class="params">vnode, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, props, shapeFlag, children &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> el = doucment.<span class="title function_">createElement</span>(type)</span><br><span class="line">  <span class="comment">// 挂载属性</span></span><br><span class="line">  <span class="keyword">if</span> (props) &#123;</span><br><span class="line">    <span class="title function_">patchProps</span>(<span class="literal">null</span>, props, el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 挂载子节点</span></span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line">    el.<span class="property">textContent</span> = children <span class="comment">// 子结点是文本</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="title function_">mountChildren</span>(children, el) <span class="comment">// 子结点是数组 遍历子节点挂载</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountText</span>(<span class="params">vnode, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(vnode.<span class="property">children</span>)</span><br><span class="line">  vnode.<span class="property">el</span> = el</span><br><span class="line">  container.<span class="title function_">insertBefore</span>(el, anchor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array&lt;VNode&gt;</span>&#125; children:children DOM节点数组 分别挂载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 挂载子节点(数组类型)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mountChildren</span>(<span class="params">children, container, anchor</span>) &#123;</span><br><span class="line">  children.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">patch</span>(<span class="literal">null</span>, child, container, anchor)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 卸载vnode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; shapeFlag, el &#125; = vnode</span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span>) &#123;</span><br><span class="line">    <span class="title function_">unmountComponent</span>(vnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">FRAGMENT</span>) &#123;</span><br><span class="line">    <span class="title function_">unmountFragment</span>(vnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 卸载组件vnode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmountComponent</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; vnode:vnode DOM节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmountFragment</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">el</span>: cur, <span class="attr">anchor</span>: end &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> &#123; parentNode &#125; = cur</span><br><span class="line">  <span class="keyword">while</span> (cur !== end) &#123;</span><br><span class="line">    <span class="keyword">const</span> next = cur.<span class="property">nextSibling</span></span><br><span class="line">    parentNode.<span class="title function_">removeChild</span>(cur)</span><br><span class="line">    cur = next</span><br><span class="line">  &#125;</span><br><span class="line">  parentNode.<span class="title function_">removeChild</span>(end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array&lt;VNode&gt;</span>&#125; Children: children DOM节点数组 分别卸载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比vnode是否相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unmountChildren</span>(<span class="params">Children</span>) &#123;</span><br><span class="line">  <span class="title class_">Children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">unmount</span>(child)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比元素Element并进行更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processElement</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 直接挂载n2</span></span><br><span class="line">    <span class="title function_">mountElement</span>(n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">patchElement</span>(n1, n2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比Fragment并进行更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processFragment</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fragmentStartAnchor = (n2.<span class="property">el</span> = n1 ? n1.<span class="property">el</span> : <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> fragmentEndAnchor = (n2.<span class="property">anchor</span> = n1</span><br><span class="line">    ? n1.<span class="property">anchor</span></span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">  <span class="keyword">if</span> (n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">    container.<span class="title function_">insertBefore</span>(fragmentStartAnchor, anchor)</span><br><span class="line">    container.<span class="title function_">insertBefore</span>(fragmentEndAnchor, anchor)</span><br><span class="line">    <span class="title function_">mountChildren</span>(n2.<span class="property">children</span>, container, fragmentEndAnchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">patchChildren</span>(n1, n2, container, fragmentEndAnchor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 组件进行更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processComponent</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比文本并进行更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processText</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">mountText</span>(n2, container, anchor)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    n2.<span class="property">el</span> = n1.<span class="property">el</span></span><br><span class="line">    n2.<span class="property">el</span>.<span class="property">textContent</span> = n2.<span class="property">children</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比vnode是否相同(比较复用)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchElement</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  n2.<span class="property">el</span> = n1.<span class="property">el</span></span><br><span class="line">  <span class="title function_">patchProps</span>(n1.<span class="property">props</span>, n2.<span class="property">props</span>, n2.<span class="property">el</span>)</span><br><span class="line">  <span class="title function_">patchChildren</span>(n1, n2, n2.<span class="property">el</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apprehen</span> 对比vnode是否相同(比较复用)判断n1 n2 的子结点类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchChildren</span>(<span class="params">n1, n2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">shapeFlag</span>: prevShapeFlag, <span class="attr">children</span>: c1 &#125; = n1</span><br><span class="line">  <span class="keyword">const</span> &#123; shapeFlag, <span class="attr">children</span>: c2 &#125; = n2</span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="comment">// n2 是TEXT_CHILDREN 类型</span></span><br><span class="line">    <span class="keyword">if</span> (c2 !== c1) &#123;</span><br><span class="line">      container.<span class="property">textContent</span> = c2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">      <span class="title function_">unmountChildren</span>(c1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">    <span class="comment">// n2 是ARRAY_CHILDREN 类型</span></span><br><span class="line">    <span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line">      <span class="comment">// n1 是TEXT_CHILDREN 类型</span></span><br><span class="line">      container.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="title function_">mountChildren</span>(c2, container, anchor)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">      <span class="comment">// n1 是ARRAY_CHILDREN 类型</span></span><br><span class="line">      <span class="title function_">patchArrayChildren</span>(c1, c2, container, anchor)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// n1 是EMPTY_CHILDREN 类型 null</span></span><br><span class="line">      <span class="title function_">mountChildren</span>(c2, container, anchor)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// n2 是EMPTY_CHILDREN 类型 null</span></span><br><span class="line">    <span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TEXT_CHILDREN</span>) &#123;</span><br><span class="line">      <span class="comment">// n1 是TEXT_CHILDREN 类型</span></span><br><span class="line">      container.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevShapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">      <span class="comment">// n1 是ARRAY_CHILDREN 类型</span></span><br><span class="line">      <span class="title function_">unmountChildren</span>(c1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n1:旧的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">VNode</span>&#125; n2:新的vnode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element</span>&#125; container:容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Element | null</span>&#125; anchor:锚点 (插入位置)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchArrayChildren</span>(<span class="params">c1, c2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldLength = c1.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> newLength = c2.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> commonLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldLength, newLength)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">    <span class="title function_">patch</span>(c1[i], c2[i], container, anchor)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (oldLength &gt; newLength) &#123;</span><br><span class="line">    <span class="title function_">unmountChildren</span>(c1.<span class="title function_">slice</span>(commonLength))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">mountChildren</span>(c2.<span class="title function_">slice</span>(commonLength), container, anchor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSameVNode</span>(<span class="params">prevVNode, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> prevVNode.<span class="property">type</span> === vnode.<span class="property">type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vnode.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在return中新添加属性</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  types,</span><br><span class="line">  props,</span><br><span class="line">  children,</span><br><span class="line">  shapeFlag,</span><br><span class="line">  <span class="attr">el</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">anchor</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">key</span>: props &amp;&amp; (props.<span class="property">key</span> != <span class="literal">null</span> ? props.<span class="property">key</span> : <span class="literal">null</span>),</span><br><span class="line">  <span class="attr">component</span>: <span class="literal">null</span> <span class="comment">//专门用于存储组件的实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>vue3 中 diff 算法</strong><br>首先是重新完成 render.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ShapeFlags</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; patchProps &#125; <span class="keyword">from</span> <span class="string">&#x27;./patchProps&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mountComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./component&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prevVNode = container.<span class="property">_vnode</span></span><br><span class="line">  <span class="comment">// first：判断n2是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (!vnode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevVNode) &#123;</span><br><span class="line">      <span class="title function_">unmount</span>(prevVNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// n2存在</span></span><br><span class="line">    <span class="title function_">patch</span>(prevVNode, vnode, container)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存prevVNode</span></span><br><span class="line">  container.<span class="property">_vnode</span> = vnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line"><span class="comment">// 简单的diff比较</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchUnkeyedChildren</span>(<span class="params">c1, c2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldLength = c1.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> newLength = c2.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> commonLenght = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldLength, newLength)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; commonlength; i++) &#123;</span><br><span class="line">    <span class="title function_">patch</span>(c1[i], c2[i], container)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (oldLength &gt; newLength) &#123;</span><br><span class="line">    <span class="title function_">unmountChildren</span>(c1.<span class="title function_">slice</span>(commonLength))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">mountChildren</span>(c2.<span class="title function_">slice</span>(commonLength), container, anchor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// react中的diff算法原理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactPathchKeyedChildren</span>(<span class="params">c1, c2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  c1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">perv, j</span>) =&gt;</span> &#123;</span><br><span class="line">    map.<span class="title function_">set</span>(perv.<span class="property">key</span>, &#123; perv, j &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> maxNewIndexSoFar = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; c2.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> next = c2[i]</span><br><span class="line">    <span class="keyword">const</span> curAnchor = i - <span class="number">1</span> &lt; <span class="number">0</span> ? c1[<span class="number">0</span>].<span class="property">el</span> : c2[i - <span class="number">1</span>].<span class="property">el</span>.<span class="property">nextSibling</span></span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">has</span>(next.<span class="property">key</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; prev, j &#125; = map.<span class="title function_">get</span>(next.<span class="property">key</span>)</span><br><span class="line">      <span class="title function_">patch</span>(prev, next, container, anchor)</span><br><span class="line">      <span class="keyword">if</span> (j &lt; maxNewIndexSoFar) &#123;</span><br><span class="line">        container.<span class="title function_">insertBefore</span>(next.<span class="property">el</span>, curAnchor)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        maxNewIndexSoFar = j</span><br><span class="line">      &#125;</span><br><span class="line">      map.<span class="title function_">delete</span>(next.<span class="property">key</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">patch</span>(<span class="literal">null</span>, next, container, curAnchor)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; perv &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">unmount</span>(perv)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3中的diff算法 双端 + 最长子序列算法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchKeyedChildren</span>(<span class="params">c1, c2, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> e1 = c1.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> e2 = c2.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="comment">// 1.从左向右依次对比</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2 &amp;&amp; c1[i].<span class="property">key</span> === c2[i].<span class="property">key</span>) &#123;</span><br><span class="line">    <span class="title function_">patch</span>(c1[i], c2[i], container, anchor)</span><br><span class="line">    i++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.从右向左一次对比</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2 &amp;&amp; c1[e1].<span class="property">key</span> === c2[e2].<span class="property">key</span>) &#123;</span><br><span class="line">    <span class="title function_">patch</span>(c1[e1], c2[e1], container, anchor)</span><br><span class="line">    e1--</span><br><span class="line">    e2--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; e1) &#123;</span><br><span class="line">    <span class="comment">// 3. 经过1,2 直接将旧结点比对完，则剩下的新结点直接mount</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt;= e2; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextPos = e2 + <span class="number">1</span></span><br><span class="line">      <span class="keyword">const</span> curAnchor = (c2[nextPos] &amp;&amp; c2[nextPos].<span class="property">el</span>) || anchor</span><br><span class="line">      <span class="title function_">path</span>(<span class="literal">null</span>, c2[j], container, curAnchor)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; e2) &#123;</span><br><span class="line">    <span class="comment">// 3. 经过1,2 直接将新结点比对完，则剩下的旧结点直接unmount</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= e1; j++) &#123;</span><br><span class="line">      <span class="title function_">unmount</span>(c1[j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 4. 若不满足3 采用传统的diff算法 但是不真的移动和添加，只做标记和删除</span></span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    c1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">perv, j</span>) =&gt;</span> &#123;</span><br><span class="line">      map.<span class="title function_">set</span>(perv.<span class="property">key</span>, &#123; perv, j &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> maxNewIndexSoFar = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> move = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> source = <span class="keyword">new</span> <span class="title class_">Array</span>(e2 - i + <span class="number">1</span>).<span class="title function_">fill</span>(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> toMounted = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; c2.<span class="property">length</span>; k++) &#123;</span><br><span class="line">      <span class="keyword">const</span> next = c2[k]</span><br><span class="line">      <span class="keyword">if</span> (map.<span class="title function_">has</span>(next.<span class="property">key</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; prev, j &#125; = map.<span class="title function_">get</span>(next.<span class="property">key</span>)</span><br><span class="line">        <span class="title function_">patch</span>(prev, next, container, anchor)</span><br><span class="line">        <span class="keyword">if</span> (j &lt; maxNewIndexSoFar) &#123;</span><br><span class="line">          move = <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          maxNewIndexSoFar = j</span><br><span class="line">        &#125;</span><br><span class="line">        source[k] = j</span><br><span class="line">        map.<span class="title function_">delete</span>(next.<span class="property">key</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        toMounted.<span class="title function_">push</span>(k + i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; perv &#125;</span>) =&gt;</span> <span class="title function_">unmount</span>(perv))</span><br><span class="line">    <span class="keyword">if</span> (move) &#123;</span><br><span class="line">      <span class="comment">// 5.需要移动，则采用新的最长上升子序列算法</span></span><br><span class="line">      <span class="keyword">const</span> seq = <span class="title function_">getSequence</span>(source)</span><br><span class="line">      <span class="keyword">let</span> j = seq.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k = source.<span class="property">length</span> - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k === seq[j]) &#123;</span><br><span class="line">          <span class="comment">// 不用移动</span></span><br><span class="line">          j--</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> pos = k + i</span><br><span class="line">          <span class="keyword">const</span> nextPos = pos + <span class="number">1</span></span><br><span class="line">          <span class="keyword">const</span> curAnchor = (c2[nextPos] &amp;&amp; c2[nextPos].<span class="property">el</span>) || anchor</span><br><span class="line">          <span class="keyword">if</span> (source[k] === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// mount</span></span><br><span class="line">            <span class="title function_">patch</span>(<span class="literal">null</span>, c2[pos], container, curAnchor)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 移动</span></span><br><span class="line">            container.<span class="title function_">insertBefore</span>(c2[pos].<span class="property">el</span>, curAnchor)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (toMounted.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="comment">// 6.不需要移动，但还有未添加的元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k = toMounted.<span class="property">length</span> - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">const</span> pos = toMounted[k]</span><br><span class="line">        <span class="keyword">const</span> nextPos = pos + <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> curAnchor = (c2[nextPos] &amp;&amp; c2[nextPos].<span class="property">el</span>) || anchor</span><br><span class="line">        <span class="title function_">patch</span>(<span class="literal">null</span>, c2[pos], container, curAnchor)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最长子序列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSequence</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">const</span> position = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] === -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// result[result.length - 1]可能为undefined，此时nums[i] &gt; undefined为false</span></span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; result[result.<span class="property">length</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(nums[i])</span><br><span class="line">      position.<span class="title function_">push</span>(result.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> l = <span class="number">0</span>,</span><br><span class="line">        r = result.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = ~~((l + r) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; result[mid]) &#123;</span><br><span class="line">          l = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; result[mid]) &#123;</span><br><span class="line">          r = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          l = mid</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      result[l] = nums[i]</span><br><span class="line">      position.<span class="title function_">push</span>(l)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cur = result.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="comment">// 这里复用了result，它本身已经没用了</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = position.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; cur &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position[i] === cur) &#123;</span><br><span class="line">      result[cur--] = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组件的实现方法</strong></p><blockquote><p>从开发者的视角：组件分为状态组件和函数组件<br>vue3 中的状态组件和函数组件类似，下面只讨论状态组件的实现</p></blockquote><p>React 的组件示例(class 组件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3 的组件示例(optional) (渲染函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">cxt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, [</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;&#125;, ctx.<span class="property">count</span>),</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">onClick</span>: ctx.<span class="property">add</span> &#125;, <span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      ])</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Vue3 的组件示例(composition) (渲染函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      count.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      add</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">cxt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, [</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;&#125;, ctx.<span class="property">count</span>),</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">onClick</span>: ctx.<span class="property">add</span> &#125;, <span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      ])</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以看出 从实现的角度上来说，组件都有以下几个共同点:</p><ul><li>都有 <code>instance</code> (实例) 以承载内部的状态，方法等</li><li>都有一个 <code>render</code> 函数</li><li>都通过 <code>render</code> 函数产出<code>VNode</code></li><li>都有一套更新的策略，以重新执行 <code>render</code> 函数</li><li>在此基础上附加各种能力，如生命周期，通信机制，slot，provide，inject 等</li></ul><p><strong>component.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;../reactive/reactive&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; effect &#125; <span class="keyword">from</span> <span class="string">&#x27;../reactive/effect&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; patch &#125; <span class="keyword">from</span> <span class="string">&#x27;./render&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; normalizeVNode &#125; <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; queueJob &#125; <span class="keyword">from</span> <span class="string">&#x27;./scheduler&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateProps</span>(<span class="params">instance, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">type</span>: <span class="title class_">Component</span>, <span class="attr">props</span>: vnodeProps &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> props = (instance.<span class="property">props</span> = &#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> attrs = (instance.<span class="property">attrs</span> = &#123;&#125;)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vnodeProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Component</span>.<span class="property">props</span>?.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">      props[key] = vnodeProps[key]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      attrs[key] = vnodeProps[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// toThink: props源码是shallowReactive，确实需要吗?</span></span><br><span class="line">  <span class="comment">// 需要。否则子组件修改props不会触发更新</span></span><br><span class="line">  instance.<span class="property">props</span> = <span class="title function_">reactive</span>(instance.<span class="property">props</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mountComponent</span>(<span class="params">vnode, container, anchor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">type</span>: <span class="title class_">Component</span> &#125; = vnode</span><br><span class="line">  <span class="keyword">const</span> instance = (vnode.<span class="property">component</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">attrs</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">setupState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">subTree</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">ctx</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">update</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">isMounted</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">next</span>: <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// setupComponent</span></span><br><span class="line">  <span class="title function_">updateProps</span>(instance, vnode)</span><br><span class="line">  <span class="comment">// 源码：instance.setupState = proxyRefs(setupResult)</span></span><br><span class="line">  instance.<span class="property">setupState</span> = <span class="title class_">Component</span>.<span class="property">setup</span>?.(instance.<span class="property">props</span>, &#123;</span><br><span class="line">    <span class="attr">attrs</span>: instance.<span class="property">attrs</span>,</span><br><span class="line">    <span class="attr">slot</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">emit</span>: <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">  instance.<span class="property">ctx</span> = &#123;</span><br><span class="line">    ...instance.<span class="property">props</span>,</span><br><span class="line">    ...instance.<span class="property">setupState</span></span><br><span class="line">  &#125;</span><br><span class="line">  instance.<span class="property">update</span> = <span class="title function_">effect</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance.<span class="property">isMounted</span>) &#123;</span><br><span class="line">        <span class="comment">// mount</span></span><br><span class="line">        <span class="keyword">const</span> subTree = (instance.<span class="property">subTree</span> = <span class="title function_">normalizeVNode</span>(</span><br><span class="line">          <span class="title class_">Component</span>.<span class="title function_">render</span>(instance.<span class="property">ctx</span>)</span><br><span class="line">        ))</span><br><span class="line">        <span class="title function_">fullThrough</span>(instance, subTree)</span><br><span class="line">        <span class="title function_">patch</span>(<span class="literal">null</span>, subTree, container, anchor)</span><br><span class="line">        instance.<span class="property">isMounted</span> = <span class="literal">true</span></span><br><span class="line">        vnode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance.<span class="property">next</span>) &#123;</span><br><span class="line">          <span class="comment">// 被动更新</span></span><br><span class="line">          vnode = instance.<span class="property">next</span></span><br><span class="line">          instance.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">          <span class="title function_">updateProps</span>(instance, vnode)</span><br><span class="line">          instance.<span class="property">ctx</span> = &#123;</span><br><span class="line">            ...instance.<span class="property">props</span>,</span><br><span class="line">            ...instance.<span class="property">setupState</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> prev = instance.<span class="property">subTree</span></span><br><span class="line">        <span class="keyword">const</span> subTree = (instance.<span class="property">subTree</span> = <span class="title function_">normalizeVNode</span>(</span><br><span class="line">          <span class="title class_">Component</span>.<span class="title function_">render</span>(instance.<span class="property">ctx</span>)</span><br><span class="line">        ))</span><br><span class="line">        <span class="title function_">fullThrough</span>(instance, subTree)</span><br><span class="line">        <span class="title function_">patch</span>(prev, subTree, container, anchor)</span><br><span class="line">        vnode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">scheduler</span>: queueJob &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fullThrough</span>(<span class="params">instance, subTree</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(instance.<span class="property">attrs</span>).<span class="property">length</span>) &#123;</span><br><span class="line">    subTree.<span class="property">props</span> = &#123;</span><br><span class="line">      ...subTree.<span class="property">props</span>,</span><br><span class="line">      ...instance.<span class="property">attrs</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>scheduler.js</strong> (调度机制) nextTick 原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = []</span><br><span class="line"><span class="keyword">let</span> isFlushing = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> resolvedPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"><span class="keyword">let</span> currentFlushPromise = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">    ? (currentFlushPromise || resolvedPromise).<span class="title function_">then</span>(fn)</span><br><span class="line">    : currentFlushPromise || resolvedPromise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queueJob</span>(<span class="params">job</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果队列中没有这个job，或者队列为空，就把job推入队列</span></span><br><span class="line">  <span class="keyword">if</span> (!queue.<span class="title function_">includes</span>(job) || !queue.<span class="property">length</span>) &#123;</span><br><span class="line">    queue.<span class="title function_">push</span>(job)</span><br><span class="line">    <span class="title function_">queueFlush</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queueFlush</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isFlushing) &#123;</span><br><span class="line">    isFlushing = <span class="literal">true</span></span><br><span class="line">    currentFlushPromise = resolvedPromise.<span class="title function_">then</span>(flushJobs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushJobs</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      queue[i]()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    isFlushing = <span class="literal">false</span></span><br><span class="line">    queue.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">    currentFlushPromise = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a><strong>编译步骤</strong></h2><p><strong>模板代码</strong> –&gt; <code>parse</code> –&gt; <strong>AST</strong> –&gt; <code>transform</code> –&gt; <strong>AST+codegenNode</strong> –&gt; <code>codegen</code> –&gt; <strong>渲染函数代码</strong></p><p>parse: 原始的模板代码就是一段字符串，通过解析<code>parse</code> 转换为原始<code>AST</code>抽象语法树<br>transform: 对<code>AST</code>进行转换，转换为<code>codegenNode</code>, <code>codegenNode</code> 是<code>AST</code>到生成渲染函数代码的中间步骤，它由解析原始<code>AST</code>的语义而得来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ok&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>没有什么区别，都是一个元素，带有一个不同的属性而已。然而<code>v-if</code>是带有特殊语义的，不能像一般的纯元素节点一样采用同样的代码生成方式。<code>transform</code>的作用就在于此，一方面解析原始<code>AST</code>的语义，另一方面要为生成代码做准备. transfrom 是整个 vue compiler 模块中最复杂的部分</p><p>codegen: 即是 <code>code generate</code> 遍历 codegenNode 递归地生成最终的渲染函数的代码</p><p><strong>parse 实现</strong></p><p>认识 AST</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AST Node 的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NodeTypes</span> = &#123;</span><br><span class="line">  <span class="attr">ROOT</span>: <span class="string">&#x27;ROOT&#x27;</span>, <span class="comment">// 根节点</span></span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="string">&#x27;ELEMENT&#x27;</span>, <span class="comment">// 元素节点</span></span><br><span class="line">  <span class="attr">TEXT</span>: <span class="string">&#x27;TEXT&#x27;</span>, <span class="comment">// 文本节点</span></span><br><span class="line">  <span class="attr">SIMPLE_EXPRESSION</span>: <span class="string">&#x27;SIMPLE_EXPRESSION&#x27;</span>, <span class="comment">// 简单表达式</span></span><br><span class="line">  <span class="attr">INTERPOLATION</span>: <span class="string">&#x27;INTERPOLATION&#x27;</span>, <span class="comment">// 插值表达式</span></span><br><span class="line">  <span class="attr">ATTRIBUTE</span>: <span class="string">&#x27;ATTRIBUTE&#x27;</span>, <span class="comment">// 属性节点</span></span><br><span class="line">  <span class="attr">DIRECTIVE</span>: <span class="string">&#x27;DIRECTIVE&#x27;</span> <span class="comment">// 指令节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ElementTypes</span> = &#123;</span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="string">&#x27;ELEMENT&#x27;</span>, <span class="comment">// 普通元素</span></span><br><span class="line">  <span class="attr">COMPONENT</span>: <span class="string">&#x27;COMPONENT&#x27;</span> <span class="comment">// 组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ROOT</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">TemplateChildNode</span>[], <span class="comment">// 子节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>纯文本节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">TEXT</span>,</span><br><span class="line"><span class="attr">content</span>: string</span><br></pre></td></tr></table></figure><ol start="3"><li>表达式节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>,</span><br><span class="line">  <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">  <span class="comment">// 静态即content就是一段字符串,动态的content指的是一个变量，或一段js表达式</span></span><br><span class="line">  <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>插值节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">INTERPOLATION</span>,</span><br><span class="line">  <span class="attr">content</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>,</span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">    <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>元素节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ELEMENT</span>,</span><br><span class="line">  <span class="attr">tag</span>: string, <span class="comment">// 标签名</span></span><br><span class="line">  <span class="attr">tagType</span>: <span class="title class_">ElementTypes</span>, <span class="comment">// 元素类型(组件还是原生元素)</span></span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">Array</span>&lt;<span class="title class_">AttributeNode</span> | <span class="title class_">DirectiveNode</span>&gt;, <span class="comment">// 属性</span></span><br><span class="line">  <span class="attr">directives</span>: <span class="title class_">DirectiveNode</span>[], <span class="comment">// 指令数组</span></span><br><span class="line">  <span class="attr">isSelfClosing</span>: boolean, <span class="comment">// 是否自闭合</span></span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">TemplateChildNode</span>[], <span class="comment">// 子节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>属性节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ATTRIBUTE</span>,</span><br><span class="line">  <span class="attr">name</span>: string, <span class="comment">// 属性名</span></span><br><span class="line">  <span class="attr">value</span>: <span class="literal">undefined</span> | &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">TEXT</span> | , <span class="comment">// 属性值类型</span></span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 属性值</span></span><br><span class="line">  &#125; <span class="comment">// 纯文本节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>指令节点</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">DIRECTIVE</span>,</span><br><span class="line">  <span class="attr">name</span>: string, <span class="comment">// 指令名</span></span><br><span class="line">  <span class="attr">exp</span>: <span class="literal">undefined</span> | &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>, <span class="comment">// 表达式类型</span></span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">    <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">  &#125;, <span class="comment">// 表达式节点</span></span><br><span class="line">  <span class="attr">arg</span>: <span class="literal">undefined</span> | &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">SIMPLE_EXPRESSION</span>, <span class="comment">// 表达式类型</span></span><br><span class="line">    <span class="attr">content</span>: string, <span class="comment">// 表达式内容</span></span><br><span class="line">    <span class="attr">isStatic</span>: boolean, <span class="comment">// 是否是静态的</span></span><br><span class="line">  &#125;, <span class="comment">// 表达式节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;myClass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name:bind arg:class exp:myClass --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name:on arg:click exp:handleClick --&gt;</span></span><br></pre></td></tr></table></figure><p>最终展示结果<br><code>&lt;div id=&quot;foo&quot; v-if=&quot;ok&quot;&gt;hello &#123;&#123;name&#125;&#125;&lt;/div&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ROOT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">      <span class="attr">tagType</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="attr">props</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;ATTRIBUTE&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;TEXT&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">directives</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;DIRECTIVE&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;if&quot;</span>,</span><br><span class="line">          <span class="attr">exp</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;SIMPLE_EXPRESSION&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">            <span class="attr">isStatic</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">isSelfClosing</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;TEXT&quot;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;hello &quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;INTERPOLATION&quot;</span>,</span><br><span class="line">          <span class="attr">content</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;SIMPLE_EXPRESSION&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="attr">isStatic</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ast.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NodeTypes</span> = &#123;</span><br><span class="line">  <span class="attr">ROOT</span>: <span class="string">&#x27;ROOT&#x27;</span>, <span class="comment">// 根节点</span></span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="string">&#x27;ELEMENT&#x27;</span>, <span class="comment">// 元素节点</span></span><br><span class="line">  <span class="attr">TEXT</span>: <span class="string">&#x27;TEXT&#x27;</span>, <span class="comment">// 文本节点</span></span><br><span class="line">  <span class="attr">SIMPLE_EXPRESSION</span>: <span class="string">&#x27;SIMPLE_EXPRESSION&#x27;</span>, <span class="comment">// 简单表达式</span></span><br><span class="line">  <span class="attr">INTERPOLATION</span>: <span class="string">&#x27;INTERPOLATION&#x27;</span>, <span class="comment">// 插值表达式</span></span><br><span class="line">  <span class="attr">ATTRIBUTE</span>: <span class="string">&#x27;ATTRIBUTE&#x27;</span>, <span class="comment">// 属性节点</span></span><br><span class="line">  <span class="attr">DIRECTIVE</span>: <span class="string">&#x27;DIRECTIVE&#x27;</span> <span class="comment">// 指令节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ElementTypes</span> = &#123;</span><br><span class="line">  <span class="attr">ELEMENT</span>: <span class="string">&#x27;ELEMENT&#x27;</span>, <span class="comment">// 普通元素</span></span><br><span class="line">  <span class="attr">COMPONENT</span>: <span class="string">&#x27;COMPONENT&#x27;</span> <span class="comment">// 组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRoot</span>(<span class="params">children</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">NodeTypes</span>.<span class="property">ROOT</span>,</span><br><span class="line">    <span class="attr">children</span>: children</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>parse.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NodeTypes</span>, <span class="title class_">ElementTypes</span>, createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;./ast&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">content</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="title function_">createParserContext</span>(content)</span><br><span class="line">  <span class="keyword">const</span> children = <span class="title function_">parseChildren</span>(context)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRoot</span>(children)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createParserContext</span>(<span class="params">content</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">delimiters</span>: [<span class="string">&#x27;&#123;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#125;&#x27;</span>] <span class="comment">// 插值表达式的分隔符</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">source</span>: content</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseChildren</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> s = context.<span class="property">source</span></span><br><span class="line">  <span class="keyword">if</span> (s.<span class="title function_">startsWith</span>(context.<span class="property">options</span>.<span class="property">delimiters</span>[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="comment">// parseInterpolation</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] === <span class="string">&#x27;&lt;&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// parseElement</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// parseText</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">advanceBy</span>(<span class="params">context, numberOfCharacters</span>) &#123;</span><br><span class="line">  context.<span class="property">source</span> = context.<span class="property">source</span>.<span class="title function_">slice</span>(numberOfCharacters)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">advanceSpaces</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> match = <span class="regexp">/^[\t\r\n\f ]+/</span>.<span class="title function_">exec</span>(context.<span class="property">source</span>)</span><br><span class="line">  <span class="keyword">if</span> (match) &#123;</span><br><span class="line">    <span class="title function_">advanceBy</span>(context, match[<span class="number">0</span>].<span class="property">length</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git、PM2、Linux指令使用合集</title>
      <link href="/posts/86f0144.html"/>
      <url>/posts/86f0144.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-指令"><a href="#Git-指令" class="headerlink" title="Git 指令"></a>Git 指令</h1><h2 id="git-使用基本指令"><a href="#git-使用基本指令" class="headerlink" title="git 使用基本指令"></a>git 使用基本指令</h2><ul><li><p><code>git init</code>：初始化项目文件夹,为改项目的根目录下面添加.git 文件</p></li><li><p><code>git add .</code> : 将改项目的所有文件添加到暂存区里面(<strong>可以方便 merge 和 commit</strong>)</p></li><li><p><code>git commit -m &#39;&lt;commitMessage&gt;&#39;</code> : <strong>commitMessage</strong> 是你提交要说明的消息,提交的备注</p></li><li><p><code>git remote add &lt;remoteName&gt; &lt;远程地址&gt;</code> : <strong>remoteName：为远程仓库取的名称 通常是 origin</strong> 本地的 git 文件关联到远程的 Github 仓库</p></li><li><p><code>git pull</code> : 拉取远程分支的信息，并可以与本地合并信息</p></li><li><p><code>git push -f </code>: 提交到远程仓库,-f 是强制推送</p></li><li><p><code>git clone</code>：克隆项目到本地</p></li></ul><blockquote><p>注意：当我们使用 <code>git clone</code>若是克隆了很大的库，我们的互联网很慢，很常见的问题就是连接关闭整个克隆取消如同下面的报错</p><p>Cloning into ‘large-repository’…<br>remote: Counting objects: 20248, done.<br>remote: Compressing objects: 100% (10204&#x2F;10204), done.<br>error: RPC failed; curl 18 transfer closed with outstanding read data remaining<br>fatal: The remote end hung up unexpectedly<br>fatal: early EOF<br>fatal: index-pack failed</p></blockquote><p>要想解决这个问题我们可以先 clone 小一点的版本之后在<code>git fetch</code> 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://github.com/large-repository --depth 1</span><br><span class="line">git fetch --unshallow</span><br></pre></td></tr></table></figure><h2 id="git-的远程分支和本地分支"><a href="#git-的远程分支和本地分支" class="headerlink" title="git 的远程分支和本地分支"></a>git 的远程分支和本地分支</h2><p>git 管理的创库最大的好处就是多人可以协同开发，这里我们可以分成远程分支(<strong>remote</strong>)和本地分支(<strong>local</strong>)<br><code>git branch -a</code> 可以观察出项目存在的那些分支,一般红色字体表示的是远程分支</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/git_1.png" alt="不同的分支。"/></div><span class="image-caption">不同的分支。</span></div><blockquote><p>本地分支: 本地存在的不同分支版本<br>远程分支: 项目中存在的不同的版本</p></blockquote><p>创建本地分支：<code>git checkout -b explosion:</code> 创建叫<strong>explosion</strong>分支<br>删除本地分支：<code>git branch -d explosion:</code> 删除<strong>explosion</strong>分支<br>创建远程分支：<code>git push &lt;remoteName&gt; &lt;localBranch&gt;:&lt;remoteBranch&gt;</code> 提交本地分支到想要的远程分支<br>删除远程分支：<code>git push &lt;remoteName&gt; –-delete explosion：</code>删除 explosion</p><p>如何查看分支</p><ul><li><code>git branch</code> : 查看本地分支</li><li><code>git branch -r</code> : 查看远程分支</li><li><code>git branch -a</code> : 查看所有分支</li><li><code>git branch -vv：</code>查看本地分支和远程分支的关联</li></ul><p>将本地分支与远程分支关联起来：<code>git branch --set-upstream-to &lt;remoteName&gt; explosion</code> 将本地分支关联到远程分支</p><p><strong>推送分支</strong></p><p><code>git push &lt;remoteName&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</code>推送指定分支到指定远程分支<br><code>git push &lt;remoteName&gt; &lt;localBranch&gt;</code> 将指定分支推送到同名远程分支<br><code>git push -u &lt;remoteName&gt; &lt;localBranch&gt;</code> 创建与本地同名远程分支</p><p><strong>拉取分支</strong></p><p><code>git pull &lt;remoteName&gt; &lt;remoteBranch&gt;:&lt;localBranch&gt;</code> 拉取远程分支到指定本地分支操作</p><h2 id="git-的解决冲突-merge"><a href="#git-的解决冲突-merge" class="headerlink" title="git 的解决冲突 merge"></a>git 的解决冲突 merge</h2><p>当我们完成自己写的代码的时候需要提交到主分支上面，有时候就不得不去 merge，merge 是一个技术活，很容易一不小心就把别人写的代码覆盖掉</p><blockquote><p>第一种情况就是你正在主分支上面写东西要提交到主分支上面但是你写之前不知道你的版本是否跟库里面的版本相同，你可以手动 merge</p></blockquote><p><code>git add .</code><br><code>git commit -m &#39;xxx&#39;</code><br><code>git pull</code><br>输入三个指令之后会在本地生成待合并的文件，可以手动解决完冲突，重新 push 即可</p><blockquote><p>第二种情况就是你提交在你自己写的分支上面然后需要合并到主分支上面下面假设我自己的分支名词叫 <code>yueyun</code> 主分支名词叫<code>master</code><br>注意是<code>master</code>需要合并<code>yueyun</code></p></blockquote><p><code>git checkout master</code> （切换到主分支 master 上面）<br><code>git merge yueyun</code> (将现在的 master 分支合并 yueyun)<br><code>git push origin master</code> (把本地的分支 master 同步到远程)<br><strong>注意：此时的 yueyun 和 master 都是本地分支存在的不能直接用远程分支来操控,将本地分支合并完成后在提交到远程分支覆盖既可</strong></p><h2 id="git-的指令回退版本"><a href="#git-的指令回退版本" class="headerlink" title="git 的指令回退版本"></a>git 的指令回退版本</h2><p><code>git log</code> : 控制台输入 git log 可以看到之前的版本信息</p><p><code>git reset -- hard HEAD^</code> : 回退到上个版本<br><code>git reset -- hard HEAD~3</code> : 回退到前 3 次提交之前,以此类推<br><code>git reset -- hard commit-id</code> : 回退&#x2F;进到 指定的 commit 的 id 码<br><code>commit-id</code> : 不同的仓库管理会生成不同的 commit-id</p><h2 id="git-的一些好用的操作"><a href="#git-的一些好用的操作" class="headerlink" title="git 的一些好用的操作"></a>git 的一些好用的操作</h2><p>1.如果发现有人更改过仓库但是没有 merge 而本地的是自己辛辛苦苦写好的那么我们可以直接<br><strong><code>git push -f</code></strong></p><h1 id="PM2-指令"><a href="#PM2-指令" class="headerlink" title="PM2 指令"></a>PM2 指令</h1><p><strong>PM2 是 node 进程管理工具，可以利用其简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等</strong></p><ul><li><p>首先是安装<code>PM2</code> (确保你的电脑中有 node 环境)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br><span class="line"># or</span><br><span class="line">yarn <span class="variable language_">global</span> add pm2</span><br></pre></td></tr></table></figure></li><li><p>pm2 启动应用<br><code>pm2 start app.js</code> 即启动，守护和监视应用程序的简单方法</p></li><li><p>pm2 启动其他的应用程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pm2 start clash.sh</span><br><span class="line">pm2 start python-app.py --watch</span><br><span class="line">pm2 start binary-file -- --port 1520</span><br><span class="line">pm2 start yarn -n <span class="string">&quot;explosion&quot;</span> -- start</span><br><span class="line">pm2 start ./gocq</span><br><span class="line"><span class="comment"># 等等等</span></span><br></pre></td></tr></table></figure></li><li><p>常用命令的参数说明:</p><ul><li><code>--watch</code>: 监听应用目录的变化，一旦发生变化，自动重启。如要准确监听深文件，可以自定义配置文件</li><li><code>-i --instances</code>: 启用多少个实例，可以用于负载均衡，如果是<code>-i 0</code>或者<code>-i max</code>,则根据当前机器的核数确定实例数目</li><li><code>--ignore-watch</code>:排除监听的目录&#x2F;文件，可以是特定的文件名，也可以是正则。比如 <code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;</code></li><li><code>-n --name</code>：应用的名称。查看应用信息的时候可以用到。</li><li><code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li><li><code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li><li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的 coffee script 来编写应用。</li></ul></li><li><p>管理应用程序状态很简单，下面是一些常用的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 restart app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 reload app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 stop app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 delete app_name|app_id</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有任务</span></span><br><span class="line">pm2 stop all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看进程状态</span></span><br><span class="line">pm2 ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个进程信息</span></span><br><span class="line">pm2 describe 0</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><ul><li><p>配置文件里的设置项，跟命令参数基本是一一对应好的</p></li><li><p>可以选择<code>yaml</code> 和 <code>json</code> 文件</p></li><li><p><code>json</code>格式的配置文件，pm2 当作普通的 js 文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。</p></li><li><p>如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如–env）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fis-receiver&quot;</span><span class="punctuation">,</span> <span class="comment">// 应用名称</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./bin/www&quot;</span><span class="punctuation">,</span> <span class="comment">// 实际启动脚本</span></span><br><span class="line">  <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 当前工作路径</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// 监控变化的目录，一旦变化，自动重启</span></span><br><span class="line">    <span class="string">&quot;bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;routers&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignore_watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// 从监控目录中排除</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watch_options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;followSymlinks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./logs/app-err.log&quot;</span><span class="punctuation">,</span> <span class="comment">// 错误日志路径</span></span><br><span class="line">  <span class="attr">&quot;out_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./logs/app-out.log&quot;</span><span class="punctuation">,</span> <span class="comment">// 普通日志路径</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;NODE_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production&quot;</span> <span class="comment">// 环境参数，当前指定为生产环境</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Linux-指令"><a href="#Linux-指令" class="headerlink" title="Linux 指令"></a>Linux 指令</h1><p>使用的是 Ubuntu22.04 系统<br>在根目录上<code>/</code>会存在很多系统的文件 下面是一些常用的目录</p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><ul><li><code>/usr/bin</code>：系统命令目录 可执行文件路径 在终端输入命令时，系统会自动到这个目录下寻找命令</li><li><code>/usr/lib</code>：包含系统库的目录 比如 python 下的<code>/usr/lib/python310</code> 这个目录下面就是 包含了 Python 3 的标准库以及一些其他的库模块。Python 标准库包含了许多内置模块和功能，这些模块可以被 Python 程序使用。</li><li><code>/etc/python3</code>：包含了 Python 3 的配置文件 可以影响解释器的行为</li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul><li>APT</li></ul>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
            <tag> PM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript语言学习</title>
      <link href="/posts/b79900c3.html"/>
      <url>/posts/b79900c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="JAVASCRIPT-简介"><a href="#JAVASCRIPT-简介" class="headerlink" title="JAVASCRIPT 简介"></a>JAVASCRIPT 简介</h1><p>javascript 最初被创建的原因是作在浏览器环境中使得浏览器的交互效果更加生动</p><p>javascript 这种编程语言写出来的程序称之为<mark class="hl-label blue">脚本</mark> ，即是可以被直接写在网页的 HTML 中，在页面加载的时候自动执行。脚本被以纯文本的形式提供和执行。它们不需要特殊的准备或编译即可运行</p><p>发展到如今 JavaScript 不仅能在浏览器中执行，也可以在服务端执行，甚至可以在任意存在 Javascript 引擎的设置中执行</p><p>浏览器中嵌入了 JavaScript 引擎，有时也称作“JavaScript 虚拟机”。</p><p>比如：<strong>V8</strong>(<code>javascript engine</code>)、<strong>SpiderMonkey</strong> 等</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>引擎是如何工作的？</strong></p></div><blockquote><p>引擎很复杂，但是基本原理很简单。</p><ul><li>引擎（如果是浏览器，则引擎被嵌入在其中）读取（“解析”）脚本。</li><li>然后，引擎将脚本转化（“编译”）为机器语言。</li><li>然后，机器代码快速地执行。</li></ul><p>引擎会对流程中的每个阶段都进行优化。它甚至可以在编译的脚本运行时监视它，分析流经该脚本的数据，并根据获得的信息进一步优化机器代码。</p></blockquote><h2 id="浏览器中的-JavaScript-能做什么？"><a href="#浏览器中的-JavaScript-能做什么？" class="headerlink" title="浏览器中的 JavaScript 能做什么？"></a>浏览器中的 JavaScript 能做什么？</h2><p>现代的 JavaScript 是一种“安全的”编程语言。它不提供对内存或 CPU 的底层访问，因为它最初是为浏览器创建的，不需要这些功能。</p><p>JavaScript 的能力很大程度上取决于它运行的环境。例如，<a href="https://wikipedia.org/wiki/Node.js">Node.js</a> 支持允许 JavaScript 读取&#x2F;写入任意文件，执行网络请求等的函数。</p><h2 id="JavaScript-的上层语言"><a href="#JavaScript-的上层语言" class="headerlink" title="JavaScript 的上层语言"></a>JavaScript 的上层语言</h2><p>不同的人想要不同的功能。JavaScript 的语法也不能满足所有人的需求。</p><p>这是正常的，因为每个人的项目和需求都不一样。</p><p>因此，最近出现了许多新语言，这些语言在浏览器中执行之前，都会被 <strong>编译</strong>（转化）成 JavaScript。</p><p>现代化的工具使得编译速度非常快且透明，实际上允许开发者使用另一种语言编写代码并会将其“自动转换”为 JavaScript。</p><p>此类语言的示例有：</p><ul><li><a href="https://coffeescript.org/">CoffeeScript</a> 是 JavaScript 的一种语法糖。它引入了更加简短的语法，使我们可以编写更清晰简洁的代码。</li><li><a href="https://www.typescriptlang.org/">TypeScript</a> 专注于添加“严格的数据类型”以简化开发，以更好地支持复杂系统的开发。由微软开发。</li><li><a href="https://flow.org/">Flow</a> 也添加了数据类型，但是以一种不同的方式。由 Facebook 开发。</li><li><a href="https://www.dartlang.org/">Dart</a> 是一门独立的语言。它拥有自己的引擎，该引擎可以在非浏览器环境中运行（例如手机应用），它也可以被编译成 JavaScript。由 Google 开发。</li><li><a href="https://brython.info/">Brython</a> 是一个 Python 到 JavaScript 的转译器，让我们可以在不使用 JavaScript 的情况下，以纯 Python 编写应用程序。</li><li><a href="https://kotlinlang.org/docs/reference/js-overview.html">Kotlin</a> 是一个现代、简洁且安全的编程语言，编写出的应用程序可以在浏览器和 Node 环境中运行。</li></ul><p>这样的语言还有很多。当然，即使我们在使用此类编译语言，我们也需要了解 JavaScript。因为了解 JavaScript 才能让我们真正明白我们在做什么。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript-中的数据类型"><a href="#JavaScript-中的数据类型" class="headerlink" title="JavaScript 中的数据类型"></a>JavaScript 中的数据类型</h2><p><strong>原始数据类型：</strong></p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a><strong>Number</strong></h3><p>number 类型代表整数和浮点数<br>除了常规的数字，还包括所谓的“特殊数值（“special numeric values”）”也属于这种类型：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code></p><ul><li><p><code>Infinity</code>表示数学概念上的无穷大 ∞ <code>console.log(1/0) || console.log(Infinity)</code></p></li><li><p><code>NaN</code>代表一个计算错误它是一个不正确的或者一个未定义的数学操作所得到的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;not a number&#x27;</span> / <span class="number">2</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p><code>NaN</code> 是粘性的。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">NaN</span> + <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="number">3</span> * <span class="title class_">NaN</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;not a number&#x27;</span> / <span class="number">2</span> - <span class="number">1</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>数学运算是安全的</strong>,脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 <code>NaN</code> 的结果。</p></div></li></ul><p><strong>编写数字的更多方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> billion = <span class="number">1000000000</span></span><br><span class="line"><span class="comment">// 可以使用 _ 这种语法糖</span></span><br><span class="line">billio = <span class="number">1_000_000_000</span></span><br><span class="line"><span class="comment">// 使用 e 来缩短</span></span><br><span class="line">billio = <span class="number">1e9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7.3e9</span>)</span><br><span class="line"><span class="keyword">let</span> msc = <span class="number">0.000001</span></span><br><span class="line">msc = <span class="number">1e-6</span></span><br></pre></td></tr></table></figure><p><strong>十进制、二进制、八进制</strong></p><p><a href="https://en.wikipedia.org/wiki/Hexadecimal">十六进制</a> 数字在 JavaScript 中被广泛用于表示颜色，编码字符以及其他许多东西。所以自然地，有一种较短的写方法：<code>0x</code>，然后是数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0xff</span>) <span class="comment">// 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0xff</span>) <span class="comment">// 255（一样，大小写没影响）</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0b11111111</span> <span class="comment">// 二进制形式的 255</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0o377</span> <span class="comment">// 八进制形式的 255</span></span><br></pre></td></tr></table></figure><p><strong>toString(base)</strong></p><p>方法 <code>num.toString(base)</code> 返回在给定 <code>base</code> 进制数字系统中 <code>num</code> 的字符串表示形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>)) <span class="comment">// ff</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>)) <span class="comment">// 11111111</span></span><br></pre></td></tr></table></figure><p><code>base</code> 的范围可以从 <code>2</code> 到 <code>36</code>。默认情况下是 <code>10</code>。</p><p><strong>舍入</strong></p><ul><li><p><strong><code>Math.floor</code></strong>: 向下舍入</p></li><li><p><strong><code>Math.ceil</code></strong>: 向上舍入</p></li><li><p><strong><code>Math.round</code></strong>: 最近舍入</p></li><li><p><strong><code>Math.trunc</code></strong>: 移除小数点后的所有内容</p></li><li><p><strong><code>toFixed(n)</code></strong>: 将数字舍入到小数点后 <code>n</code> 位，并以字符串形式返回结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12.34</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toFixed</span>(<span class="number">1</span>)) <span class="comment">// &quot;12.3&quot;</span></span><br><span class="line">num = <span class="number">12.36</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toFixed</span>(<span class="number">1</span>)) <span class="comment">// &quot;12.4&quot;</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">12.34</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toFixed</span>(<span class="number">5</span>)) <span class="comment">// &quot;12.34000&quot;，在结尾添加了 0，以达到小数点后五位</span></span><br></pre></td></tr></table></figure><p>我们可以使用一元加号或 <code>Number()</code> 调用，将其转换为数字，例如 <code>+ num.toFixed(5)</code></p></li></ul><p><strong>不精确的计算：</strong><br>在内部，数字是以 64 位格式<code>IEEE-754</code>，如果一个如果一个数字真的很大，则可能会溢出 64 位存储，变成一个特殊的数值 <code>Infinity</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>) <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>一个数字以其二进制的形式存储在内存中，一个 1 和 0 的序列。但是在十进制数字系统中看起来很简单的 <code>0.1</code>，<code>0.2</code> 这样的小数，实际上在二进制形式中是无限循环小数。</p><p>使用二进制数字系统无法 <strong>精确</strong> 存储 <em>0.1</em> 或 _0.2_，就像没有办法将三分之一存储为十进制小数一样。<br>IEEE-754 数字格式通过将数字舍入到最接近的可能数字来解决此问题。这些舍入规则通常不允许我们看到“极小的精度损失”，但是它确实存在。</p><p>最可靠的方法是借助方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed(n)</a> 对结果进行舍入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="title function_">alert</span>(sum.<span class="title function_">toFixed</span>(<span class="number">2</span>)) <span class="comment">// &quot;0.30&quot;</span></span><br></pre></td></tr></table></figure><p><strong>isNaN 和 isFinite</strong></p><ul><li><p><code>isNaN(value)</code> 将其参数转换为数字，然后测试它是否为 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;str&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;123&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>isFinite(value)</code> 将其参数转换为数字，如果是常规数字而不是 <code>NaN/Infinity/-Infinity</code>，则返回 <code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">isFinite</span>(<span class="string">&#x27;15&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isFinite</span>(<span class="string">&#x27;str&#x27;</span>)) <span class="comment">// false，因为是一个特殊的值：NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)) <span class="comment">// false，因为是一个特殊的值：Infinity</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>parseInt 和 pareseFloat：</strong></p><p>使用加号 <code>+</code> 或 <code>Number()</code> 的数字转换是严格的。如果一个值不完全是一个数字，就会失败：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(+<span class="string">&#x27;100px&#x27;</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>但在现实生活中，我们经常会有带有单位的值，例如 CSS 中的 <code>&quot;100px&quot;</code> 或 <code>&quot;12pt&quot;</code>。</p><p>它们可以从字符串中“读取”数字，直到无法读取为止。如果发生 error，则返回收集到的数字。函数 <code>parseInt</code> 返回一个整数，而 <code>parseFloat</code> 返回一个浮点数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;100px&#x27;</span>)) <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;12.5em&#x27;</span>)) <span class="comment">// 12.5</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;12.3&#x27;</span>)) <span class="comment">// 12，只有整数部分被返回了</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;12.3.4&#x27;</span>)) <span class="comment">// 12.3，在第二个点出停止了读取</span></span><br></pre></td></tr></table></figure><p>某些情况下，<code>parseInt/parseFloat</code> 会返回 <code>NaN</code>。当没有数字可读时会发生这种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;a123&#x27;</span>)) <span class="comment">// NaN，第一个符号停止了读取</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>parseInt(str, radix) 的第二个参数</strong></p></div><p><code>parseInt()</code> 函数具有可选的第二个参数。它指定了数字系统的基数，因此 <code>parseInt</code> 还可以解析十六进制数字、二进制数字等的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>)) <span class="comment">// 255</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;ff&#x27;</span>, <span class="number">16</span>)) <span class="comment">// 255，没有 0x 仍然有效</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;2n9c&#x27;</span>, <span class="number">36</span>)) <span class="comment">// 123456</span></span><br></pre></td></tr></table></figure><p><strong>其他数学函数：</strong></p><p><strong><code>Math.random()</code>：</strong>返回一个从 0 到 1 的随机数（不包括 1</p><p><strong><code>Math.max(a, b, c...)和Math.min(a, b, c...)</code>：</strong> 从任意数量的参数中返回最大值和最小值。</p><p><strong><code>Math.pow(n, power)</code>：</strong>返回 <code>n</code> 的给定（power）次幂。</p><p><strong><code>Math.sqrt(100)</code>：</strong> 取根号</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><strong>单引号：</strong> <code>let str = &#39;hello&#39;</code></li><li><strong>双引号：</strong><code>let str = &quot;hello&quot;</code></li><li><strong>反引号：</strong> let str &#x3D; `hello`</li></ul><h4 id="字符串中的方法"><a href="#字符串中的方法" class="headerlink" title="字符串中的方法"></a>字符串中的方法</h4><h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><ul><li><p><code>toUpperCase() || toLowerCase()：</code>改变大小写</p></li><li><p><code>substring(start||0,end?length)：</code>获得子串</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>MDN 已经不推荐使用 <code>substr</code> 方法了 属于遗留特性 建议使用<code>slice</code></p></div></li><li><p><code>slice(start,end): </code>参数可以为负数，不破坏原来的串返回新的串</p></li><li><p><code>replace(pattern:(string|regex,replacement:(string|function)))：</code>替换(pattern 是如果是 string,则只会替换第一项) –&gt; <code>replaceAll</code></p></li><li><p><code>split(separator:(undefined||string||regex),limit?)：</code>分割字符形成数组，如果<code>separator</code>为<code>undefined</code>则会形成<code>[&#39;str&#39;]</code></p></li><li><p><code>includes(searchString,position?):boolean：</code> 查找是否包含</p></li><li><p><code>indexof(serchValue,position?):index||-1：</code>查找的字符串 <code>searchValue</code> 的第一次出现的索引，如果没有找到，则返回 <code>-1</code>。</p></li><li><p><code>lastIndexOf(serchValue,position?)</code></p></li></ul><h5 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h5><ul><li><code>at()</code></li><li><code>charAt</code></li><li><code>charCodeAt()</code></li><li><code>match(regexp)</code></li><li><code>startsWith(searchString,position?)</code></li><li><code>endsWith(...)</code></li><li><code>trim()</code></li></ul><h3 id="Boolean-逻辑类型"><a href="#Boolean-逻辑类型" class="headerlink" title="Boolean(逻辑类型)"></a>Boolean(逻辑类型)</h3><h4 id="布尔转换时"><a href="#布尔转换时" class="headerlink" title="布尔转换时"></a>布尔转换时</h4><ul><li><strong>空</strong>值：即 0、” “、undefined、NaN、null 转换为<code>false</code></li><li>其余为 <code>true</code></li></ul><blockquote><p>注意 “0” 是 true 噢</p></blockquote><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><h5 id="或运算"><a href="#或运算" class="headerlink" title="或运算(||)"></a>或运算(||)</h5><p>传统的比如 <code>if</code>中使用 就不提了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = value1 || value2 || value3</span><br><span class="line"><span class="comment">// 处理每一个操作数时，都将其转化为布尔值。如果结果是 true，就停止计算，返回这个操作数的初始值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用处理逻辑</span></span><br><span class="line">flag || <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line"><span class="literal">false</span> || <span class="title function_">alert</span>(<span class="string">&quot;printed&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="与运算"><a href="#与运算" class="headerlink" title="与运算(&amp;&amp;)"></a><strong>与运算(&amp;&amp;)</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="number">5</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 在处理每一个操作数时，都将其转化为布尔值。如果结果是 false，就停止计算，并返回这个操作数的初始值。</span></span><br></pre></td></tr></table></figure><h5 id="非运算"><a href="#非运算" class="headerlink" title="非运算(!)"></a><strong>非运算(!)</strong></h5><p>两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(!!<span class="string">&#x27;non-empty string&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(!!<span class="literal">null</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="值比较"><a href="#值比较" class="headerlink" title="值比较"></a>值比较</h4><h5 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等"></a>严格相等</h5><p>普通的相等性检查 <code>==</code> 存在一个问题，会先转换类型才会进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>严格相等运算符 <code>===</code> 在进行比较时不会做任何的类型转换。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="number">0</span> === <span class="literal">false</span>) <span class="comment">// false，因为被比较值的数据类型不同</span></span><br></pre></td></tr></table></figure><h5 id="null和undefined进行比较"><a href="#null和undefined进行比较" class="headerlink" title="null和undefined进行比较"></a><code>null</code>和<code>undefined</code>进行比较</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> === <span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> &gt; <span class="number">0</span>) <span class="comment">// (1) false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> == <span class="number">0</span>) <span class="comment">// (2) false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> &gt;= <span class="number">0</span>) <span class="comment">// (3) true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">undefined</span> &gt; <span class="number">0</span>) <span class="comment">// false (1)</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">undefined</span> &lt; <span class="number">0</span>) <span class="comment">// false (2)</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">undefined</span> == <span class="number">0</span>) <span class="comment">// false (3)</span></span><br></pre></td></tr></table></figure><h5 id="和-运算符"><a href="#和-运算符" class="headerlink" title="?和??运算符"></a><code>?</code>和<code>??</code>运算符</h5><p>?运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = condition ? value1 : value2</span><br><span class="line"><span class="comment">// 计算条件结果，如果结果为真，则返回 value1，否则返回 value2。</span></span><br><span class="line"><span class="keyword">let</span> accessAllowed = age &gt; <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="comment">// 上面写法有点多余 因为 accessAllowed 如果写成 age &gt; 18 本来就会返回一个boolean</span></span><br></pre></td></tr></table></figure><p>使用一系列问号 <code>?</code> 运算符可以返回一个取决于多个条件的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;age?&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message =</span><br><span class="line">  age &lt; <span class="number">3</span></span><br><span class="line">    ? <span class="string">&#x27;Hi, baby!&#x27;</span></span><br><span class="line">    : age &lt; <span class="number">18</span></span><br><span class="line">    ? <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    : age &lt; <span class="number">100</span></span><br><span class="line">    ? <span class="string">&#x27;Greetings!&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;What an unusual age!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(message)</span><br></pre></td></tr></table></figure><p><strong>?</strong> 有时候能代替<strong>if</strong>但是可读性并不强 赋值的时可以考虑使用 <strong>?</strong> 做逻辑判断的时候 <strong>if</strong> 更佳</p><p><strong>空值合并运算符<code>??</code></strong></p><p>对待 <code>null</code> 和 <code>undefined</code> 的方式类似,所以当一个值既不是 <code>null</code> 也不是 <code>undefined</code> 时，我们将其称为“已定义的（defined）否则为未定义</p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = a !== <span class="literal">null</span> &amp;&amp; a !== <span class="literal">undefined</span> ? a : b</span><br><span class="line"><span class="keyword">let</span> user</span><br><span class="line"><span class="title function_">alert</span>(user ?? <span class="string">&#x27;匿名&#x27;</span>) <span class="comment">// 匿名（user 未定义）</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&#x27;John&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(user ?? <span class="string">&#x27;匿名&#x27;</span>) <span class="comment">// John（user 已定义）</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> lastName = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> nickName = <span class="string">&#x27;Supercoder&#x27;</span></span><br><span class="line"><span class="comment">// 显示第一个已定义的值：</span></span><br><span class="line"><span class="title function_">alert</span>(firstName ?? lastName ?? nickName ?? <span class="string">&#x27;匿名&#x27;</span>) <span class="comment">// Supercoder</span></span><br></pre></td></tr></table></figure><p><strong>与||比较</strong></p><p>它们之间重要的区别是：</p><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。</li><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul><p>换句话说，<code>||</code> 无法区分 <code>false</code>、<code>0</code>、空字符串 <code>&quot;&quot;</code> 和 <code>null/undefined</code>。它们都一样 —— 假值（falsy values）。如果其中任何一个是 <code>||</code> 的第一个参数，那么我们将得到第二个参数作为结果。</p><p>不过在实际中，我们可能只想在变量的值为 <code>null/undefined</code> 时使用默认值。也就是说，当该值确实未知或未被设置时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(height || <span class="number">100</span>) <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">alert</span>(height ?? <span class="number">100</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>特殊的<code>null</code>值不属于任何一种类型构成了独立类型，仅代表无、空、值未知等状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 表示age是未知的</span></span><br></pre></td></tr></table></figure><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型。<br>如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age</span><br><span class="line"><span class="title function_">alert</span>(age) <span class="comment">// 弹出 &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><p>通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值。</p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>“symbol” 值表示唯一的标识符,可以使用 <code>Symbol()</code> 来创建这种类型的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h4><p>symbol 允许我们创建对象的“隐藏”属性，代码的任何其他部分都不能意外访问或重写这些属性。</p><p>例如，如果我们使用的是属于第三方代码的 <code>user</code> 对象，我们想要给它们添加一些标识符。</p><p>我们可以给它们使用 symbol 键：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="comment">// 属于另一个代码</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">user[id] = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user[id]) <span class="comment">// 我们可以使用 symbol 作为键来访问数据</span></span><br></pre></td></tr></table></figure><p>我们的标识符和它们的标识符之间不会有冲突，因为 symbol 总是不同的，即使它们有相同的名字。</p><h4 id="对象字面量中的-symbol"><a href="#对象字面量中的-symbol" class="headerlink" title="对象字面量中的 symbol"></a>对象字面量中的 symbol</h4><p>如果我们要在对象字面量 <code>&#123;...&#125;</code> 中使用 symbol，则需要使用方括号把它括起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  [id]: <span class="number">123</span> <span class="comment">// 而不是 &quot;id&quot;：123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Symbol-会在-for-in-中跳过"><a href="#Symbol-会在-for-in-中跳过" class="headerlink" title="Symbol 会在 for in 中跳过"></a>Symbol 会在 for in 中跳过</h4><p>symbol 属性不参与 <code>for..in</code> 循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  [id]: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) <span class="title function_">alert</span>(key) <span class="comment">// name, age（没有 symbol）</span></span><br><span class="line"><span class="comment">// 使用 symbol 任务直接访问</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Direct: &#x27;</span> + user[id]) <span class="comment">// Direct: 123</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys(user)</a> 也会忽略它们。这是一般“隐藏符号属性”原则的一部分。如果另一个脚本或库遍历我们的对象，它不会意外地访问到符号属性。</p><p>相反，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a> 会同时复制字符串和 symbol 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  [id]: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, user)</span><br><span class="line"><span class="title function_">alert</span>(clone[id]) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h4 id="全局-Symbol"><a href="#全局-Symbol" class="headerlink" title="全局 Symbol"></a>全局 Symbol</h4><p>要从注册表中读取（不存在则创建）symbol，请使用 <code>Symbol.for(key)</code>。<br>该调用会检查全局注册表，如果有一个描述为 <code>key</code> 的 symbol，则返回该 symbol，否则将创建一个新 symbol（<code>Symbol(key)</code>），并通过给定的 <code>key</code> 将其存储在注册表中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从全局注册表中读取</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;id&#x27;</span>) <span class="comment">// 如果该 symbol 不存在，则创建它</span></span><br><span class="line"><span class="comment">// 再次读取（可能是在代码中的另一个位置）</span></span><br><span class="line"><span class="keyword">let</span> idAgain = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="comment">// 相同的 symbol</span></span><br><span class="line"><span class="title function_">alert</span>(id === idAgain) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor"></a>Symbol.keyFor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 name 获取 symbol</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="comment">// 通过 symbol 获取 name</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(sym)) <span class="comment">// name</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(sym2)) <span class="comment">// id</span></span><br></pre></td></tr></table></figure><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p><code>BigInt</code> 是一种特殊的数字类型，它提供了对任意长度整数的支持。</p><p>创建 bigint 的方式有两种：在一个整数字面量后面加 <code>n</code> 或者调用 <code>BigInt</code> 函数，该函数从字符串、数字等中生成 bigint。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigint = <span class="number">1234567890123456789012345678901234567890n</span></span><br><span class="line"><span class="keyword">const</span> sameBigint = <span class="title class_">BigInt</span>(<span class="string">&#x27;1234567890123456789012345678901234567890&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bigintFromNumber = <span class="title class_">BigInt</span>(<span class="number">10</span>) <span class="comment">// 与 10n 相同</span></span><br></pre></td></tr></table></figure><details class="folding-tag" cyan><summary> 基本类型和引用类型 </summary>              <div class='content'>              <ol><li><p><code>Javascript</code>中栈和堆</p><ul><li>栈(<strong>stack</strong>)：自动分配固定大小的内存空间，并由系统自动释放，栈数据结构遵从先进后出的原则</li><li>堆(<strong>heap</strong>)：堆内存，动态分配内存，内存大小不固定，也不会自动释放，堆数据结构是一种无序的树状结构，满足<code>key-value</code>键值对我们只用知道 key 名，就能通过 key 查找到对应的 value。比较经典的就是书架存书的例子，我们知道书名，就可以找到对应的书籍</li></ul><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascript1.png"></p></li><li><p>引用类型的引用和复制</p><p><strong>当一个对象变量被复制 —— 引用被复制，而该对象自身并没有被复制。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line"><span class="comment">// 这里在堆内存中并没有新new 一份 &#123;name: &#x27;月晕&#x27;, age: 18&#125;,而只是把b的内容地址指向a的地址 指向堆内存中的同一份</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><p><strong>非原始数据类型:</strong></p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="Object-表示"><a href="#Object-表示" class="headerlink" title="Object 表示"></a>Object 表示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// “构造函数” 的语法</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;&#125;;  <span class="comment">// “字面量” 的语法</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这将提示有语法错误</span></span><br><span class="line">user.<span class="property">likes</span> birds = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 下面这样不会报错</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">user[<span class="string">&quot;likes birds&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="title function_">alert</span>(user[<span class="string">&quot;likes birds&quot;</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> user[<span class="string">&quot;likes birds&quot;</span>];</span><br></pre></td></tr></table></figure><p><strong>object 中 key 的计算属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="title function_">prompt</span>(<span class="string">&#x27;Which fruit to buy?&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> bag = &#123;</span><br><span class="line">  [fruit]: <span class="number">5</span>, <span class="comment">// 属性名是从 fruit 变量中得到的</span></span><br><span class="line">  [fruit + <span class="string">&#x27;Computers&#x27;</span>]: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(bag.<span class="property">apple</span>) <span class="comment">// 5 如果 fruit=&quot;apple&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Object-的引用和复制"><a href="#Object-的引用和复制" class="headerlink" title="Object 的引用和复制"></a>Object 的引用和复制</h4><p>对象与原始类型的根本区别之一是，对象是“通过引用”存储和复制的，而原始类型：字符串、数字、布尔值等 —— 总是“作为一个整体”复制。</p><p><strong>当一个对象变量被复制 —— 引用被复制，而该对象自身并没有被复制。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> admin = user <span class="comment">// 复制引用</span></span><br></pre></td></tr></table></figure><p><img src="https://zh.javascript.info/article/object-copy/variable-copy-reference.svg"></p><p><strong>克隆和合并,Object.assign</strong></p><p>拷贝一个对象变量会又创建一个对相同对象的引用,复制一个对象，那该怎么做呢？<br>最先想到的就是遍历一份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> clone = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line">  clone[key] = user[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 es6 对象展开符</span></span><br><span class="line"><span class="keyword">let</span> clone1 = &#123; ...user &#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a>来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.assign(dest, src1, src2, src3,...)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;yueyun&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> permissions1 = &#123; <span class="attr">canView</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> permissions2 = &#123; <span class="attr">canEdit</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="comment">// 将 permissions1 和 permissions2 中的所有属性都拷贝到 user 中</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(user, permissions1, permissions2);</span><br><span class="line"><span class="comment">// 现在 user = &#123; name: &quot;John&quot;, canView: true, canEdit: true &#125;</span></span><br><span class="line"><span class="comment">// 如果被拷贝的属性的属性名已经存在，那么它会被覆盖</span></span><br></pre></td></tr></table></figure><p><strong>深层克隆：</strong></p><p>到现在为止，我们都假设 <code>user</code> 的所有属性均为原始类型。但属性可以是对其他对象的引用。<br>当数组中存在对象抑或是对象中存在对象就要使用深拷贝</p><p>深拷贝可以使用 JSON 序列化(有优缺点)来做或者是自己手写一个深拷贝函数</p><p><strong>lodash</strong>库中的<code>.cloneDeep(obj)</code></p><p>使用 <code>structuredClone()</code> 去拷贝</p><h4 id="Object-中的-this"><a href="#Object-中的-this" class="headerlink" title="Object 中的 this"></a>Object 中的 this</h4><p>this 即是函数的上下文，this 出现的值取决于它出现的上下文：函数、类或全局</p><p>函数写在对象中称之为对象的方法</p><h5 id="方法中的this"><a href="#方法中的this" class="headerlink" title="方法中的this"></a>方法中的<code>this</code></h5><p>通常, 对象方法需要访问对象中存储的信息才能完成其工作。<br>this 会指向一个对象：</p><ul><li>以函数形式调用时、this 指向的是 widow(浏览器环境)&#x2F;<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis">globalThis</a>(nodejs 环境)</li><li>以方法的形式调用、this 指向的是调用方法的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this 指的是当前对象 John</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this</code> 的值是在代码运行时计算出来的，它取决于代码上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">&#x27;Admin&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在两个对象中使用相同的函数</span></span><br><span class="line">user.<span class="property">f</span> = sayHi</span><br><span class="line">admin.<span class="property">f</span> = sayHi</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个调用有不同的 this 值</span></span><br><span class="line"><span class="comment">// 函数内部的 &quot;this&quot; 是“点符号前面”的那个对象</span></span><br><span class="line">user.<span class="title function_">f</span>() <span class="comment">// John（this == user）</span></span><br><span class="line">admin.<span class="title function_">f</span>() <span class="comment">// Admin（this == admin）</span></span><br><span class="line">admin[<span class="string">&#x27;f&#x27;</span>]() <span class="comment">// Admin（使用点符号或方括号语法来访问这个方法，都没有关系。）</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数没有自己的this"><a href="#箭头函数没有自己的this" class="headerlink" title="箭头函数没有自己的this"></a><strong>箭头函数没有自己的<code>this</code></strong></h5><p>箭头函数有些特别：它们没有自己的 <code>this</code>。如果我们在这样的函数中引用 <code>this</code>，<code>this</code> 值取决于外部“正常的”函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Ilya&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">arrow</span> = (<span class="params"></span>) =&gt; <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">firstName</span>)</span><br><span class="line">    <span class="title function_">arrow</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">user.<span class="title function_">sayHi</span>() <span class="comment">// Ilya</span></span><br></pre></td></tr></table></figure><h4 id="可选链？"><a href="#可选链？" class="headerlink" title="可选链？"></a>可选链？</h4><p>可选链<code>?.</code> 是一种访问嵌套对象属性的安全的方式，即使中间属性不存在也不会出现错误</p><p><strong>不存在属性问题：</strong></p><p>如果我们有很多个 <code>user</code> 对象其中存储了我们的用户数据，我们大多数用户的地址都存储在 <code>user.address</code> 中，街道地址存储在 <code>user.address.street</code> 中，但有些用户没有提供这些信息。在这种情况下，当我们尝试获取 <code>user.address.street</code>，而该用户恰好没提供地址信息，我们则会收到一个错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125; <span class="comment">// 一个没有 &quot;address&quot; 属性的 user 对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>.<span class="property">street</span>) <span class="comment">// Error!</span></span><br></pre></td></tr></table></figure><p>javascritp 会把 <code>user.address</code> 识别为 <code>undefined</code> 尝试读取<code>user.address.street</code> 即是<code>undefined.street</code>自然是会失败并返回一个错误</p><p>在 Web 开发中，我们可以使用特殊的方法调用（例如 <code>document.querySelector(&#39;.elem&#39;)</code>）以对象的形式获取一个网页元素，如果没有这种对象，则返回 <code>null</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.elem&#x27;</span>).<span class="property">innerHTML</span></span><br><span class="line"><span class="comment">// 如果 document.querySelector(&#x27;.elem&#x27;) 的结果为 null，则会出现错误</span></span><br></pre></td></tr></table></figure><p>同样，如果该元素不存在，则访问 <code>null</code> 的 <code>.innerHTML</code> 属性时会报错。在某些情况下，当元素的缺失是没问题的时候，我们希望避免出现这种错误，而是接受 <code>html = null</code> 作为结果。</p><p>首先我们想到的肯定是可以用<code>if</code>条件语句判断或者<code>?</code>运算符来解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span> ? user.<span class="property">address</span>.<span class="property">street</span> : <span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure><p>当层级多了之后显示会很臃肿而且不优雅 即引入了<strong>可选链?</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125; <span class="comment">// user 没有 address 属性</span></span><br><span class="line"><span class="title function_">alert</span>(user?.<span class="property">address</span>?.<span class="property">street</span>) <span class="comment">// undefined（不报错）</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.elem&#x27;</span>)?.<span class="property">innerHTML</span></span><br><span class="line"><span class="comment">// 如果没有符合的元素，则为 undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>如果未声明变量 <code>user</code>，那么 <code>user?.anything</code> 会触发一个错误<br><code>?.</code> 前的变量必须已声明（例如 <code>let/const/var user</code> 或作为一个函数参数）。可选链仅适用于已声明的变量。</p></blockquote><p>当然也存在<strong>*<code>?.()</code></strong> 和 <strong><code>?.[]</code></strong></p><h2 id="Javascript-中的方法"><a href="#Javascript-中的方法" class="headerlink" title="Javascript 中的方法"></a>Javascript 中的方法</h2><h3 id="原始类型的方法"><a href="#原始类型的方法" class="headerlink" title="原始类型的方法"></a>原始类型的方法</h3><p><code>string</code> <code>number</code> <code>bigInt</code> <code>boolean</code> <code>symbol</code> <code>null</code> <code>undefined</code></p><p>比如下面的这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>())</span><br></pre></td></tr></table></figure><p><code>str.toUpperCase()</code>中实际发生的情况</p><ul><li>字符串<code>str</code>是一个原始值。因此，在访问其属性时，会创建一个包含字符串字面值的特殊对象，并且具有可用的方法，例如 <code>toUpperCase()</code>。</li><li>该方法运行并返回一个新的字符串（由 <code>console.log</code> 显示）。</li><li>特殊对象被销毁，只留下原始值 <code>str</code>。</li></ul><p>所以原始类型可以提供方法，但它们依然是轻量级的。</p><p>JavaScript 引擎高度优化了这个过程。它甚至可能跳过创建额外的对象。但是它仍然必须遵守规范，并且表现得好像它创建了一样。</p><p>数字有其自己的方法，例如，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed(n)</a> 将数字舍入到给定的精度</p><h3 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h3><p>但很多时候我们发现还需要 <strong>有序集合</strong>，里面的元素都是按顺序排列的。例如，我们可能需要存储一些列表，比如用户、商品以及 HTML 元素等，这时一个特殊的数据结构数组（<code>Array</code>）就派上用场了，它能存储有序的集合。</p><blockquote><p>从 JS 的数据类型本质上面来说 数组属于是一种特殊的对象</p></blockquote><ul><li>添加&#x2F;删除元素<ul><li><code>push(...items)</code> —— 向尾端添加元素，</li><li><code>pop()</code> —— 从尾端提取一个元素，</li><li><code>shift()</code> —— 从首端提取一个元素，</li><li><code>unshift(...items)</code> —— 向首端添加元素，</li><li><code>splice(pos, deleteCount, ...items)</code> —— 从 <code>pos</code> 开始删除 <code>deleteCount</code> 个元素，并插入 <code>items</code>。</li><li><code>slice(start, end)</code> —— 创建一个新数组，将从索引 <code>start</code> 到索引 <code>end</code>（但不包括 <code>end</code>）的元素复制进去。</li><li><code>concat(...items)</code> —— 返回一个新数组：复制当前数组的所有元素，并向其中添加 <code>items</code>。如果 <code>items</code> 中的任意一项是一个数组，那么就取其元素。</li></ul></li><li>搜索元素<ul><li><code>indexOf/lastIndexOf(item, pos)</code> —— 从索引 <code>pos</code> 开始搜索 <code>item</code>，搜索到则返回该项的索引，否则返回 <code>-1</code>。</li><li><code>includes(value)</code> —— 如果数组有 <code>value</code>，则返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>find/filter(func)</code> —— 通过 <code>func</code> 过滤元素，返回使 <code>func</code> 返回 <code>true</code> 的第一个值&#x2F;所有值。</li><li><code>findIndex</code> 和 <code>find</code> 类似，但返回索引而不是值。</li></ul></li><li>遍历元素<ul><li><code>forEach(func)</code> —— 对每个元素都调用 <code>func</code>，不返回任何内容。</li></ul></li><li>转换数组<ul><li><code>map(func)</code> —— 根据对每个元素调用 <code>func</code> 的结果创建一个新数组。</li><li><code>sort(func)</code> —— 对数组进行原位（in-place）排序，然后返回它。</li><li><code>reverse()</code> —— 原位（in-place）反转数组，然后返回它。</li><li><code>split/join</code> —— 将字符串转换为数组并返回。</li><li><code>reduce/reduceRight(func, initial)</code> —— 通过对每个元素调用 <code>func</code> 计算数组上的单个值，并在调用之间传递中间结果。</li></ul></li><li>其他方法<ul><li><code>Array.isArray(value)</code> 检查 <code>value</code> 是否是一个数组，如果是则返回 <code>true</code>，否则返回 <code>false</code>。</li></ul></li></ul><p>请注意，<code>sort</code>，<code>reverse</code> 和 <code>splice</code> 方法修改的是数组本身。</p><ul><li>杂<ul><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/some">arr.some(fn)</a>&#x2F;<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/every">arr.every(fn)</a> 检查数组</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">arr.fill(value, start, end)</a> —— 从索引 <code>start</code> 到 <code>end</code>，用重复的 <code>value</code> 填充数组。</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">arr.copyWithin(target, start, end)</a> —— 将从位置 <code>start</code> 到 <code>end</code> 的所有元素复制到 <strong>自身</strong> 的 <code>target</code> 位置（覆盖现有元素）。</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">arr.flat(depth)</a>&#x2F;<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">arr.flatMap(fn)</a> 从多维数组创建一个新的扁平数组。</li></ul></li></ul><h3 id="Iterable-object-可迭代对象"><a href="#Iterable-object-可迭代对象" class="headerlink" title="Iterable object(可迭代对象)"></a>Iterable object(可迭代对象)</h3><p>可迭代(<strong>Iterable</strong>) 对像是数组的泛化，即是对象可以在<code>for of</code>循环中使用</p><p>数组是可迭代的。但不仅仅是数组。很多其他内建对象也都是可迭代的。例如字符串也是可迭代的。</p><p>如果从技术上讲，对象不是数组，而是表示某物的集合（列表，集合），<code>for..of</code> 是一个能够遍历它的很好的语法，因此，让我们来看看如何使其发挥作用。</p><h4 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h4><p>比如现在有一个<code>range</code>对象代表了一个数字区间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们希望</span></span><br><span class="line"><span class="comment">// for(let num of range) &#123;console.log(num) ...1 2 3 4 5&#125;</span></span><br></pre></td></tr></table></figure><p>为了让<code>range</code>对象可以迭代我们需要手动为其添加一个<code>Symbol.iterator</code>方法</p><ol><li>当 <code>for..of</code> 循环启动时，它会调用这个方法（如果没找到，就会报错）。这个方法必须返回一个 <strong>迭代器（iterator）</strong> —— 一个有 <code>next</code> 方法的对象。</li><li>从此开始，<code>for..of</code> <strong>仅适用于这个被返回的对象</strong>。</li><li>当 <code>for..of</code> 循环希望取得下一个数值，它就调用这个对象的 <code>next()</code> 方法。</li><li><code>next()</code> 方法返回的结果的格式必须是 <code>&#123;done: Boolean, value: any&#125;</code>，当 <code>done=true</code> 时，表示循环结束，否则 <code>value</code> 是下一个值。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> range = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">current</span>: <span class="variable language_">this</span>.<span class="property">from</span>,</span><br><span class="line">      <span class="attr">last</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span> &lt;= <span class="variable language_">this</span>.<span class="property">last</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;explosion&#x27;</span>)</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">current</span>++ &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> range) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobby</span>: [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;play Game&#x27;</span>, <span class="string">&#x27;sleep&#x27;</span>],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">keys</span>: <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>),</span><br><span class="line">      <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">index</span> &lt; <span class="variable language_">this</span>.<span class="property">keys</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: that[<span class="variable language_">this</span>.<span class="property">keys</span>[<span class="variable language_">this</span>.<span class="property">index</span>++]] &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> personInfo) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;月晕&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobby</span>: [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;play Game&#x27;</span>, <span class="string">&#x27;sleep&#x27;</span>],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; keys.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>[keys[index++]] &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> personInfo) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>无穷迭代器（iterator）</strong></p><p>无穷迭代器也是可能的。例如，将 <code>range</code> 设置为 <code>range.to = Infinity</code>，这时 <code>range</code> 则成为了无穷迭代器。或者我们可以创建一个可迭代对象，它生成一个无穷伪随机数序列。也是可能的。</p><p><code>next</code> 没有什么限制，它可以返回越来越多的值，这是正常的。</p><p>当然，迭代这种对象的 <code>for..of</code> 循环将不会停止。但是我们可以通过使用 <code>break</code> 来停止它。</p></blockquote><h4 id="字符串迭代"><a href="#字符串迭代" class="headerlink" title="字符串迭代"></a>字符串迭代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chars = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> chars) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(char)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="显示调用迭代器"><a href="#显示调用迭代器" class="headerlink" title="显示调用迭代器"></a>显示调用迭代器</h4><p>为了更深层地了解底层知识，让我们来看看如何显式地使用迭代器。</p><p>我们将会采用与 <code>for..of</code> 完全相同的方式遍历字符串，但使用的是直接调用。这段代码创建了一个字符串迭代器，并“手动”从中获取值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 for..of 做相同的事</span></span><br><span class="line"><span class="comment">// for (let char of str) alert(char);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = iterator.<span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">done</span>) <span class="keyword">break</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">value</span>) <span class="comment">// 一个接一个地输出字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很少需要我们这样做，但是比 <code>for..of</code> 给了我们更多的控制权。例如，我们可以拆分迭代过程：迭代一部分，然后停止，做一些其他处理，然后再恢复迭代。</p><p>可迭代(<strong>iterable</strong>)和类数组(<strong>array-like</strong>)</p><ul><li><strong>Iterable</strong> 如上所述，是实现了 <code>Symbol.iterator</code> 方法的对象。</li><li><strong>Array-like</strong> 是有索引和 <code>length</code> 属性的对象，所以它们看起来很像数组。</li></ul><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><p>有一个全局方法 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from</a> 可以接受一个可迭代或类数组的值，并从中获取一个“真正的”数组。然后我们就可以对其调用数组方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;yueyun&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;suki&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>())</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受上面的range 生成数组</span></span><br><span class="line"><span class="keyword">const</span> range = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">current</span>: <span class="variable language_">this</span>.<span class="property">from</span>,</span><br><span class="line">      <span class="attr">last</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span> &lt;= <span class="variable language_">this</span>.<span class="property">last</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">current</span>++ &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> rangeArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(range)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeArr) <span class="comment">// [1 2 3 4 5]</span></span><br></pre></td></tr></table></figure><p>可选的第二个参数 <code>mapFn</code> 可以是一个函数，该函数会在对象中的元素被添加到数组前，被应用于每个元素，此外 <code>thisArg</code> 允许我们为该函数设置 <code>this</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求每个数的平方</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(range, <span class="function">(<span class="params">num</span>) =&gt;</span> num * num)</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(arr) <span class="comment">// 1,4,9,16,25</span></span><br></pre></td></tr></table></figure><h2 id="Map-和-Set-映射和集合"><a href="#Map-和-Set-映射和集合" class="headerlink" title="Map 和 Set(映射和集合)"></a>Map 和 Set(映射和集合)</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a>是一个带键的数据项集合.就跟<code>Object</code>一样,区别就是<code>Map</code>的<code>key</code>允许是任意类型<br>Map 的方法和属性如下</p><ul><li><code>new Map()</code> —— 创建 map。</li><li><code>map.set(key, value)</code> —— 根据键存储值。</li><li><code>map.get(key)</code> —— 根据键来返回值，如果 <code>map</code> 中不存在对应的 <code>key</code>，则返回 <code>undefined</code>。</li><li><code>map.has(key)</code> —— 如果 <code>key</code> 存在则返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>map.delete(key)</code> —— 删除指定键的值。</li><li><code>map.clear()</code> —— 清空 map。</li><li><code>map.size</code> —— 返回当前元素个数。</li></ul><blockquote><p>Map 可以使用对象来做键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> john = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 存储每个用户的来访次数</span></span><br><span class="line"><span class="keyword">let</span> visitsCountMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="comment">// john 是 Map 中的键</span></span><br><span class="line">visitsCountMap.<span class="title function_">set</span>(john, <span class="number">123</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(visitsCountMap.<span class="title function_">get</span>(john)) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>使用对象作为键是 <code>Map</code> 最值得注意和重要的功能之一。在 <code>Object</code> 中，我们则无法使用对象作为键。在 <code>Object</code> 中使用字符串作为键是可以的，但我们无法使用另一个 <code>Object</code> 作为 <code>Object</code> 中的键</p></blockquote><div class="note info simple"><p><code>map.set</code>调用都会返回 map 本身 即我们可以进行链式调用</p></div><h3 id="Map-迭代"><a href="#Map-迭代" class="headerlink" title="Map 迭代"></a>Map 迭代</h3><p>如果要在<code>Map</code>里使用循环 可以使用下面的方法</p><ul><li><code>map.keys()</code> 遍历并返回一个包含所有键的可迭代对象</li><li><code>map.values()</code> —— 遍历并返回一个包含所有值的可迭代对象，</li><li><code>map.entries()</code> —— 遍历并返回一个包含所有实体 <code>[key, value]</code> 的可迭代对象，<code>for..of</code> 在默认情况下使用的就是这个。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> recipeMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;cucumber&#x27;</span>, <span class="number">500</span>],</span><br><span class="line">  [<span class="string">&#x27;tomatoes&#x27;</span>, <span class="number">300</span>],</span><br><span class="line">  [<span class="string">&#x27;onion&#x27;</span>, <span class="number">50</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 遍历所有的键（vegetables）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> vegetable <span class="keyword">of</span> recipeMap.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(vegetable) <span class="comment">// cucumber, tomatoes, onion</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的值（amounts）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> amount <span class="keyword">of</span> recipeMap.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(amount) <span class="comment">// 500, 350, 50</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的实体 [key, value]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> recipeMap) &#123;</span><br><span class="line">  <span class="comment">// 与 recipeMap.entries() 相同</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(entry) <span class="comment">// cucumber,500 (and so on)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>迭代的顺序与插入值的顺序相同。与普通的 <code>Object</code> 不同，<code>Map</code> 保留了此顺序。</p></blockquote><p><code>Map</code>中有内建的<code>forEach</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对每个键值对 (key, value) 运行 forEach 函数</span></span><br><span class="line">recipeMap.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key, map</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>) <span class="comment">// cucumber: 500 etc</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Map-和对象的转换"><a href="#Map-和对象的转换" class="headerlink" title="Map 和对象的转换"></a>Map 和对象的转换</h3><p><strong><code>Object.entries</code>：</strong>从对象创建 Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// yueyun</span></span><br></pre></td></tr></table></figure><p><strong><code>Object.fromEntries</code>：</strong>从 Map 创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prices = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">  [<span class="string">&#x27;banana&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="string">&#x27;meat&#x27;</span>, <span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 prices = &#123; banana: 1, orange: 2, meat: 4 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prices.<span class="property">orange</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;banana&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;meat&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map.<span class="title function_">entries</span>())</span><br></pre></td></tr></table></figure><blockquote><p>当 Map 中含有对象作为 key 时 专成对象时的 key 会变成<code>&#39;[object object]&#39;</code></p></blockquote><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><code>Set</code> 是一个特殊的类型集合 —— “值的集合”（没有键），它的每一个值只能出现一次。 它的主要方法如下：</p><ul><li><code>new Set(iterable)</code> —— 创建一个 <code>set</code>，如果提供了一个 <code>iterable</code> 对象（通常是数组），将会从数组里面复制值到 <code>set</code> 中。</li><li><code>set.add(value)</code> —— 添加一个值，返回 set 本身</li><li><code>set.delete(value)</code> —— 删除值，如果 <code>value</code> 在这个方法调用的时候存在则返回 <code>true</code> ，否则返回 <code>false</code>。</li><li><code>set.has(value)</code> —— 如果 <code>value</code> 在 set 中，返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>set.clear()</code> —— 清空 set。</li><li><code>set.size</code> —— 返回元素个数。</li></ul><p>它的主要特点是，重复使用同一个值调用 <code>set.add(value)</code> 并不会发生什么改变。这就是 <code>Set</code> 里面的每一个值只出现一次的原因。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> pete = &#123; <span class="attr">name</span>: <span class="string">&#x27;Pete&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> mary = &#123; <span class="attr">name</span>: <span class="string">&#x27;Mary&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// visits，一些访客来访好几次</span></span><br><span class="line">set.<span class="title function_">add</span>(john)</span><br><span class="line">set.<span class="title function_">add</span>(pete)</span><br><span class="line">set.<span class="title function_">add</span>(mary)</span><br><span class="line">set.<span class="title function_">add</span>(john)</span><br><span class="line">set.<span class="title function_">add</span>(mary)</span><br><span class="line"><span class="comment">// set 只保留不重复的值</span></span><br><span class="line"><span class="title function_">alert</span>(set.<span class="property">size</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> user <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(user.<span class="property">name</span>) <span class="comment">// John（然后 Pete 和 Mary）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set-迭代-iteration"><a href="#Set-迭代-iteration" class="headerlink" title="Set 迭代(iteration)"></a>Set 迭代(iteration)</h3><p>我们可以使用 <code>for..of</code> 或 <code>forEach</code> 来遍历 Set：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;oranges&#x27;</span>, <span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> set) <span class="title function_">alert</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 forEach 相同：</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, valueAgain, set</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="WeakMap-和-WeakSet"><a href="#WeakMap-和-WeakSet" class="headerlink" title="WeakMap 和 WeakSet"></a>WeakMap 和 WeakSet</h3><p>在垃圾回收中 Javascript 引擎在值“可达”和“可使用”时会将其保存在内存中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> yueyun = &#123; <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="comment">// 该对象能访问 yueyun是它的引用</span></span><br><span class="line"><span class="comment">// 覆盖</span></span><br><span class="line">yueyun = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 该对象将会被从内存中清除</span></span><br></pre></td></tr></table></figure><p>通常 当对象，数组之类的数据结构在内存中时，它们的子元素 如对象的属性，数组的元素都是认为可达的 例如，如果把一个对象放入到数组中，那么只要这个数组存在，那么这个对象也就存在，即使没有其他对该对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> yueyun = &#123; <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">let</span> arr = [yueyun]</span><br><span class="line"><span class="comment">// 覆盖</span></span><br><span class="line">yueyun = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 前面由 yueyun 所引用的那个对象被存储在了 array 中</span></span><br><span class="line"><span class="comment">// 所以它不会被垃圾回收机制回收</span></span><br><span class="line"><span class="comment">// 我们可以通过 array[0] 获取到它</span></span><br></pre></td></tr></table></figure><p>所以当我们使用对象作为 Map 的键的时 如果 Map 存在 那么对象就会一直存在占用内存不会被垃圾回收</p><p><code>WeakMap</code> 在这方面有着根本上的不同。它不会阻止垃圾回收机制对作为键的对象（key object）的回收。</p><h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><p><code>WeakMap</code> 和 <code>Map</code> 的第一个不同点就是，<code>WeakMap</code> 的键必须是对象，不能是原始值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj, <span class="string">&#x27;ok&#x27;</span>) <span class="comment">// 正常工作（以对象作为键）</span></span><br><span class="line"><span class="comment">// 不能使用字符串作为键</span></span><br><span class="line">weakMap.<span class="title function_">set</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;Whoops&#x27;</span>) <span class="comment">// Error，因为 &quot;test&quot; 不是一个对象</span></span><br></pre></td></tr></table></figure><p>现在，如果我们在 weakMap 中使用一个对象作为键，并且没有其他对这个对象的引用 —— 该对象将会被从内存（和 map）中自动清除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> yueyun = &#123; <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">weakMap.<span class="title function_">set</span>(yueyun, <span class="string">&#x27;yueyun&#x27;</span>)</span><br><span class="line">yueyun = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;weakMap&#x27;</span>, weakMap.<span class="title function_">get</span>(yueyun)) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>与常规的<code>map</code>相比 如果<code>yueyun</code>仅仅是作为 <code>WeakMap</code> 的键而存在 —— 它将会被从 map（和内存）中自动删除。</p><p><code>WeakMap</code> 不支持迭代以及 <code>keys()</code>，<code>values()</code> 和 <code>entries()</code> 方法。所以没有办法获取 <code>WeakMap</code> 的所有键或值。<br><code>WeakMap</code> 只有以下的方法：</p><ul><li><code>weakMap.get(key)</code></li><li><code>weakMap.set(key, value)</code></li><li><code>weakMap.delete(key)</code></li><li><code>weakMap.has(key)</code></li></ul><h4 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h4><p><code>WeakSet</code> 的表现类似：</p><ul><li>与 <code>Set</code> 类似，但是我们只能向 <code>WeakSet</code> 添加对象（而不能是原始值）。</li><li>对象只有在其它某个（些）地方能被访问的时候，才能留在 <code>WeakSet</code> 中。</li><li>跟 <code>Set</code> 一样，<code>WeakSet</code> 支持 <code>add</code>，<code>has</code> 和 <code>delete</code> 方法，但不支持 <code>size</code> 和 <code>keys()</code>，并且不可迭代。</li></ul><p>变“弱（weak）”的同时，它也可以作为额外的存储空间。但并非针对任意数据，而是针对“是&#x2F;否”的事实。<code>WeakSet</code> 的元素可能代表着有关该对象的某些信息。</p><p>例如，我们可以将用户添加到 <code>WeakSet</code> 中，以追踪访问过我们网站的用户：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> visitedSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> pete = &#123; <span class="attr">name</span>: <span class="string">&#x27;Pete&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> mary = &#123; <span class="attr">name</span>: <span class="string">&#x27;Mary&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">visitedSet.<span class="title function_">add</span>(john) <span class="comment">// John 访问了我们</span></span><br><span class="line">visitedSet.<span class="title function_">add</span>(pete) <span class="comment">// 然后是 Pete</span></span><br><span class="line">visitedSet.<span class="title function_">add</span>(john) <span class="comment">// John 再次访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// visitedSet 现在有两个用户了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 John 是否来访过？</span></span><br><span class="line"><span class="title function_">alert</span>(visitedSet.<span class="title function_">has</span>(john)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 Mary 是否来访过？</span></span><br><span class="line"><span class="title function_">alert</span>(visitedSet.<span class="title function_">has</span>(mary)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">john = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// visitedSet 将被自动清理(即自动清除其中已失效的值 john)</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>JavaScript 中最常用的数据结构是<code>Object</code>和<code>Array</code> 解构赋值是一种特殊的语法 将数组或对象拆包到一系列的变量中</p><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [firstName, lastName] = <span class="string">&#x27;yue yun&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName) <span class="comment">// yue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastName) <span class="comment">// yun</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>解构并没有破坏 只是方便简单的赋值</p></div><p>有想忽略的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [firstName, , title] = [<span class="string">&#x27;yueyun&#x27;</span>, <span class="string">&#x27;megumi&#x27;</span>, <span class="string">&#x27;korumi&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(title) <span class="comment">// korumi</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>等号的右侧可以是任何可迭代的对象</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="string">&#x27;abc&#x27;</span> <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="keyword">let</span> [one, two, three] = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><div class="note info simple"><p>交换变量值的技巧</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> guest = <span class="string">&#x27;yue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> admin = <span class="string">&#x27;yun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让我们来交换变量的值：使得 guest = yue，admin = yun</span></span><br><span class="line">;[guest, admin] = [admin, guest]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;guest&#125;</span> <span class="subst">$&#123;admin&#125;</span>`</span>) <span class="comment">// yun yue（成功交换！）</span></span><br></pre></td></tr></table></figure><p>其余的 <code>...</code></p><p>通常，如果数组比左边的列表长，那么“其余”的数组项会被省略。如果我们还想收集其余的数组项 —— 我们可以使用三个点 <code>&quot;...&quot;</code> 来再加一个参数以获取其余数组项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [name1, name2, ...rest] = [</span><br><span class="line">  <span class="string">&#x27;Julius&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Caesar&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Consul&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;of the Roman Republic&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment">//  rest 就是剩下元素的数组集合</span></span><br></pre></td></tr></table></figure><p>我们也能使用<code>...</code>去快速浅拷贝或者赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldArr = [<span class="string">&#x27;yueyun&#x27;</span>, <span class="string">&#x27;meigumi&#x27;</span>, <span class="string">&#x27;kurumi&#x27;</span>, <span class="string">&#x27;explosion&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = [...oldArr]</span><br></pre></td></tr></table></figure><p>默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [name = <span class="string">&#x27;yueyun&#x27;</span>, age = <span class="number">18</span>] = [<span class="string">&#x27;yueyun2&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// yueyun</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 18 而不是undefined</span></span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>解构赋值同样适用于对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本情况是</span></span><br><span class="line"><span class="keyword">const</span> &#123; v1, v2 &#125; = &#123; <span class="attr">v1</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">v2</span>: <span class="string">&#x27;...&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="title class_">Dom</span>: <span class="string">&#x27;Nav&#x27;</span>,</span><br><span class="line">  <span class="title class_">Height</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="title class_">Dom</span>, <span class="title class_">Height</span>, <span class="title class_">Width</span> &#125; = options</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dom</span>, <span class="title class_">Height</span>, <span class="title class_">Width</span>)</span><br></pre></td></tr></table></figure><p>属性 <code>options.title</code>、<code>options.width</code> 和 <code>options.height</code> 值被赋给了对应的变量。<strong>变量的顺序并不重要</strong></p><p>可以取别名映射 也可以默认赋值 也可以使用 … 去解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Menu&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">width</span>: w = <span class="number">100</span>, <span class="attr">height</span>: h = <span class="number">200</span>, title &#125; = options</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(title) <span class="comment">// Menu</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w) <span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>注意使用声明 (javascript 代码块)</p></div><h3 id="嵌套解构"><a href="#嵌套解构" class="headerlink" title="嵌套解构"></a>嵌套解构</h3><p>建议不要使用捏 会让简单的变得很烦</p><h3 id="智能函数参数"><a href="#智能函数参数" class="headerlink" title="智能函数参数"></a>智能函数参数</h3><p>有这样的场景 一个函数需要接受很多参数 而且大部分参数都是可选的<br>下面是很糟糕的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showMenu</span>(<span class="params">title = <span class="string">&#x27;Untitled&#x27;</span>, width = <span class="number">200</span>, height = <span class="number">100</span>, items = []</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际开发中，记忆如此多的参数的位置是一个很大的负担。通常集成开发环境（IDE）会尽力帮助我们，特别是当代码有良好的文档注释的时候，但是…… 另一个问题就是，在大部分的参数只需采用默认值的情况下，调用这个函数时会需要写大量的 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在采用默认值就可以的位置设置 undefined</span></span><br><span class="line"><span class="title function_">showMenu</span>(<span class="string">&#x27;My Menu&#x27;</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, [<span class="string">&#x27;Item1&#x27;</span>, <span class="string">&#x27;Item2&#x27;</span>])</span><br></pre></td></tr></table></figure><p>这太难看了。而且，当我们处理更多参数的时候可读性会变得很差。</p><p>解构赋值可以解决这些问题。我们可以用一个对象来传递所有参数，而函数负责把这个对象解构成各个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们传递一个对象给函数</span></span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;My menu&#x27;</span>,</span><br><span class="line">  <span class="attr">items</span>: [<span class="string">&#x27;Item1&#x27;</span>, <span class="string">&#x27;Item2&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ……然后函数马上把对象解构成变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMenu</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  title = <span class="string">&#x27;Untitled&#x27;</span>,</span></span><br><span class="line"><span class="params">  width = <span class="number">200</span>,</span></span><br><span class="line"><span class="params">  height = <span class="number">100</span>,</span></span><br><span class="line"><span class="params">  items = []</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// title, items – 提取于 options，</span></span><br><span class="line">  <span class="comment">// width, height – 使用默认值</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;width&#125;</span> <span class="subst">$&#123;height&#125;</span>`</span>) <span class="comment">// My Menu 200 100</span></span><br><span class="line">  <span class="title function_">alert</span>(items) <span class="comment">// Item1, Item2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">showMenu</span>(options)</span><br></pre></td></tr></table></figure><p>我们也可以使用带有嵌套对象和冒号映射的更加复杂的解构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;My menu&#x27;</span>,</span><br><span class="line">  <span class="attr">items</span>: [<span class="string">&#x27;Item1&#x27;</span>, <span class="string">&#x27;Item2&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMenu</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  title = <span class="string">&#x27;Untitled&#x27;</span>,</span></span><br><span class="line"><span class="params">  width: w = <span class="number">100</span>, // width goes to w</span></span><br><span class="line"><span class="params">  height: h = <span class="number">200</span>, // height goes to h</span></span><br><span class="line"><span class="params">  items: [item1, item2] // items first element goes to item1, second to item2</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;w&#125;</span> <span class="subst">$&#123;h&#125;</span>`</span>) <span class="comment">// My Menu 100 200</span></span><br><span class="line">  <span class="title function_">alert</span>(item1) <span class="comment">// Item1</span></span><br><span class="line">  <span class="title function_">alert</span>(item2) <span class="comment">// Item2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">showMenu</span>(options)</span><br></pre></td></tr></table></figure><p>完整语法和解构赋值是一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  incomingProperty: varName = defaultValue</span></span><br><span class="line"><span class="params">  ...</span></span><br><span class="line"><span class="params">&#125;</span>)</span><br></pre></td></tr></table></figure><p>我们可以通过指定空对象 <code>&#123;&#125;</code> 为整个参数对象的默认值来解决这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showMenu</span>(<span class="params">&#123; title = <span class="string">&#x27;Menu&#x27;</span>, width = <span class="number">100</span>, height = <span class="number">200</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;title&#125;</span> <span class="subst">$&#123;width&#125;</span> <span class="subst">$&#123;height&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">showMenu</span>() <span class="comment">// Menu 100 200</span></span><br></pre></td></tr></table></figure><h2 id="JSON-方法-toJSON"><a href="#JSON-方法-toJSON" class="headerlink" title="JSON 方法 toJSON"></a>JSON 方法 toJSON</h2><p>javascript 的一些数据结构是属于独有的 当传输网络数据或者在日志输出的时候需要传输数据</p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h3><p><a href="https://en.wikipedia.org/wiki/JSON">JSON</a>（JavaScript Object Notation）是表示值和对象的通用格式。在 <a href="https://tools.ietf.org/html/rfc4627">RFC 4627</a> 标准中有对其的描述。最初它是为 JavaScript 而创建的，但许多其他编程语言也有用于处理它的库。因此，当客户端使用 JavaScript 而服务器端是使用 Ruby&#x2F;PHP&#x2F;Java 等语言编写的时，使用 JSON 可以很容易地进行数据交换。</p><p>JavaScript 提供了如下方法：</p><ul><li><code>JSON.stringify</code> 将对象转换成<code>JSON</code></li><li><code>JSON.parse</code> 将 JSON 转换成对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">isAdmin</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">courses</span>: [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;js&#x27;</span>],</span><br><span class="line">  <span class="attr">spouse</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(student)</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> json) <span class="comment">// we&#x27;ve got a string!</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(json)</span><br><span class="line"><span class="comment">/* JSON 编码的对象：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;name&quot;: &quot;John&quot;,</span></span><br><span class="line"><span class="comment">  &quot;age&quot;: 30,</span></span><br><span class="line"><span class="comment">  &quot;isAdmin&quot;: false,</span></span><br><span class="line"><span class="comment">  &quot;courses&quot;: [&quot;html&quot;, &quot;css&quot;, &quot;js&quot;],</span></span><br><span class="line"><span class="comment">  &quot;spouse&quot;: null</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>方法<code>JSON.stingify(stduent)</code>接受对象并将其转换成字符串</p><p>得到的<code>JSON</code>字符串是一个被称之为<strong>JSON 编码（JSON-encoded）或 序列化 或 字符串化 或 编组化的对象</strong><br><code>JSON.stringify</code> 也可以应用于原始（primitive）数据类型。</p><p>JSON 支持的数据类型：</p><ul><li>Objects <code>&#123; ... &#125;</code></li><li>Arrays <code>[ ... ]</code></li><li>Primitives：<ul><li>strings，</li><li>numbers，</li><li>boolean values <code>true/false</code>，</li><li><code>null</code></li></ul></li></ul><p>JSON 是语言无关的纯数据规范，因此一些特定于 JavaScript 的对象属性会被 <code>JSON.stringify</code> 跳过。即:</p><ul><li>函数属性（方法）。</li><li>Symbol 类型的键和值。</li><li>存储 <code>undefined</code> 的属性。</li></ul><p>支持嵌套对象转换 但是不能循环引用<br><code>JSON.stringify</code>的完整语法是<br><code>let json = JSON.stringify(value,replacer, space)</code><br>value:要编码的值、replacer:要编码属性数组活映射函数、space:用于美化输出的空格数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> room = &#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> meetup = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Conference&#x27;</span>,</span><br><span class="line">  <span class="attr">participants</span>: [&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;],</span><br><span class="line">  <span class="attr">place</span>: room <span class="comment">// meetup 引用了 room</span></span><br><span class="line">&#125;</span><br><span class="line">room.<span class="property">occupiedBy</span> = meetup <span class="comment">// room 引用了 meetup</span></span><br><span class="line"><span class="comment">// console.log(meetup)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(meetup, <span class="keyword">function</span> <span class="title function_">replacer</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>, type: <span class="subst">$&#123;<span class="keyword">typeof</span> value&#125;</span>`</span>)</span><br><span class="line">    <span class="comment">// return key != &#x27;&#x27; &amp;&amp; value == meetup ? undefined : value</span></span><br><span class="line">    <span class="keyword">return</span> key == <span class="string">&#x27;occupiedBy&#x27;</span> ? <span class="literal">undefined</span> : value</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  0: [object Object], type: object</span></span><br><span class="line"><span class="comment">  name: John, type: string</span></span><br><span class="line"><span class="comment">  1: [object Object], type: object</span></span><br><span class="line"><span class="comment">  name: Alice, type: string</span></span><br><span class="line"><span class="comment">  place: [object Object], type: object</span></span><br><span class="line"><span class="comment">  number: 23, type: number</span></span><br><span class="line"><span class="comment">  occupiedBy: [object Object], type: object</span></span><br><span class="line"><span class="comment">  &#123;&quot;title&quot;:&quot;Conference&quot;,&quot;participants&quot;:[&#123;&quot;name&quot;:&quot;John&quot;&#125;,&#123;&quot;name&quot;:&quot;Alice&quot;&#125;],&quot;place&quot;:&#123;&quot;number&quot;:23&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><p>要解码 JSON 字符串 需要使用<code>JSON.parse</code>方法<br><code>let value = JSON.parse(str,reviver)</code><br>str:要解析的 JSON 字符串、reviver:可选的函数，将为每个（键，值）对调用此函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串化数组</span></span><br><span class="line"><span class="keyword">let</span> numbers = <span class="string">&#x27;[0, 1, 2, 3]&#x27;</span></span><br><span class="line">numbers = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(numbers)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers[<span class="number">1</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> userData =</span><br><span class="line">  <span class="string">&#x27;&#123; &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 35, &quot;isAdmin&quot;: false, &quot;friends&quot;: [0,1,2,3] &#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(userData)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">friends</span>[<span class="number">1</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 反序列化的时候如果遇到特殊对象会调用reviver函数</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;&quot;title&quot;:&quot;Conference&quot;,&quot;date&quot;:&quot;2017-11-30T12:00:00.000Z&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> meetup = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str, <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="string">&#x27;date&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(value)</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(meetup.<span class="property">date</span>.<span class="title function_">getDate</span>()) <span class="comment">// 现在正常运行了！</span></span><br></pre></td></tr></table></figure><details class="folding-tag" ><summary> 总结 </summary>              <div class='content'>              <ul><li>JSON 是一种数据格式，具有自己的独立标准和大多数编程语言的库。</li><li>JSON 支持 object，array，string，number，boolean 和 null。</li><li>JavaScript 提供序列化（serialize）成 JSON 的方法 JSON.stringify 和解析 JSON 的方法 JSON.parse。</li><li>这两种方法都支持用于智能读&#x2F;写的转换函数。</li><li>如果一个对象具有 toJSON，那么它会被 JSON.stringify 调用。</li></ul>              </div>            </details><h1 id="规范和调试"><a href="#规范和调试" class="headerlink" title="规范和调试"></a>规范和调试</h1><h1 id="高级内容"><a href="#高级内容" class="headerlink" title="高级内容"></a>高级内容</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>在函数解决任务时 调用了<strong>自身</strong>就是所谓的递归</p><p>比如想在要完成一个函数<code>pow(x, n)</code>可以计算<code>x</code>的<code>n</code>次方 有两种解法</p><ol><li><p>迭代思路 使用<code>for</code>循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result *= x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归思路：简化任务 调用自身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="title function_">pow</span>(x, n - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>当<code>pow(x, n)被调用时 执行分为下面两个分支：</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              <span class="keyword">if</span> n==<span class="number">1</span>  = x</span><br><span class="line">             /</span><br><span class="line"><span class="title function_">pow</span>(x, n) =</span><br><span class="line">             \</span><br><span class="line">              <span class="keyword">else</span>     = x * <span class="title function_">pow</span>(x, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>当 <code>n===1</code>时 叫做<strong>基础</strong>递归 因为会产生明显的结果</li><li>可以使用 <code>x * pow(x, n - 1)</code>表示<code>pow(x, n)</code> 这就<strong>递归步骤</strong>将人物转化为更简单的行为和更简单的同类任务调用 （带有更小的 <code>n</code> 的 <code>pow</code> 运算）。接下来的步骤将其进一步简化，直到 <code>n</code> 达到 <code>1</code>。</li></ul><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/01.png"></p><p>递归将函数调用简化成为一个更简单的函数调用 然后在将其简化为一个更加简单的函数 以此类推 直到结果变得显而易见</p><p>最大的嵌套调用次数(包括首次)被称为<strong>递归深度</strong> 在上面这个例子正好为 n</p><h4 id="执行上下文和堆栈"><a href="#执行上下文和堆栈" class="headerlink" title="执行上下文和堆栈"></a><strong>执行上下文和堆栈</strong></h4><p>递归调用的工作 函数底层的工作原理</p><p>有关正在运行的函数的执行过程的相关信息被存储在其执行上下文中</p><p>执行上下文是一个内部据结构 他包含有关函数执行时的详细细节：</p><ul><li>当前控制流所在的位置 (作用域链)：每个执行上下文都有一个与之相关联的作用域链。作用域链是一个对象列表，它定义了变量和函数的查找规则，决定了代码在哪些区域是有效的。当代码在一个执行上下文中查找变量时，如果在当前上下文的变量对象中找不到，它会沿着作用域链向上查找。</li><li>当前的变量：包含函数的参数、局部变量、函数声明、变量声明 在函数执行的初始阶段 函数所有的参数值、函数内部的函数声明以及变量声明都会被添加到变量对象中。</li><li><code>this</code>的值：表示调用上下文，依赖于函数的调用方式 全局执行上下文 函数执行上下文(如何被调用)</li><li>及内部的一些细节</li></ul><p>一个函数调用仅具有一个与其关联的执行上下文</p><p>当一个函数进行嵌套调用的时候 将发生</p><ul><li>当前函数被暂停</li><li>与它关联的执行上下文被一个叫做<code>执行上下文堆栈</code>而特殊数据结构保存</li><li>执行嵌套调用</li><li>嵌套调用结束后 从堆栈中恢复之前的执行上下文 并从停止的位置恢复外部函数</li></ul><p>比如现在来分析上面 <code>pow(2,3)</code> 这个例子 使用抽象的来表示一下执行流程</p><ol><li><p>在调用<code>pow(2, 3)</code>而开始，执行上下文(context)会储存变量：<code>x = 2, n = 3</code> 执行流程在函数而第一行我们将其定义为<br><strong><code>Context： &#123; x:2, n:3, at line 1 &#125;</code> call pow(2, 3)</strong><br>当函数开始执行的时 进入第二条分支 变量相同但是位置改变了<br>**<code>Context： &#123; x:2, n:3, at line 5 &#125;</code> call pow(2, 3) **</p><p>执行到计算 <code>x * pow(x, n - 1)</code> 需要带入新的参数新的<code>pow</code>子调用<code>pow(2,2)</code></p></li><li><p>为了执行嵌套调用，JavaScript 会在 <strong>执行上下文堆栈</strong> 中记住当前的执行上下文。</p><p>这里我们调用相同的函数 <code>pow</code>，但这绝对没问题。所有函数的处理都是一样的：</p><ol><li>当前上下文被“记录”在堆栈的顶部。</li><li>为子调用创建新的上下文。</li><li>当子调用结束后 —— 前一个上下文被从堆栈中弹出，并继续执行。</li></ol><p>下面是进入子调用<code>pow(2, 2)</code>时的上下文堆栈：</p><p>**<code>Context： &#123; x:2, n:2, at line 5 &#125;</code> call pow(2, 2) **<br>**<code>Context： &#123; x:2, n:3, at line 5 &#125;</code> call pow(2, 3) **<br>当我们完成了子调用后 很容易恢复一个上下文 因为它既保留了变量 也保留了当时代码的确切位置</p></li><li><p>执行<code>pow(2, 1)</code> 重复过程 现在的调用堆栈<br><code>Context： &#123; x:2, n:1, at line 5 &#125;</code> call pow(2, 1)</p><p>**<code>Context： &#123; x:2, n:2, at line 5 &#125;</code> call pow(2, 2) **<br>**<code>Context： &#123; x:2, n:3, at line 5 &#125;</code> call pow(2, 3) **</p></li><li><p>出口 即使调用堆栈 出栈口</p></li></ol><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/02.png"></p><p>递归可以更加简单明了优雅的描述出一段代码的逻辑 虽然性能上可能不如循环但是在一些复杂的数据结构下面使用递归往往更好 (比如 树 链表等)</p><h3 id="Rest-参数和-Spread-语法"><a href="#Rest-参数和-Spread-语法" class="headerlink" title="Rest 参数和 Spread 语法"></a>Rest 参数和 Spread 语法</h3><p>简单来说就是</p><p><code>function sum (...args)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cosnt arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> arr1 = [...arr2,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><h3 id="变量作用域和闭包"><a href="#变量作用域和闭包" class="headerlink" title="变量作用域和闭包"></a>变量作用域和闭包</h3><p><code>JavaScript</code>是非常面向对象和函数的语言 会有很大的自由度和写法 我们可以随时创建函数可以将函数作为参数传递 在任意不同的代码位置调用 可以访问外部的环境</p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>如果在<code>&#123; ... &#125;</code>内声明变量 那么这个变量并不会向外传递 只能在内部访问该代码块内可见</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2a&#x27;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"><span class="comment">// 2a 20</span></span><br><span class="line"><span class="comment">// a 10</span></span><br></pre></td></tr></table></figure><p>在<code>if</code>, <code>for</code>, <code>while</code> 中 <code>&#123;...&#125;</code>中声明的变量也仅在内部可见</p><h4 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h4><p>如果一个函数在另外一个函数中创建的 被称为高级函数或者嵌套函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHiBye</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="comment">// 辅助嵌套函数使用如下</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + <span class="title function_">getFullName</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Bye, &#x27;</span> + <span class="title function_">getFullName</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h4><p><strong>变量:</strong><br> 在 Javascript 中每个 运行的函数 代码块 <code>&#123; ... &#125;</code> 以及整个脚本都有一个被称为词法**环境(Lexical Enviroment)**的内部的关联对象</p><p>该词法环境对象由两部分组成:</p><ul><li>环境记录(Enviroment Record) 一个存储所有局部变量作为其属性 (包括一些其他的信息 例如<code>this</code>的值)的对象</li><li>对<strong>外部词法环境</strong>的引用 与外部代码相关联</li></ul><p>一个变量只是**”环境记录”**这个特殊的内部对象的一个属性 获取或修改变量一味着获取或修改词法环境的一个属性 “获取或修改变量” 意味着 获取或修改词法环境的一个属性</p><p>比如下面的一个最简单的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phrase = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(phrase)</span><br></pre></td></tr></table></figure><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/03.png"></p><p>这个就是所谓的与整个脚本相关联的<strong>全局词法环境</strong></p><p>在上面的过程中 矩形区域表示环境记录(变量存储) 箭头表示外部引用 全局词法环境没有外部引用 所以箭头指向了<code>null</code></p><p>随着代码的开始继续的执行 词法环境发生了变化<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/04.png"></p><p>上面的图片中右侧演示了执行过程中词法环境的变化:</p><ol><li>当脚本开始运行 词法环境先填充了所有声明的变量<br>在最初 它们处于<strong>未初始化的状态</strong>这是一种特殊的内部状态 这意味着引擎知道这个变量存在但是在 let 声明之前 不能引用它 几乎就跟不存在一样</li><li><code>let phrase</code> 定义出现 尚未被赋值 因此值是<strong>undefined</strong></li><li><code>phrase</code>被赋予了一个值</li><li><code>phrase</code>被修改</li></ol><p>实际上执行的过程是</p><ul><li>变量是特殊内部对象的属性 与当前正在执行的**(代码)块&#x2F;函数&#x2F;脚本** 有关</li><li>操作变量实际上是操作该对象的属性</li></ul><div class="note info simple"><p>词法环境是一个规范的对象 是存在于<code>语言规范</code>的理论层面 用于描述是如何工作的 我们无法在代码块中获取该对象并直接进行操作</p></div><p><strong>函数声明:</strong></p><p>一个函数其实就是一个值 就像变量一样</p><p><strong>不同就在于 如果是函数声明的初始化会被立刻完成</strong></p><p>当创建了一个词法环境时,函数会立即变成即用型函数( 并不像 let 那样到声明处才可以去使用)<br>例如 下面是添加一个函数时全局词法环境的初始状态</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/05.png"></p><div class="note info simple"><p>这种行为仅适用于函数声明 而不适用于匿名函数的声明 比如<code>let sayHello = function () {...}</code> 或者 <code>let sayhello = () =&gt; {...}</code></p></div><p><strong>内部和外部的词法环境</strong><br>当一个函数运行时 在调用刚开始 会自动创建一个新的词法环境以存储这个调用的局部变量和参数 例如对于<code>say(&quot;yueyun&quot;)</code> 的执行流程如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phrase = <span class="string">&#x27; Hello &#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  cosole.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;phrase&#125;</span>, <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>(<span class="string">&#x27;yueyun&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/06.png"></p><p>在函数调用期间我们拥有两个词法环境 内部一个(用于函数调用) 和外部一个(全局)：</p><ul><li>内部词法环境与<code>say</code>的当前执行相对应 它具有单独的属性：<code>name</code> 函数的参数 调用的是<code>say(&quot;yueyun&quot;)</code>所以<code>name</code>的值为<code>yueyun</code></li><li>外部词法环境是全局词法环境 它具有<code>phrase</code>变量和函数本身</li></ul><p>内部词法环境引用了<code>outer</code></p><p><strong>当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。</strong></p><p><strong>返回函数：</strong></p><p>比如下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> count++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="title function_">makeCounter</span>()</span><br></pre></td></tr></table></figure><p>在每次<code>makeCounter()</code>调用的开始，都会创建一个新的词法环境对象，以存储该<code>makeCounter</code>运行时的变量</p><p>因此，我们有两层嵌套的词法环境</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/07.png"></p><p>不一样的是 在执行 <code>makeCounter()</code>的过程中创建了一个仅占一行的嵌套函数 <code>return count++</code> 我们并没有运行它 只是创建了这么一个函数</p><p>所有的函数在创建时都会记住它的词法环境 从技术上来说 所有的函数都有名为<code>[[Environment]]</code>的隐藏属性 该属性保存了对创建对象该函数的词法环境的应引用<br><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/08.png"></p><p>因此 counter.[[Env]] 有对 {<code>count: 0</code>}词法环境的引用 这就是函数记住它创建于何处的方式与调用无关 <code>[[Environment]]</code> 引用在函数创建时被设置并永久保存。</p><p>稍后调用<code>counter()</code>时，会自动创建一个新的词法环境 并且其外部词法环境引用获取于<code>counter.[[Environment]]</code></p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/09.png"></p><p>现在，当 <code>counter()</code> 中的代码查找 <code>count</code> 变量时，它首先搜索自己的词法环境（为空，因为那里没有局部变量），然后是外部 <code>makeCounter()</code> 的词法环境，并且在哪里找到就在哪里修改。</p><p><strong>在变量所在的词法环境中更新变量</strong></p><p>如果我们调用 <code>counter()</code> 多次，<code>count</code> 变量将在同一位置增加到 <code>2</code>，<code>3</code> 等。</p><div class="note info simple"><p>闭包是一个编程术语 是指一个函数可以记住其他外部变量并可以访问这些变量 在某些编程语言中 会有不同的差异 但在<strong>Javascript</strong>中 所有的函数天生都是闭包的 即<code>JavaScirpt</code>中的函数会自动通过隐藏<code>[[Environment]]</code>属性记住创建它们的位置 所以它们都可以访问外部变量</p></div><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>通常，函数调用完成后，会将词法环境和其中的所有变量从内存中删除。因为现在没有任何对它们的引用了。与 JavaScript 中的任何其他对象一样，词法环境仅在可达时才会被保留在内存中。</p><p>但是 如果有一个嵌套函数在函数结束后的语句任然可达 则它将具有引用词法环境的 <code>[[Environment]]</code> 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">f</span>() <span class="comment">// g.[[Environment]] 存储了对相应 f() 调用的词法环境的引用</span></span><br></pre></td></tr></table></figure><p>如果多次调用 <code>f()</code>，并且返回的函数被保存，那么所有相应的词法环境对象也会保留在内存中。下面代码中有三个这样的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组中的 3 个函数，每个都与来自对应的 f() 的词法环境相关联</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="title function_">f</span>(), <span class="title function_">f</span>(), <span class="title function_">f</span>()]</span><br></pre></td></tr></table></figure><p>当词法环境对象变得不可达时，它就会死去（就像其他任何对象一样）。换句话说，它仅在至少有一个嵌套函数引用它时才存在。</p><p>在下面的代码中，嵌套函数被删除后，其封闭的词法环境（以及其中的 <code>value</code>）也会被从内存中删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">f</span>() <span class="comment">// 当 g 函数存在时，该值会被保留在内存中</span></span><br><span class="line"></span><br><span class="line">g = <span class="literal">null</span> <span class="comment">// ……现在内存被清理了</span></span><br></pre></td></tr></table></figure><h3 id="全局对象和函数对象"><a href="#全局对象和函数对象" class="headerlink" title="全局对象和函数对象"></a>全局对象和函数对象</h3><h4 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h4><p>全局对象提供可以在任何地方都使用的变量和函数 默认的情况下这些全局变量内建于语言或环境中</p><p>在浏览器环境中 全局对象是<code>window</code> 对于<code>nodejs</code>运行时环境 全局对象是<code>global</code></p><p>在最新的规定中<code>globalThis</code> 被作为全局对象的标准名称加入到了 JavaScript 中，所有环境都应该支持该名称。所有主流浏览器都支持它。</p><p>全局对象的所有属性都可以直接被访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在浏览器中 使用<code>var</code>声明的全局函数和变量都会成为全局属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gVar = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">gVar</span>)</span><br></pre></td></tr></table></figure><p>请不要这样去使用！这种行为是出于兼容性而存在的。现代脚本使用 <a href="https://zh.javascript.info/modules">JavaScript modules</a> 所以不会发生这种事情。</p><p>如果我们使用 <code>let</code>，就不会发生这种情况</p><p>如果一个值非常重要你想让它在全局的范围中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将当前用户信息全局化，以允许所有脚本访问它</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">currentUser</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码中的另一个位置</span></span><br><span class="line"><span class="title function_">alert</span>(currentUser.<span class="property">name</span>) <span class="comment">// yueyun</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者，如果我们有一个名为 &quot;currentUser&quot; 的局部变量</span></span><br><span class="line"><span class="comment">// 从 window 显式地获取它（这是安全的！）</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">currentUser</span>.<span class="property">name</span>) <span class="comment">// yueyun</span></span><br></pre></td></tr></table></figure><h4 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h4><p>在 JavaScript 中函数也是一个值，函数值的类型是 <code>object</code></p><p>可以把函数理解成为一个可调用的<strong>行为对象(action object)</strong> 同样可以传递属性和引用传递</p><p>比如属性 name</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi, sayHi.<span class="property">name</span>) <span class="comment">//[Function: sayHi] sayHi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***********************************************************</span></span><br><span class="line"><span class="keyword">let</span> sayHi = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi.<span class="property">name</span>) <span class="comment">// sayHi（有名字！）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***********************************************************</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">sayHi = <span class="keyword">function</span> () &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(sayHi.<span class="property">name</span>) <span class="comment">// sayHi（生效了！）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><p>规范中把这种特性叫做「上下文命名」。如果函数自己没有提供，那么在赋值中，会根据上下文来推测一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">sayBye</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">sayHi</span>.<span class="property">name</span>) <span class="comment">// sayHi</span></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">sayBye</span>.<span class="property">name</span>) <span class="comment">// sayBye</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数是在数组中创建的</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(arr[<span class="number">0</span>].<span class="property">name</span>) <span class="comment">// &lt;空字符串&gt;</span></span><br><span class="line"><span class="comment">// 引擎无法设置正确的名字，所以没有值</span></span><br></pre></td></tr></table></figure><p>属性 length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">a, b</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">many</span>(<span class="params">a, b, ...more</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(f1.<span class="property">length</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">alert</span>(f2.<span class="property">length</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">alert</span>(many.<span class="property">length</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>属性 <code>length</code> 有时在操作其它函数的函数中用于做 <strong>内省&#x2F;运行时检查（introspection）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ask</span>(<span class="params">question, ...handlers</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> isYes = <span class="title function_">confirm</span>(question)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> handler <span class="keyword">of</span> handlers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (handler.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isYes) <span class="title function_">handler</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">handler</span>(isYes)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于肯定的回答，两个 handler 都会被调用</span></span><br><span class="line"><span class="comment">// 对于否定的回答，只有第二个 handler 被调用</span></span><br><span class="line"><span class="title function_">ask</span>(</span><br><span class="line">  <span class="string">&#x27;Question?&#x27;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&#x27;You said yes&#x27;</span>),</span><br><span class="line">  <span class="function">(<span class="params">result</span>) =&gt;</span> <span class="title function_">alert</span>(result)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>自定义属性</p><p>我们可以在函数中添加<code>counter</code>属性记录被调用了多少次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">  sayHi.<span class="property">counter</span>++</span><br><span class="line">&#125;</span><br><span class="line">sayHi.<span class="property">counter</span> = <span class="number">0</span> <span class="comment">// 初始值</span></span><br><span class="line"><span class="title function_">sayHi</span>() <span class="comment">// Hi</span></span><br><span class="line"><span class="title function_">sayHi</span>() <span class="comment">// Hi</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">`Called <span class="subst">$&#123;sayHi.counter&#125;</span> times`</span>) <span class="comment">// Called 2 times</span></span><br></pre></td></tr></table></figure><div class="note warning simple"><p>属性并不是变量，被赋值给函数的属性，比如 <code>sayHi.counter = 0</code>，<strong>不会</strong> 在函数内定义一个局部变量 <code>counter</code>。换句话说，属性 <code>counter</code> 和变量 <code>let counter</code> 是毫不相关的两个东西。</p></div><p>函数属性有时会用来替代闭包 如下面修改之前写过的闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> counter.<span class="property">count</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  counter.<span class="property">count</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> counter</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="title function_">makeCounter</span>()</span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">counter</span>()) <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">counter</span>()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>即<code>count</code>被直接存储在函数里，而不是它外部的词法环境</p><p>这种写法一般不太常见 因为可以在外部去修改它的属性 从而导致代码很混乱</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> counter.<span class="property">count</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  counter.<span class="property">count</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="title function_">makeCounter</span>()</span><br><span class="line"><span class="comment">// 可以任意的修改</span></span><br><span class="line">counter.<span class="property">count</span> = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h4 id="命名函数的表达式"><a href="#命名函数的表达式" class="headerlink" title="命名函数的表达式"></a>命名函数的表达式</h4><p>命名函数表达式(NFE, Named Function Expression) 指带有名字的函数表达式术语</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">who</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;who&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它仍然是一个函数表达式。在 <code>function</code> 后面加一个名字 <code>&quot;func&quot;</code> 没有使它成为一个函数声明，因为它仍然是作为赋值表达式中的一部分被创建的。</p><p>添加这个名字当然也没有打破任何东西。函数依然可以通过 <code>sayHi()</code> 来调用：</p><p>关于添加<code>func</code>的两个特殊的地方</p><ul><li>允许函数在内部引用自己</li><li>它在函数外是引用不到的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">who</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (who) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Hello, <span class="subst">$&#123;who&#125;</span>`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">func</span>(<span class="string">&#x27;Guest&#x27;</span>) <span class="comment">// 使用 func 再次调用函数自身</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>() <span class="comment">// Hello, Guest</span></span><br><span class="line"><span class="comment">// 但这不工作：</span></span><br><span class="line"><span class="title function_">func</span>() <span class="comment">// Error, func is not defined（在函数外不可见）</span></span><br></pre></td></tr></table></figure><p>同样不适用<code>sayHi()</code>去写递归 因为 <code>sayHi()</code>很容易就被外部污染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="keyword">function</span> (<span class="params">who</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (who) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;who&#125;</span>`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="string">&#x27;Guest&#x27;</span>) <span class="comment">// Error: sayHi is not a function</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> welcome = sayHi</span><br><span class="line">sayHi = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">welcome</span>() <span class="comment">// Error，嵌套调用 sayHi 不再有效！</span></span><br></pre></td></tr></table></figure><p>当我们需要一个可靠的内部名时，这就成为了你把函数声明重写成函数表达式的理由了。</p><h3 id="调度：setTimeout-和-setInterval"><a href="#调度：setTimeout-和-setInterval" class="headerlink" title="调度：setTimeout 和 setInterval"></a>调度：setTimeout 和 setInterval</h3><p>当我们并不想立刻执行一个函数，而是等待特定一段时间之后再执行。这就是所谓的“计划调用（scheduling a call）”。</p><p>目前的实现方式有下面两种方式实现</p><ul><li><code>setTimeout</code>: 允许我们将函数推迟到一段时间间隔之后再执行</li><li><code>setInterval</code>: 允许我们重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数。</li></ul><p><strong>setTimeout</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="keyword">function</span> (<span class="params">who</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;who&#125;</span>! <span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="title function_">sayHi</span>(<span class="string">&#x27;yueyun&#x27;</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><code>setTimeout</code> 期望得到一个对函数的引用</p><p><strong>clearTimeout 来取消调度</strong></p><p><code>setTimeout</code> 在调用时会返回一个“定时器标识符（timer identifier）”，在我们的例子中是 <code>timerId</code>，我们可以使用它来取消执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(...);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId);</span><br></pre></td></tr></table></figure><p><strong>setInterval</strong></p><p><code>setInterval</code> 方法和 <code>setTimeout</code> 的语法相同：不过与 <code>setTimeout</code> 只执行一次不同，<code>setInterval</code> 是每间隔给定的时间周期性执行。</p><h3 id="装饰器模式和转发：Call-apply"><a href="#装饰器模式和转发：Call-apply" class="headerlink" title="装饰器模式和转发：Call&#x2F;apply"></a>装饰器模式和转发：Call&#x2F;apply</h3><p><strong>JavaScript</strong>在处理函数时提供了很高的灵活性，它们可以被传递 用作对象 下面将介绍它们之间的<code>转发(forward)</code>和<code>装饰(decorate)</code></p><h5 id="透明缓存"><a href="#透明缓存" class="headerlink" title="透明缓存"></a>透明缓存</h5><p>假设现在我们有一个 CPU 重负载的函数<code>slow(x)</code> 但是他纯函数 给定相同的参数总是会返回相同的结果 如果这个函数使用频繁 我们希望能记住这个缓存能记住 因此避免花费额外的时间 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">slow</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="comment">// big Clc</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cachingDecorator</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">get</span>(x) <span class="comment">// 从缓存中读取结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">func</span>(x)</span><br><span class="line">    cache.<span class="title function_">set</span>(x, result) <span class="comment">// 将结果记录下来</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">slow = <span class="title function_">cachingDecorator</span>(slow)</span><br><span class="line">consle.<span class="title function_">log</span>(<span class="title function_">slow</span>(<span class="number">1</span>)) <span class="comment">// 被缓存下 并返回结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Again&#x27;</span>, <span class="title function_">slow</span>(<span class="number">1</span>)) <span class="comment">//返回缓存记录的结果</span></span><br></pre></td></tr></table></figure><p>在上面的例子中 <code>cachingDecorator</code>是一个<strong>装饰器(decorator)</strong></p><p>这样我们可以为任何函数调用<code>cachingDecorator</code> 它将返回缓存包装器 这样别的函数需要这种特性就可以直接复用 还可以将缓存与主代码分开变得更加简单</p><p><code>cachingDecorator(func)</code> 的结果是一个“包装器”：<code>function(x)</code> 将 <code>func(x)</code> 的调用“包装”到缓存逻辑中 从外部代码来看，包装的 <code>slow</code> 函数执行的仍然是与之前相同的操作。它只是在其行为上添加了缓存功能。</p><p>使用分离的 <code>cachingDecorator</code> 而不是改变 <code>slow</code> 本身的代码有几个好处</p><ul><li><code>cachingDecorator</code> 是可重用的。我们可以将它应用于另一个函数。</li><li>缓存逻辑是独立的，它没有增加 <code>slow</code> 本身的复杂性（如果有的话）。</li><li>如果需要，我们可以组合多个装饰器（其他装饰器将遵循同样的逻辑）。</li></ul><h5 id="function-call-设定上下文"><a href="#function-call-设定上下文" class="headerlink" title="function.call 设定上下文"></a>function.call 设定上下文</h5><p>但是如果我们在对象中这样使用的话呢 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">slow</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="comment">// calc</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="variable language_">this</span>.<span class="title function_">someMethod</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cachingDecorator</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">get</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">func</span>(x) <span class="comment">// (*step*)</span></span><br><span class="line">    cache.<span class="title function_">set</span>(x, result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(worker.<span class="title function_">slow</span>(<span class="number">1</span>)) <span class="comment">// 原始方法有效</span></span><br><span class="line"></span><br><span class="line">worker.<span class="property">slow</span> = <span class="title function_">cachingDecorator</span>(worker.<span class="property">slow</span>) <span class="comment">// 现在对其进行缓存</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(worker.<span class="title function_">slow</span>(<span class="number">2</span>)) <span class="comment">// 报错！Error: Cannot read property &#x27;someMethod&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>错误在于试图访问<code>this.someMethod</code>失败了 原因是包装器将原始函数调用为 <code>(*step*)</code> 行中的 <code>func(x)</code>。但是这样调用得到的<code>this=undefined</code> 这是因为包装器将调用传递给原始方法 但是并没有上下文的<code>this</code></p><p>使用内建的函数方法<code>function.call(context,...args)</code>允许调用一个显示设置的<code>this</code>函数</p><p>例如，在下面的代码中，我们在不同对象的上下文中调用 <code>sayHi</code>：<code>sayHi.call(user)</code> 运行 <code>sayHi</code> 并提供了 <code>this=user</code>，然后下一行设置 <code>this=admin</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">&#x27;Admin&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 call 将不同的对象传递为 &quot;this&quot;</span></span><br><span class="line">sayHi.<span class="title function_">call</span>(user) <span class="comment">// John</span></span><br><span class="line">sayHi.<span class="title function_">call</span>(admin) <span class="comment">// Admin</span></span><br></pre></td></tr></table></figure><p>在我们的例子中，我们可以在包装器中使用 <code>call</code> 将上下文传递给原始函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">slow</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="comment">// calc</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="variable language_">this</span>.<span class="title function_">someMethod</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cachingDecorator</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">get</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = func.<span class="title function_">call</span>(<span class="variable language_">this</span>, x)</span><br><span class="line">    cache.<span class="title function_">set</span>(x, result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(worker.<span class="title function_">slow</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">worker.<span class="property">slow</span> = <span class="title function_">cachingDecorator</span>(worker.<span class="property">slow</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(worker.<span class="title function_">slow</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>现在一切工作正常 <code>this</code>的传递过程</p><ul><li>在经过装饰之后，<code>worker.slow</code> 现在是包装器 <code>function (x) &#123; ... &#125;</code>。</li><li>因此，当 <code>worker.slow(2)</code> 执行时，包装器将 <code>2</code> 作为参数，并且 <code>this=worker</code>（它是点符号 <code>.</code> 之前的对象）。</li><li>在包装器内部，假设结果尚未缓存，<code>func.call(this, x)</code> 将当前的 <code>this</code>（<code>=worker</code>）和当前的参数（<code>=2</code>）传递给原始方法。</li></ul><h5 id="传递多个参数"><a href="#传递多个参数" class="headerlink" title="传递多个参数"></a>传递多个参数</h5><p>记住参数组合(min,max)的结果</p><ul><li>实现一个新的类似于 map 的更通用的并且允许多个键的数据结构</li><li>使用嵌套的 map 去实现比如<code>map.get(min).get(max)</code>来获取 result</li><li>将两个值合并成一个 多为装饰器添加一个函数</li></ul><p>现在以第三种方法写出带多个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="title function_">slow</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> min + max</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cachingDecorator</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// **</span></span><br><span class="line">    <span class="keyword">let</span> key = <span class="title function_">hash</span>(args)</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">get</span>(key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = func.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args) <span class="comment">//***</span></span><br><span class="line">    cache.<span class="title function_">set</span>(key, result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这个包装器可以处理任意数量的参数了</p><ul><li>在 <code>(**)</code> 行中它调用 <code>hash</code> 来从 <code>arguments</code> 创建一个单独的键。这里我们使用一个简单的“连接”函数，将参数 <code>(3, 5)</code> 转换为键 <code>&quot;3,5&quot;</code>。更复杂的情况可能需要其他哈希函数。</li><li>然后 <code>(***)</code> 行使用 <code>func.call(this, ...arguments)</code> 将包装器获得的上下文和所有参数（不仅仅是第一个参数）传递给原始函数。</li></ul><h5 id="function-apply"><a href="#function-apply" class="headerlink" title="function.apply"></a>function.apply</h5><p><code>apply</code> 和 <code>call</code>的用法类似 区别就是 apply 希望接受的是一个参数列表而不是多个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,...args) === <span class="keyword">function</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args)</span><br></pre></td></tr></table></figure><h5 id="装饰器和属性函数"><a href="#装饰器和属性函数" class="headerlink" title="装饰器和属性函数"></a>装饰器和属性函数</h5><p>通常，用装饰的函数替换一个函数或一个方法是安全的，除了一件小东西。如果原始函数有属性，例如 <code>func.calledCount</code> 或其他，则装饰后的函数将不再提供这些属性。因为这是装饰器。因此，如果有人使用它们，那么就需要小心。</p><p>例如，在上面的示例中，如果 <code>slow</code> 函数具有任何属性，而 <code>cachingDecorator(slow)</code> 则是一个没有这些属性的包装器。</p><p>一些包装器可能会提供自己的属性。例如，装饰器会计算一个函数被调用了多少次以及花费了多少时间，并通过包装器属性公开（expose）这些信息。</p><p>存在一种创建装饰器的方法，该装饰器可保留对函数属性的访问权限，但这需要使用特殊的 <code>Proxy</code> 对象来包装函数。</p><h3 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h3><p>在将对象的方法作为回调进行传递 例如传递给<code>setTimeout</code>的时候 会存在一个常见的问题即是丢失<code>this</code></p><p>比如下面的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(user.<span class="property">sayHi</span>, <span class="number">1000</span>) <span class="comment">// 输出 Hello,undefined</span></span><br></pre></td></tr></table></figure><p>这是因为<code>setTimeout</code>获取到了函数<code>user.sayHi</code> 但是他和对象分开了 <code>this</code>丢失了</p><p>解决办法 1 用函数包括执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  user.<span class="title function_">sayHi</span>()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>这样即可以成功</p><p>但是这样又会存在 可能在定时器还在计时的过程中如果 <code>sayHi()</code> 函数发生变化 那么又会调用到错误的对象<code>this</code></p><p>解决办法 2 <strong>bind</strong><br><code>func.bind(context)</code>的结果是一个特殊的类似于函数的“外来对象”，它可以像函数一样被调用，并且透明地将调用传递给 <code>func</code> 并设定 <code>this=context</code>。</p><p>如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> funcUser = func.<span class="title function_">bind</span>(user)</span><br><span class="line"><span class="title function_">funcUser</span>() <span class="comment">// hello yueyun</span></span><br></pre></td></tr></table></figure><p>上面例子的解法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;yueyun&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span>!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="property">sayHi</span> = user.<span class="property">sayHi</span>.<span class="title function_">bind</span>(user)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(user.<span class="property">sayHi</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">user = &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Another user in setTimeout!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数不仅仅是编写简介代码的”捷径” 还具有非常特殊有用的特性</p><p>JavaScript 充满了我们需要编写在其他地方执行的小函数的情况</p><p>例如:</p><ul><li><code>arr.forEach(func)</code> 每个元素都执行<code>func</code></li><li><code>setTimeout(func)</code> 由内建调度器执行</li><li>….</li></ul><p>JavaScript 的精髓在于创建一个函数并将其传递到某个地方。</p><p>在这样的函数中，我们通常不想离开当前上下文。这就是箭头函数的应用场景</p><p><strong>箭头函数没有 this</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> group = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Our Group&#x27;</span>,</span><br><span class="line">  <span class="attr">students</span>: [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Pete&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="title function_">showList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">student</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">title</span> + <span class="string">&#x27;: &#x27;</span> + student))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.<span class="title function_">showList</span>()</span><br></pre></td></tr></table></figure><p>这里<code>forEach</code>中使用了箭头函数 其中的<code>this.title</code> 其实和外部方法<code>showList</code>完全一样</p><p>如果我们使用正常的函数 则会出现错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> group = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Our Group&#x27;</span>,</span><br><span class="line">  <span class="attr">students</span>: [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Pete&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="title function_">showList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">students</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">student</span>) &#123;</span><br><span class="line">      <span class="comment">// Error: Cannot read property &#x27;title&#x27; of undefined</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">title</span> + <span class="string">&#x27;: &#x27;</span> + student)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group.<span class="title function_">showList</span>()</span><br></pre></td></tr></table></figure><p>报错是因为 <code>forEach</code> 运行它里面的这个函数，但是这个函数的 <code>this</code> 为默认值 <code>this=undefined</code>，因此就出现了尝试访问 <code>undefined.title</code> 的情况。但箭头函数就没事，因为它们没有 <code>this</code>。</p><div class="note warning simple"><p>warning 不能对箭头函数进行<code>new</code>操作 不具有<code>this</code>自然就意味着箭头函数不能作为构造(constructor)器 </p></div><p><strong>箭头函数没有 arguments</strong></p><p>箭头函数也没有<code>arguments</code>变量</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="属性标志和属性描述符"><a href="#属性标志和属性描述符" class="headerlink" title="属性标志和属性描述符"></a>属性标志和属性描述符</h3><p>我们知道 对象可以存储属性到目前为止，属性对我们来说只是一个简单的“键值”对。但对象属性实际上是更灵活且更强大的东西。</p><h4 id="属性标志"><a href="#属性标志" class="headerlink" title="属性标志"></a>属性标志</h4><p>对象属性(properties) 是除了<code>value</code> 还有三个特殊的特性(attributes) 即标志</p><ul><li><code>writable</code> 如果是<code>true</code> 则值可以被修改 否则它是只可读的</li><li><code>enumerable</code> 如果是<code>true</code> 则值可以被枚举 否则不会被列出。</li><li><strong><code>configurable</code></strong> — 如果为 <code>true</code>，则此属性可以被删除，这些特性也可以被修改，否则不可以。</li></ul><p><code>Object.getOwnPropertyDescriptor</code>方法允许查询有关属性的<strong>完整</strong>信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(user, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(descriptor, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">/* 属性描述符：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;value&quot;: &quot;yueyun&quot;,</span></span><br><span class="line"><span class="comment">  &quot;writable&quot;: true,</span></span><br><span class="line"><span class="comment">  &quot;enumerable&quot;: true,</span></span><br><span class="line"><span class="comment">  &quot;configurable&quot;: true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>为了修改标志,我们可以使用<code>Object.defineProperty</code></p><p>使用的语法是<code>Object.defineProperty(obj,propertyName,descriptor)</code></p><p><code>obj</code>,<code>propertyName</code> 要应用描述符的对象及其属性 <code>descriptor</code>要应用的属性描述符对象</p><p>如果该属性存在，<code>defineProperty</code> 会更新其标志。否则，它会使用给定的值和标志创建属性；在这种情况下，如果没有提供标志，则会假定它是 <code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(user, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;yueyun&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(user, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(descriptor, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;value&quot;: &quot;John&quot;,</span></span><br><span class="line"><span class="comment">  &quot;writable&quot;: false,</span></span><br><span class="line"><span class="comment">  &quot;enumerable&quot;: false,</span></span><br><span class="line"><span class="comment">  &quot;configurable&quot;: false</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>将它与上面的“以常用方式创建的” <code>user.name</code> 进行比较：现在所有标志都为 <code>false</code>。如果这不是我们想要的，那么我们最好在 <code>descriptor</code> 中将它们设置为 <code>true</code>。</p><p>可以设置属性为: <strong>只读 不可枚举 不可配置</strong></p><p><code>Object.defineProperties</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(user, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123; <span class="attr">value</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="attr">surname</span>: &#123; <span class="attr">value</span>: <span class="string">&#x27;Smith&#x27;</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="设定一个全局的密封对象"><a href="#设定一个全局的密封对象" class="headerlink" title="设定一个全局的密封对象"></a>设定一个全局的密封对象</h4><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions">Object.preventExtensions(obj)</a></p><p>禁止向对象添加新属性。</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">Object.seal(obj)</a></p><p>禁止添加&#x2F;删除属性。为所有现有的属性设置 <code>configurable: false</code>。</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze(obj)</a></p><p>禁止添加&#x2F;删除&#x2F;更改属性。为所有现有的属性设置 <code>configurable: false, writable: false</code>。</p></li></ul><p>还有针对它们的测试：</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible">Object.isExtensible(obj)</a></p><p>如果添加属性被禁止，则返回 <code>false</code>，否则返回 <code>true</code>。</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed">Object.isSealed(obj)</a></p><p>如果添加&#x2F;删除属性被禁止，并且所有现有的属性都具有 <code>configurable: false</code>则返回 <code>true</code>。</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen">Object.isFrozen(obj)</a></p><p>如果添加&#x2F;删除&#x2F;更改属性被禁止，并且所有当前属性都是 <code>configurable: false, writable: false</code>，则返回 <code>true</code>。</p></li></ul><h3 id="对象属性配置"><a href="#对象属性配置" class="headerlink" title="对象属性配置"></a>对象属性配置</h3><h4 id="getter-和-setter"><a href="#getter-和-setter" class="headerlink" title="getter 和 setter"></a>getter 和 setter</h4><p>有两种类型的对象属性。</p><p>第一种是 <strong>数据属性</strong>。我们已经知道如何使用它们了。到目前为止，我们使用过的所有属性都是数据属性。</p><p>第二种类型的属性是新东西。它是 <strong>访问器属性（accessor property）</strong>。它们本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。</p><p>访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 <code>get</code> 和 <code>set</code> 表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">propName</span>() &#123;</span><br><span class="line">    <span class="comment">// 当读取 obj.propName 时，getter 起作用</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">propName</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 当执行 obj.propName = value 操作时，setter 起作用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当读取 <code>obj.propName</code> 时，getter 起作用，当 <code>obj.propName</code> 被赋值时，setter 起作用。</p><p>例如，我们有一个具有 <code>name</code> 和 <code>surname</code> 属性的对象 <code>user</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yue&#x27;</span>,</span><br><span class="line">  <span class="attr">surname</span>: <span class="string">&#x27;yun&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.surname&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">fullName</span>) <span class="comment">// yue yun</span></span><br></pre></td></tr></table></figure><p>从外表看，访问器属性看起来就像一个普通属性。这就是访问器属性的设计思想。我们不以函数的方式 <strong>调用</strong> <code>user.fullName</code>，我们正常 <strong>读取</strong> 它：getter 在幕后运行。</p><p>让我们通过为 <code>user.fullName</code> 添加一个 setter 来修改它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yue&#x27;</span>,</span><br><span class="line">  <span class="attr">surname</span>: <span class="string">&#x27;yun&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.surname&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    ;[<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">surname</span>] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set fullName 将以给定值执行</span></span><br><span class="line">user.<span class="property">fullName</span> = <span class="string">&#x27;me gumi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">name</span>) <span class="comment">// me</span></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">surname</span>) <span class="comment">// gumi</span></span><br></pre></td></tr></table></figure><h4 id="访问器描述符"><a href="#访问器描述符" class="headerlink" title="访问器描述符"></a>访问器描述符</h4><p>访问器属性的描述符与数据属性的不同。</p><p>对于访问器属性，没有 <code>value</code> 和 <code>writable</code>，但是有 <code>get</code> 和 <code>set</code> 函数。</p><p>所以访问器描述符可能有：</p><ul><li><strong><code>get</code></strong> —— 一个没有参数的函数，在读取属性时工作，</li><li><strong><code>set</code></strong> —— 带有一个参数的函数，当属性被设置时调用，</li><li><strong><code>enumerable</code></strong> —— 与数据属性的相同，</li><li><strong><code>configurable</code></strong> —— 与数据属性的相同。</li></ul><p>例如上面的例子使用<code>defineProperty</code>创建一个<code>fullName</code>访问器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yue&#x27;</span>,</span><br><span class="line">  <span class="attr">surname</span>: <span class="string">&#x27;yun&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(user, <span class="string">&#x27;fullName&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.surname&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    ;[<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">surname</span>] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">fullName</span>) <span class="comment">// yue yun</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) <span class="title function_">alert</span>(key) <span class="comment">// yue yun</span></span><br></pre></td></tr></table></figure><p>请注意，一个属性要么是访问器（具有 <code>get/set</code> 方法），要么是数据属性（具有 <code>value</code>），但不能两者都是。</p><p>如果我们试图在同一个描述符中同时提供 <code>get</code> 和 <code>value</code>，则会出现错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error: Invalid property descriptor.</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(&#123;&#125;, <span class="string">&#x27;prop&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">value</span>: <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>在编程中我们经常会想获取并扩展一些东西</p><p>比如我们有一个<code>user</code>对象及其属性和方法,并希望将 <code>admin</code> 和 <code>guest</code> 作为基于 <code>user</code> 稍加修改的变体。我们想重用 <code>user</code> 中的内容，而不是复制&#x2F;重新实现它的方法，而只是在其之上构建一个新的对象。</p><p><strong>原型继承（Prototypal inheritance）</strong> 这个语言特性能够帮助我们实现这一需求。</p><h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><p>在 JavaScript 中 对象有特殊的隐藏属性[[Prototype]] 他们要么是<code>null</code> 要么就是在另一个对象中的引用 该对象称之为原型</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/10.png"></p><p>我们会从<code>Object</code>逐步的向上寻找 即原型继承属性 <code>[[Prototype]]</code> 是内部的而且是隐藏的，但是这儿有很多设置它的方式。其中之一就是使用特殊的名字 <code>__proto__</code>，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">eats</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">  <span class="attr">jumps</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rabbit.<span class="property">__proto__</span> = animal</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在这两个属性我们都能在 rabbit 中找到：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rabbit.<span class="property">eats</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rabbit.<span class="property">jumps</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>原型链可能会很长</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">eats</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">walk</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Animal walk&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">  <span class="attr">jumps</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">__proto__</span>: animal</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> longEar = &#123;</span><br><span class="line">  <span class="attr">earLength</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">__proto__</span>: rabbit</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// walk 是通过原型链获得的</span></span><br><span class="line">longEar.<span class="title function_">walk</span>() <span class="comment">// Animal walk</span></span><br><span class="line"><span class="title function_">alert</span>(longEar.<span class="property">jumps</span>) <span class="comment">// true（从 rabbit）</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/11.png"></p><p>现在，如果我们从 <code>longEar</code> 中读取一些它不存在的内容，JavaScript 会先在 <code>rabbit</code> 中查找，然后在 <code>animal</code> 中查找。</p><p>这里只有两个限制：</p><ol><li>引用不能形成闭环。如果我们试图给 <code>__proto__</code> 赋值但会导致引用形成闭环时，JavaScript 会抛出错误。</li><li><code>__proto__</code> 的值可以是对象，也可以是 <code>null</code>。而其他的类型都会被忽略。</li></ol><p>当然，这可能很显而易见，但是仍然要强调：只能有一个 <code>[[Prototype]]</code>。一个对象不能从其他两个对象获得继承。</p><blockquote><p>注意: <strong><code>__proto__</code> 是 <code>[[Prototype]]</code> 的因历史原因而留下来的 getter&#x2F;setter</strong><br><code>__proto__</code>与内部的<code>[[Prototype]]</code>不一样 <code>__proto__</code> 是 <code>[[Prototype]]</code> 的 getter&#x2F;setter。<code>__proto__</code> 属性有点过时了。它的存在是出于历史的原因，现代编程语言建议我们应该使用函数 <code>Object.getPrototypeOf/Object.setPrototypeOf</code> 来取代 <code>__proto__</code> 去 get&#x2F;set 原型</p></blockquote><p>原型仅用于读取属性上,赋值操作是由<code>setter</code>函数去处理而 因此写入类属性实际上就是与调用函数相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">surname</span>: <span class="string">&#x27;Smith&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    ;[<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">surname</span>] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.surname&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin = &#123;</span><br><span class="line">  <span class="attr">__proto__</span>: user,</span><br><span class="line">  <span class="attr">isAdmin</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(admin.<span class="property">fullName</span>) <span class="comment">// John Smith (*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setter triggers!</span></span><br><span class="line">admin.<span class="property">fullName</span> = <span class="string">&#x27;yue yun&#x27;</span> <span class="comment">// (**)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(admin.<span class="property">fullName</span>) <span class="comment">// yue yun 的内容被修改了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">fullName</span>) <span class="comment">// John Smith，user 的内容被保护了</span></span><br></pre></td></tr></table></figure><p><code>Object.key(obj)</code>只会遍历当前的属性的值</p><p><code>for in</code> 会遍历当前的和继承的值 如果要判断是否是自己的可以使用<code>obj.hasOwnPropetry</code></p><details class="folding-tag" cyan><summary> 总结 </summary>              <div class='content'>              <ul><li>在 JavaScript 中，所有的对象都有一个隐藏的 <code>[[Prototype]]</code> 属性，它要么是另一个对象，要么就是 <code>null</code>。</li><li>我们可以使用 <code>obj.__proto__</code> 访问它（历史遗留下来的 getter&#x2F;setter，这儿还有其他方法，很快我们就会讲到）。</li><li>通过 <code>[[Prototype]]</code> 引用的对象被称为“原型”。</li><li>如果我们想要读取 <code>obj</code> 的一个属性或者调用一个方法，并且它不存在，那么 JavaScript 就会尝试在原型中查找它。</li><li>写&#x2F;删除操作直接在对象上进行，它们不使用原型（假设它是数据属性，不是 setter）。</li><li>如果我们调用 <code>obj.method()</code>，而且 <code>method</code> 是从原型中获取的，<code>this</code> 仍然会引用 <code>obj</code>。因此，方法始终与当前对象一起使用，即使方法是继承的。</li><li><code>for..in</code> 循环在其自身和继承的属性上进行迭代。所有其他的键&#x2F;值获取方法仅对对象本身起作用。</li></ul>              </div>            </details><h3 id="F-prototype"><a href="#F-prototype" class="headerlink" title="F.prototype"></a>F.prototype</h3><p>我们可以通过<code>new F()</code>这样的构造函数来创建一个新对象</p><p>如果<code>F.prototype</code>是一个对象, <code>new</code>操作符会使用它作为新对象设置<code>[[Prototype]]</code></p><p>这里的<code>F.prototype</code>指的是<code>F</code>的一个<code>prototype</code>的普通(常规)属性 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">eats</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span> = animal</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&#x27;white Rabbit&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rabbit.<span class="property">eats</span>)</span><br></pre></td></tr></table></figure><p>设置 <code>Rabbit.prototype = animal</code> 的字面意思是：“当创建了一个 <code>new Rabbit</code> 时，把它的 <code>[[Prototype]]</code> 赋值为 <code>animal</code>”。</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/13.png"></p><p>在上图中，<code>&quot;prototype&quot;</code> 是一个水平箭头，表示一个常规属性，<code>[[Prototype]]</code> 是垂直的，表示 <code>rabbit</code> 继承自 <code>animal</code>。</p><blockquote><p><code>F.prototype</code>仅用在<code>new F</code>被调用时使用 它为新对象的[[Prototype]]赋值</p></blockquote><h4 id="默认的-F-prototype-构造器属性"><a href="#默认的-F-prototype-构造器属性" class="headerlink" title="默认的 F.prototype 构造器属性"></a>默认的 F.prototype 构造器属性</h4><p>每个函数都有 <code>&quot;prototype&quot;</code> 属性，即使我们没有提供它。默认的 <code>&quot;prototype&quot;</code> 是一个只有属性 <code>constructor</code> 的对象，属性 <code>constructor</code> 指向函数自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 默认的 prototype</span></span><br><span class="line"><span class="comment">Rabbit.prototype = &#123; constructor: Rabbit &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 默认：</span></span><br><span class="line"><span class="comment">// Rabbit.prototype = &#123; constructor: Rabbit &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> == <span class="title class_">Rabbit</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rabbit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 默认：</span></span><br><span class="line"><span class="comment">// Rabbit.prototype = &#123; constructor: Rabbit &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = <span class="keyword">new</span> <span class="title class_">Rabbit</span>() <span class="comment">// 继承自 &#123;constructor: Rabbit&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rabbit.<span class="property">constructor</span> == <span class="title class_">Rabbit</span>) <span class="comment">// true (from prototype)</span></span><br></pre></td></tr></table></figure><ul><li><code>F.prototype</code> 属性（不要把它与 <code>[[Prototype]]</code> 弄混了）在 <code>new F</code> 被调用时为新对象的 <code>[[Prototype]]</code> 赋值。</li><li><code>F.prototype</code> 的值要么是一个对象，要么就是 <code>null</code>：其他值都不起作用。</li><li><code>&quot;prototype&quot;</code> 属性仅当设置在一个构造函数上，并通过 <code>new</code> 调用时，才具有这种特殊的影响。</li></ul><h3 id="原生的原型"><a href="#原生的原型" class="headerlink" title="原生的原型"></a>原生的原型</h3><p><code>prototype</code>属性在 JavaScript 中广泛的使用 所有而内建构造函数都使用到了它</p><h4 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="title function_">alert</span>(obj) <span class="comment">// &quot;[object Object]&quot;?</span></span><br></pre></td></tr></table></figure><p>内建的<code>toString</code>生成了字符串<code>[object object]</code> <code>obj = &#123;&#125;</code> 和 <code>obj = new Object()</code> 是一个意思，其中 <code>Object</code> 就是一个内建的对象构造函数，其自身的 <code>prototype</code> 指向一个带有 <code>toString</code> 和其他方法的一个巨大的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">toString</span> === obj.<span class="property">__proto__</span>.<span class="property">toString</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">toString</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="其他内建原型"><a href="#其他内建原型" class="headerlink" title="其他内建原型"></a>其他内建原型</h4><p>例如: <code>Array</code> <code>Date</code> <code>Function</code>及其他,都在<code>prototype</code>上挂载了方法</p><p>当我们创建一个数组 <code>[1, 2, 3]</code>，在内部会默认使用 <code>new Array()</code> 构造器。因此 <code>Array.prototype</code> 变成了这个数组的 prototype，并为这个数组提供数组的操作方法。这样内存的存储效率是很高的。所有的内建原型顶端都是 <code>Object.prototype</code>。这就是为什么有人说“一切都从对象继承而来”。</p><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/12.png"></p><p>经过下面验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它继承自 Array.prototype？</span></span><br><span class="line"><span class="title function_">alert</span>(arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来继承自 Object.prototype？</span></span><br><span class="line"><span class="title function_">alert</span>(arr.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链的顶端为 null。</span></span><br><span class="line"><span class="title function_">alert</span>(arr.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>一些方法在原型上可能会发生重叠，例如，<code>Array.prototype</code> 有自己的 <code>toString</code> 方法来列举出来数组的所有元素并用逗号分隔每一个元素。</p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>最复杂的事情发生在字符串、数字和布尔值上。<br>正如我们记忆中的那样，它们并不是对象。但是如果我们试图访问它们的属性，那么临时包装器对象将会通过内建的构造器 <code>String</code>、<code>Number</code> 和 <code>Boolean</code> 被创建。它们提供给我们操作字符串、数字和布尔值的方法然后消失。<br>这些对象对我们来说是无形地创建出来的。大多数引擎都会对其进行优化，但是规范中描述的就是通过这种方式。这些对象的方法也驻留在它们的 prototype 中，可以通过 <code>String.prototype</code>、<code>Number.prototype</code> 和 <code>Boolean.prototype</code> 进行获取。</p><div class="note warning simple"><p>值<code>null</code>和<code>undefined</code>没有对象包装器.并且它们也没有相应的原型。</p></div><h4 id="更改原生原型"><a href="#更改原生原型" class="headerlink" title="更改原生原型"></a>更改原生原型</h4><p>在开发的过程中，我们可能会想要一些新的内建方法，并且想把它们添加到原生原型中。但这通常是一个很不好的想法。</p><blockquote><p>原型是全局的，所以很容易造成冲突。如果有两个库都添加了 <code>String.prototype.show</code> 方法，那么其中的一个方法将被另一个覆盖。</p><p>所以，通常来说，修改原生原型被认为是一个很不好的想法。</p></blockquote><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="class-语法"><a href="#class-语法" class="headerlink" title="class 语法"></a>class 语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">  <span class="title function_">method1</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">  <span class="title function_">method2</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">  <span class="title function_">method3</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>new MyClass()</code>来创建具有上述方法的新对象</p><p><code>new</code> 会自动调用 <code>constructor()</code> 方法，因此我们可以在 <code>constructor()</code> 中初始化对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JavaScript</code>中 类其实是一种函数 在<code>ES6</code>中增加了类而关键字是一种新的语法糖放其更加方便直观的创建想要的类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">User</span>) <span class="comment">// function</span></span><br></pre></td></tr></table></figure><p><code>class User&#123;...&#125;</code>构造实际是完成了下面的事</p><ul><li>创建一个名为<code>User</code>的函数 该函数为类声明的结果 该函数的代码来自于<code>constructor</code>方法</li><li>存储类中的方法 例如<code>User.prototype</code>中的<code>sayHi</code></li></ul><p><img src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/javascriptlearing/14.png"></p><p>如下面的代码解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 是一个函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">User</span>) <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...或者，更确切地说，是 constructor 方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">User</span> === <span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法在 User.prototype 中，例如：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span>) <span class="comment">// sayHi 方法的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原型中实际上有两个方法</span></span><br><span class="line">consoe.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>)) <span class="comment">// constructor, sayHi</span></span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a><code>try catch</code></h3><p>通常我们在编写脚本的时候总是会遇到很多非预期的错误 导致脚本停止执行，有一种语法结构 <code>try...catch</code>，它使我们可以“捕获（catch）”错误，因此脚本可以执行更合理的操作，而不是死掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// ...try to execute the code...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="comment">// ...handle errors...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先执行<code>try &#123;...&#125;</code>中的代码</li><li>如果没有错误，那么就跳过<code>catch(err)</code>中的代码，继续执行，<code>try</code>中的代码执行完毕</li><li>如果出现错误，那么<code>try</code>中剩下的代码停止执行，控制台执行<code>catch(err)</code>中的代码，<code>catch</code>中的代码将包含一个<strong>error 的对象</strong>执行完毕</li></ol><h3 id="Error对象"><a href="#Error对象" class="headerlink" title="Error对象"></a>Error对象</h3><p>发生错误时，JavaScript 会生成一个包含有关此 error 详细信息的对象。然后将该对象作为参数传递给 <code>catch</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123; <span class="comment">// &lt;-- “error 对象”，也可以用其他参数名代替 err</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>: Error的名称 例如一个未定义的变量则报错是<code>ReferenceError</code></li><li><code>message</code>: 关于error的详细文字描述</li><li><code>stack</code>: 当前的单调栈 用于调试</li></ul><h3 id="抛出自定义的Error"><a href="#抛出自定义的Error" class="headerlink" title="抛出自定义的Error"></a>抛出自定义的Error</h3><p><strong>throw操作符</strong></p><p><code>throw</code>操作符会生成一个error对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="language-xml"><span class="tag">&lt;<span class="name">error</span> <span class="attr">object</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>技术上讲，我们可以将任何东西用作 error 对象。甚至可以是一个原始类型数据，例如数字或字符串，但最好使用对象，最好使用具有 <code>name</code> 和 <code>message</code> 属性的对象（某种程度上保持与内建 error 的兼容性）。JavaScript 中有很多内建的标准 error 的构造器：<code>Error</code>，<code>SyntaxError</code>，<code>ReferenceError</code>，<code>TypeError</code> 等。我们也可以使用它们来创建 error 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> error = <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">let</span> error = <span class="keyword">new</span> <span class="title class_">SyntaxError</span>(message);</span><br><span class="line"><span class="keyword">let</span> error = <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(message);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="再次抛出-Rethrowing"><a href="#再次抛出-Rethrowing" class="headerlink" title="再次抛出(Rethrowing)"></a>再次抛出(Rethrowing)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="string">&#x27;&#123; &quot;age&quot;: 30 &#125;&#x27;</span>; <span class="comment">// 不完整的数据</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br><span class="line">  <span class="keyword">if</span> (!user.<span class="property">name</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SyntaxError</span>(<span class="string">&quot;数据不全：没有 name&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">blabla</span>(); <span class="comment">// 预料之外的 error</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( user.<span class="property">name</span> );</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err <span class="keyword">instanceof</span> <span class="title class_">SyntaxError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;JSON Error: &quot;</span> + err.<span class="property">message</span> );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err; <span class="comment">// 再次抛出 (*)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try…catch…finally"><a href="#try…catch…finally" class="headerlink" title="try…catch…finally"></a>try…catch…finally</h3><p><code>try...catch</code> 结构可能还有一个代码子句（clause）：<code>finally</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   ... 尝试执行的代码 ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">   ... 处理 error ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   ... 总是会执行的代码 ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Error-扩展Error"><a href="#自定义Error-扩展Error" class="headerlink" title="自定义Error,扩展Error"></a>自定义Error,扩展Error</h3><p>当我们开发项目时,经常需要我们自己定义error类来反映任务中可能出错的特定任务, 对于网络操作中的error 我们需要<code>HttpError</code> 对于数据库操作中的error 我们需要<code>DbError</code>,对于搜索操作的error 我们需要<code>NotFoundError</code></p><p>我们自定义的 error 应该支持基本的 error 的属性，例如 <code>message</code>，<code>name</code>，并且最好还有 <code>stack</code>。但是它们也可能会有其他属于它们自己的属性，例如，<code>HttpError</code> 对象可能会有一个 <code>statusCode</code> 属性，属性值可能为 <code>404</code>、<code>403</code> 或 <code>500</code> 等。</p><h4 id="扩展Error"><a href="#扩展Error" class="headerlink" title="扩展Error"></a>扩展Error</h4><p>如果我们需要使用json去检查是否存在某个数据我们现在规定成<code>ValidationError</code></p><p>Error类是内建的 结构类似如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript 自身定义的内建的 Error 类的“伪代码”</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (message) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = message</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Error&quot;</span> <span class="comment">// (不同的内建error类拥有不同的名字)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">call</span> <span class="attr">stack</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>现在让我们从其中继承 <code>ValidationError</code>，并尝试进行运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ValidationError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (message) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(message) </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ValidationError&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationError</span>(<span class="string">&quot;Explosion!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>); <span class="comment">// Explosion!</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">name</span>); <span class="comment">// ValidationError</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>); <span class="comment">// 一个嵌套调用的列表，每个调用都有对应的行号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深入继承"><a href="#深入继承" class="headerlink" title="深入继承"></a>深入继承</h4><p><code>ValidationError</code>类是非常通用的 很多东西都可能出错 对象的属性可能缺失或者属性可能有格式错误,让我们针对缺少属性的错误来制作一个更具体的 <code>PropertyRequiredError</code> 类。它将携带有关缺少的属性的相关信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ValidationError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(message)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ValidationError&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PropertyRequiredError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ValidationError</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">property</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&quot;No property:&quot;</span> + property)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;PropertyRequiredError&quot;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">property</span> = property</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readUser</span>(<span class="params">json</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json)</span><br><span class="line">    <span class="keyword">if</span>(!user.<span class="property">age</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PropertyRequiredError</span>(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!user.<span class="property">name</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PropertyRequiredError</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="title function_">readUser</span>(<span class="string">&#x27;&#123;&quot;age&quot;: 25&#125;&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err <span class="keyword">instanceof</span> <span class="title class_">ValidationError</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Invalid data&quot;</span> + err.<span class="property">message</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">name</span>)</span><br><span class="line">        consoe.<span class="title function_">log</span>(err.<span class="property">property</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(err <span class="keyword">instanceof</span> <span class="title class_">SyntaxError</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JSON Syntax Error:&quot;</span> + err.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个新的类 <code>PropertyRequiredError</code> 使用起来很简单：我们只需要传递属性名：<code>new PropertyRequiredError(property)</code>。人类可读的 <code>message</code> 是由 constructor 生成的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(message);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">constructor</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValidationError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MyError</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PropertyRequiredError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ValidationError</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">property</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&quot;No property: &quot;</span> + property);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">property</span> = property;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name 是对的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="keyword">new</span> <span class="title class_">PropertyRequiredError</span>(<span class="string">&quot;field&quot;</span>).<span class="property">name</span> ); <span class="comment">// PropertyRequiredError</span></span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><p>常规函数只会返回一个单一值 (或者不返回任何值)</p><p>而 generator 可以按需一个接一个地返回yield多个值。它们可与iterable完美配合使用，从而可以轻松地创建数据流。</p><h3 id="generator函数"><a href="#generator函数" class="headerlink" title="generator函数"></a>generator函数</h3><p>要创建一个generator 我们需要一个特殊语法结构: <code>function *</code> 即所谓的<code>generator function</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* generateSequence () &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>generator</code>函数与常规函数的行为不同 在此类函数被调用时 他不会运行其代码.而是返回一个被称为 “generator object” 的特殊对象，来管理执行流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generateSequence</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;generator function&quot; 创建了一个 &quot;generator object&quot;</span></span><br><span class="line"><span class="keyword">let</span> generator = <span class="title function_">generateSequence</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator) <span class="comment">//Object [Generator] &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>到现在为止 上段代码中的<strong>函数体</strong>代码并没有开始执行<br>一个 generator 的主要方法就是 <code>next()</code>。当被调用时，它会恢复运行，执行直到最近的 <code>yield &lt;value&gt;</code> 语句（<code>value</code> 可以被省略，默认为 <code>undefined</code>）。然后函数执行暂停，并将产出的（yielded）值返回到外部代码。</p><p><code>next()</code>的结果始终是一个具有两个属性的对象:</p><ul><li><code>value</code>: 产出的(yielded)的值</li><li><code>done</code>: 如果generator函数已执行完成则为<code>true</code>否则为<code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generateSequence</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;generator function&quot; 创建了一个 &quot;generator object&quot;</span></span><br><span class="line"><span class="keyword">let</span> generator = <span class="title function_">generateSequence</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())<span class="keyword">function</span>* <span class="title function_">generateSequence</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;generator function&quot; 创建了一个 &quot;generator object&quot;</span></span><br><span class="line"><span class="keyword">let</span> generator = <span class="title function_">generateSequence</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: 3, done: true &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h2 id="模块导入导出"><a href="#模块导入导出" class="headerlink" title="模块导入导出"></a>模块导入导出</h2><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h1 id="浏览器中的-JS"><a href="#浏览器中的-JS" class="headerlink" title="浏览器中的 JS"></a>浏览器中的 JS</h1><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本用法</title>
      <link href="/posts/7537191c.html"/>
      <url>/posts/7537191c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx作用"><a href="#Nginx作用" class="headerlink" title="Nginx作用"></a>Nginx作用</h1><p>Nginx 是一个高性能<strong>HTTP</strong>和反向代理的Web服务器，可以将服务器上的静态文件(如HTML、图片)等通过<strong>HTTP</strong>协议展现给客户端，占用内存少、并发能力强</p><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>进入nginx官网 (<a href="https://nginx.org/en/">https://nginx.org/en/</a>)</p><p>window系统选择下载 .exe</p><p>linux系统下载pgp</p><p>linux解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.22.1 tar.gz</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><blockquote><p>如果是使用linux上面 推荐使用apt-get 或者 yum 等 去下载，<strong>下载之前请先系统上是否存在nginx</strong><br>下面演示是在 linux发行版 ubuntu-22.04 使用 apt-get下载的nginx</p></blockquote><p><strong>如果失败请加上sudo</strong></p><h1 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h1><p>进入安装好的目录 <code>/usr/sbin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/sbin <span class="comment"># 进入可执行文件目录</span></span><br><span class="line">./nginx  <span class="comment">#启动</span></span><br><span class="line">./nginx -s stop <span class="comment">#快速停止</span></span><br><span class="line">./nginx -s quit <span class="comment">#优雅关闭，在关闭前已经接受连接请求</span></span><br><span class="line">./nginx -s reload <span class="comment">#重新加载配置</span></span><br><span class="line">./nginx -t <span class="comment">#检查nginx配置是否正确</span></span><br><span class="line">ps -ef|grep nginx <span class="comment">#查看nginx状态</span></span><br></pre></td></tr></table></figure><h1 id="Nginx的目录"><a href="#Nginx的目录" class="headerlink" title="Nginx的目录"></a>Nginx的目录</h1><p>Nginx一般安装在<code>/etc/nginx</code>目录下（安装时–prefix可指定安装目录）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">conf #配置文件</span><br><span class="line">｜-nginx.conf # 主配置文件</span><br><span class="line">｜-其他配置文件 # 可通过那个include关键字，引入到了nginx.conf生效</span><br><span class="line"></span><br><span class="line">html #静态页面</span><br><span class="line"></span><br><span class="line">logs</span><br><span class="line">｜-access.log #访问日志(每次访问都会记录)</span><br><span class="line">｜-error.log #错误日志</span><br><span class="line">｜-nginx.pid #进程号</span><br><span class="line"></span><br><span class="line">sbin</span><br><span class="line">｜-nginx #主进程文件</span><br><span class="line"></span><br><span class="line">*_temp #运行时，生成临时文件</span><br></pre></td></tr></table></figure><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Linux/image-20220502111337135.png" alt="image-20220502111337135"></p><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p><strong>简化版的Nginx.conf</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1; # 启动的worker进程数</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; #每个worker进程的连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types; #include是引入关键字，这里引入了mime.types这个配置文件（同在conf目录下，mime.types是用来定义，请求返回的content-type）</span><br><span class="line">    default_type  application/octet-stream; #mime.types未定义的，使用默认格式application/octet-stream (指浏览器)</span><br><span class="line"></span><br><span class="line">    sendfile        on; #详情，见下文</span><br><span class="line">    keepalive_timeout  65; #长链接超时时间</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一个nginx可以启用多个server（虚拟服务器） -vhost</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;#监听端口80</span><br><span class="line">        server_name  localhost;  #接收的域名,主机名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">http://localhost.com/xxoo/index.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以存在多个location 互相不干扰</span></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html; #根目录指向html目录</span><br><span class="line">            index  index.html index.htm; #域名/index 指向 index.html index.htm文件</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">http://localhost.com/50x.html</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html; # 服务器错误码为500 502 503 504，转到&quot;域名/50x.html&quot;</span><br><span class="line">        location = /50x.html &#123;# 指定到html文件夹下找/50x.htm</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sendfile</strong></p><p>打开sendfile，用户请求的数据不用再加载到nginx的内存中，而是直接发送</p><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502113913235.png" alt="image-20220502113913235"></p><h1 id="Nginx配置使用场景"><a href="#Nginx配置使用场景" class="headerlink" title="Nginx配置使用场景"></a>Nginx配置使用场景</h1><p>修改Nginx配置文件后，记得重新加载nginx</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx <span class="literal">-s</span> reload</span><br></pre></td></tr></table></figure><p>不同二级域名，映射到不同静态网页<br>可以写多个server字段，从前向后匹配，先匹配到那个就用那个<br>用户访问<code>pro.hedaodao.ltd</code>，就会走到第一个server配置；<code>test.hedaodao.ltd</code>走到第二个配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> http &#123;</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">....其他属性</span></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  pro.hedaodao.ltd;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/pro; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  test.hedaodao.ltd;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/test; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不同域名，映射到同一静态页面</strong></p><p>server_name</p><ul><li>可以写多个，用空格分开</li><li>使用通配符（*）</li><li>使用正则表达式（<a href="https://blog.csdn.net/yangyelin/article/details/112976539">https://blog.csdn.net/yangyelin/article/details/112976539</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http&#123; </span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  *.hedaodao.ltd  ~^[0-9]+\.hedaodao\.ltd$; # &quot;\.&quot;是转译&quot;.&quot;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/test; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反向代理与负载均衡"><a href="#反向代理与负载均衡" class="headerlink" title="反向代理与负载均衡"></a>反向代理与负载均衡</h1><p><strong>反向代理</strong>：这种代理方式叫做，隧道代理。有性能瓶颈，因为所有的数据都经过Nginx，所以Nginx服务器的性能至关重要<br><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502173846436.png" alt="image-20220502173846436"></p><p><strong>负载均衡</strong>：把请求，按照一定算法规则，分配给多台业务服务器（即使其中一个坏了&#x2F;维护升级，还有其他服务器可以继续提供服务）<br><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502174023144.png" alt="image-20220502174023144"></p><h1 id="反向代理-负载均衡"><a href="#反向代理-负载均衡" class="headerlink" title="反向代理+负载均衡"></a>反向代理+负载均衡</h1><p><strong>nginx.conf配置文件</strong></p><p>启用proxy_pass，root和index字段就会失效</p><p>proxy_pass后的地址必须写完整 <code>http://xxx</code>，不支持https</p><p>当访问localhost时（Nginx服务器），网页打开的是<code>http://xxx</code>（应用服务器），网页地址栏写的还是localhost</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http&#123; </span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        proxy_pass http://xxx;</span><br><span class="line">            #root   html/test; </span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义地址别名</strong></p><p>使用upstream定义一组地址【在server字段下】</p><p>访问localhost，访问都会代理到<code>192.168.174.133:80</code>和<code>192.168.174.134:80</code>这两个地址之一，每次访问这两个地址轮着切换（后面讲到，因为默认权重相等）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80; #如果是80端口，可以省略不写</span><br><span class="line">server 192.168.174.134:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        proxy_pass http://httpds;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置权重</strong></p><p>访问使用哪个地址的权重</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10;</span><br><span class="line">server 192.168.174.134:80 weight=80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10 down;</span><br><span class="line">server 192.168.174.134:80 weight=80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备用机</strong></p><p>如果<code>192.168.174.133:80</code>出现故障，无法提供服务，就用使用backup的这个机器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10;</span><br><span class="line">server 192.168.174.134:80 weight=80 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx-的一些报错"><a href="#Nginx-的一些报错" class="headerlink" title="Nginx 的一些报错"></a>Nginx 的一些报错</h1><p><strong>nginx: [error] invalid PID number “” in “&#x2F;run&#x2F;nginx.pid”</strong></p><p>解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>could not open error log file: open() “&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log” failed (13: Permission denied)</strong></p><p>解决办法</p><blockquote><p>在指令前面加上 <code>sudo</code> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫爬取图片</title>
      <link href="/posts/bca27d91.html"/>
      <url>/posts/bca27d91.html</url>
      
        <content type="html"><![CDATA[<h1 id="python爬虫简单基础"><a href="#python爬虫简单基础" class="headerlink" title="python爬虫简单基础"></a>python爬虫简单基础</h1><h2 id="使用Request库"><a href="#使用Request库" class="headerlink" title="使用Request库"></a>使用Request库</h2><p>优点：简单、发送网络请求快</p><p>缺点：容易被反爬策略针对</p><h3 id="request库的使用"><a href="#request库的使用" class="headerlink" title="request库的使用"></a>request库的使用</h3><h4 id="携带Headers去发送网络请求"><a href="#携带Headers去发送网络请求" class="headerlink" title="携带Headers去发送网络请求"></a>携带Headers去发送网络请求</h4><blockquote><p>模拟浏览器环境、欺骗服务器、获取和浏览器一致的内容</p></blockquote><p>比较重要的就是<code>ua</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">request.get(url,headers=headers)</span><br></pre></td></tr></table></figure><h4 id="发送携带参数的请求"><a href="#发送携带参数的请求" class="headerlink" title="发送携带参数的请求"></a>发送携带参数的请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yueyun&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">request.get(url,params=kw)</span><br></pre></td></tr></table></figure><blockquote><p>在 url 地址中，很多参数是没有用的，比如百度搜索的 url 地址，其中参数只有一个字段有用，其他的都可以删除</p></blockquote><h4 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h4><ul><li>登录注册</li><li>需要传输大文本内容的时候</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;yueyun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">&quot;http://www.baidu.com/&quot;</span>, data = data,headers=headers)</span><br></pre></td></tr></table></figure><h4 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h4><p><strong>使用代理原因：</strong></p><ul><li>让服务器以为不是同一个客户端在请求</li><li>隐藏真实地址</li></ul><p><strong>正向代理和反向代理：</strong></p><ul><li>正向代理：即是**”代理服务器”代理了”客户端”，去和”目标服务器”进行交互**，例如<code>VPN</code></li><li>反向代理：代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例如<code>Nginx</code></li></ul><p><strong>代理使用:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123; </span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:7890&quot;</span>, </span><br><span class="line">    <span class="string">&quot;https&quot;</span>: <span class="string">&quot;https://127.0.0.1:7890&quot;</span>, </span><br><span class="line">    &#125;</span><br><span class="line">requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>,proxies=proxies)</span><br></pre></td></tr></table></figure><h4 id="代理-IP-使用的注意点"><a href="#代理-IP-使用的注意点" class="headerlink" title="代理 IP 使用的注意点"></a>代理 IP 使用的注意点</h4><ul><li><p>反反爬<br>使用代理 ip 是非常必要的一种<code>反反爬</code>的方式，但是即使使用了代理 ip，对方服务器任然会有很多的方式来检测我们是否是一个爬虫</p><ul><li>一段时间内，检测 IP 访问的频率，访问太多频繁会屏蔽</li><li>检查 Cookie，User-Agent，Referer 等 header 参数，若没有则屏蔽</li><li>服务方购买所有代理提供商，加入到反爬虫数据库里，若检测是代理则屏蔽</li></ul><p>所以更好的方式是购买质量更高的代理，或者自己搭建代理服务器，组装自己的<code>代理IP池</code>，同时在使用的时候使用随机的方式进行选择使用，不要每次都用一个代理 ip，没事没有任何效果的</p></li><li><p>代理IP池更新</p></li></ul><h3 id="使用Request处理cookie等相关的请求"><a href="#使用Request处理cookie等相关的请求" class="headerlink" title="使用Request处理cookie等相关的请求"></a>使用Request处理cookie等相关的请求</h3><h4 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h4><ul><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 不是很安全，别人可以分析存放在本地的 cookie 并进行 cookie 欺骗。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。</li><li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ul><h4 id="处理cookie请求方式-session"><a href="#处理cookie请求方式-session" class="headerlink" title="处理cookie请求方式 - session"></a>处理cookie请求方式 - session</h4><ul><li><p>Requests提供了一个叫做<code>session</code>类，来实现客户端和服务端的<code>会话保持</code></p></li><li><p>会话保持有两个内涵：</p><ul><li>保存 cookie</li><li>实现和服务端的长连接</li></ul></li><li><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">response = session.get(url,headers)</span><br></pre></td></tr></table></figure><p>session 实例在请求了一个网站后，对方服务器设置在本地的 cookie 会保存在 session 中，下一次再使用 session 请求对方服务器的时候，会带上前一次的 cookie</p></li></ul><h4 id="处理cookie请求方式-headers"><a href="#处理cookie请求方式-headers" class="headerlink" title="处理cookie请求方式 - headers"></a>处理cookie请求方式 - headers</h4><p>headers中的cookie：</p><ul><li>使用分号 (;) 隔开</li><li>分号两边的类似 a&#x3D;b 形式的表示一条 cookie</li><li>a&#x3D;b 中，a 表示键（name），b 表示值（value）</li><li>headers 中仅仅使用了 cookie 的 name 和 value</li></ul><p>cookie 的具体组成的字段</p><p>由于 headers 中对 cookie 仅仅使用它的 name 和 value，所以在代码中我们仅仅需要 cookie 的 name 和 value 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot; Pycharm-26c2d973=dbb9b300-2483-478f-9f5a-16ca4580177e; Hm_lvt_98b9d8c2fd6608d564bf2ac2ae642948=1512607763; Pycharm-26c2d974=f645329f-338e-486c-82c2-29e2a0205c74; _xsrf=2|d1a3d8ea|c5b07851cbce048bd5453846445de19d|1522379036&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">requests.get(url,headers=headers)</span><br></pre></td></tr></table></figure><p>cookie 有过期时间，所以直接复制浏览器中的 cookie 可能意味着下一程序继续运行的时候需要替换代码中的 cookie，对应的我们也可以通过一个程序专门来获取 cookie 供其他程序使用；当然也有很多网站的 cookie 过期时间很长，这种情况下，直接复制 cookie 来使用更加简单</p><h4 id="处理cookie请求方式-使用-cookies-参数"><a href="#处理cookie请求方式-使用-cookies-参数" class="headerlink" title="处理cookie请求方式 - 使用 cookies 参数"></a>处理cookie请求方式 - 使用 cookies 参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookies = &#123;<span class="string">&quot;cookie的name&quot;</span>:<span class="string">&quot;cookie的value&quot;</span>&#125;</span><br><span class="line">requests.get(url,headers=headers,cookies=cookie_dict&#125;</span><br></pre></td></tr></table></figure><p><code>requests.utils.dict_from_cookiejar</code>: 把 cookiejar 对象转化为字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies))</span><br><span class="line"></span><br><span class="line">cookies = requests.utils.dict_from_cookiejar(response.cookies)</span><br><span class="line"><span class="built_in">print</span>(cookies)</span><br></pre></td></tr></table></figure><h3 id="Request常见参数"><a href="#Request常见参数" class="headerlink" title="Request常见参数"></a>Request常见参数</h3><p><strong>ssl证书</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.12306.cn/mormhweb/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssl.CertificateError ...</span></span><br><span class="line"><span class="comment"># 添加false</span></span><br><span class="line">response = requests.get(url,verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>超时参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(url,timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>retrying 模块的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parse.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line">headers = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop_max_attempt_number=<span class="number">3</span></span>) </span><span class="comment">#最大重试3次，3次全部报错，才会报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_parse_url</span>(<span class="params">url</span>)</span><br><span class="line">    response = requests.get(url, headers=headers, timeout=<span class="number">3</span>) <span class="comment">#超时的时候回报错并重试</span></span><br><span class="line">    <span class="keyword">assert</span> response.status_code == <span class="number">200</span> <span class="comment">#状态码不是200，也会报错并充实</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_url</span>(<span class="params">url</span>)</span><br><span class="line">    <span class="keyword">try</span>: <span class="comment">#进行异常捕获</span></span><br><span class="line">        response = _parse_url(url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="使用无头浏览器selenium"><a href="#使用无头浏览器selenium" class="headerlink" title="使用无头浏览器selenium"></a>使用无头浏览器selenium</h2><p>… </p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>… </p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>爬取 <strong><a href="https://www.vilipix.com/">vilipix</a>上面的图片</strong></p><p>需要使用到的依赖:</p><ul><li><code>pip install requests</code></li><li><code>pip install pyquery</code></li><li><code>pip install fake-useragent</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">ua = UserAgent(verify_ssl=<span class="literal">False</span>, path=<span class="string">&#x27;./fake_useragent0.1.11.json&#x27;</span>)</span><br><span class="line"><span class="comment"># 网站url</span></span><br><span class="line">base_url = <span class="string">&#x27;https://www.vilipix.com&#x27;</span></span><br><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="comment"># 获取昨天的日期，并用于构建url</span></span><br><span class="line">today_str = (datetime.date.today() + datetime.timedelta(days=-<span class="number">1</span>)).strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mark = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择要下载的榜单\n0---每日榜单\n1---每周榜单\n2---每月榜单\n&quot;</span>))</span><br><span class="line">mode = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (mark == <span class="number">0</span>):</span><br><span class="line">    mode = <span class="string">&#x27;daily&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> mark == <span class="number">1</span>:</span><br><span class="line">    mode = <span class="string">&#x27;weekly&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> mark == <span class="number">2</span>:</span><br><span class="line">    mode = <span class="string">&#x27;monthly&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入有误，即将退出程序&quot;</span>)</span><br><span class="line">    os._exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 分布创建属于榜单的文件夹(可以自定义更改)</span></span><br><span class="line">path_1 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_1):</span><br><span class="line">    os.mkdir(path_1)</span><br><span class="line"></span><br><span class="line">path_2 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单/<span class="subst">&#123;today&#125;</span>/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_2):</span><br><span class="line">    os.mkdir(path_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头防止被封</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ua_random</span>():</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;use_agent&#x27;</span>: ua.random</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回网页内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrap_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=url, headers=ua_random())</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>不可爬取！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回具体的url地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrap_index</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/ranking?date=<span class="subst">&#123;today_str&#125;</span>&amp;mode=<span class="subst">&#123;mode&#125;</span>&amp;p=<span class="subst">&#123;page&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> scrap_page(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对页面进行解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_index</span>(<span class="params">html</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    <span class="comment"># pQuery 和 web开发中jQuery 差不多 CSS选择器</span></span><br><span class="line">    links = doc(<span class="string">&#x27;#__layout .illust-content li .illust a&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links.items():</span><br><span class="line">        <span class="comment"># 获取link标签的href属性</span></span><br><span class="line">        href = link.attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        name = href.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 详情页名字，由图片id构成，以防重名</span></span><br><span class="line">        <span class="comment"># 详情页url 拼接</span></span><br><span class="line">        detail_url = urljoin(base_url, href)</span><br><span class="line">        page_count = link(<span class="string">&#x27;.page-count span&#x27;</span>).text()</span><br><span class="line">        <span class="comment"># 惰性生成器</span></span><br><span class="line">        <span class="keyword">yield</span> detail_url, page_count, name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片 保存至本地文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">path, name, image</span>):</span><br><span class="line">    save_path = path + name + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情页内仅有一张图片时调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_index_1</span>(<span class="params">html, name, path</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    link = doc(<span class="string">&#x27;.illust-pages li a img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    image = requests.get(url=link, headers=ua_random()).content</span><br><span class="line">    download(path, name, image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情页内有超过一张图片时调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_index_more</span>(<span class="params">html, name, path</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    links = doc(<span class="string">&#x27;.illust-pages li a img&#x27;</span>)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links.items():</span><br><span class="line">        src = link.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        image_name = name + <span class="string">f&#x27;_<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        image = requests.get(url=src, headers=ua_random()).content</span><br><span class="line">        download(path, image_name, image)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载程序入口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">page</span>):</span><br><span class="line">    html = scrap_index(page)</span><br><span class="line">    details = parse_index(html)</span><br><span class="line">    <span class="keyword">for</span> detail <span class="keyword">in</span> details:</span><br><span class="line">        detail_url = detail[<span class="number">0</span>]  <span class="comment"># 详情页的url</span></span><br><span class="line">        num = detail[<span class="number">1</span>]  <span class="comment"># 详情页内图片的数量</span></span><br><span class="line">        name = detail[<span class="number">2</span>]  <span class="comment"># 给详情页命的名</span></span><br><span class="line">        detail_html = scrap_page(detail_url)</span><br><span class="line">        <span class="keyword">if</span> num == <span class="string">&#x27;1&#x27;</span>:  <span class="comment"># 第①种情况</span></span><br><span class="line">            detail_index_1(detail_html, name, path_2)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 第②种情况</span></span><br><span class="line">            path_3 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单/<span class="subst">&#123;today&#125;</span>/<span class="subst">&#123;name&#125;</span>/&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_3):</span><br><span class="line">                os.mkdir(path_3)</span><br><span class="line">            detail_index_more(detail_html, name, path_3)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">10</span>, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>下载完毕！&#x27;</span>, <span class="string">&#x27;*&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># print(&quot;图片下载完成辣，谢谢使用！！&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 主程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pages = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>))</span><br><span class="line">    <span class="comment"># 使用多线程进行加速</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(main, pages)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图片下载完成辣，谢谢使用！！&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器配置代理</title>
      <link href="/posts/e43d6ac6.html"/>
      <url>/posts/e43d6ac6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下使用Clash科学上网"><a href="#Linux下使用Clash科学上网" class="headerlink" title="Linux下使用Clash科学上网"></a>Linux下使用Clash科学上网</h1><blockquote><p>在 Linux 服务器上通过 Clash 科学上网<br>如果出现权限不足的情况请在指令前面加上 <code>sudo</code> </p></blockquote><h2 id="安装Clash"><a href="#安装Clash" class="headerlink" title="安装Clash"></a><strong>安装<code>Clash</code></strong></h2><ul><li><p>下载当前操作系统与 CPU 架构对应的包文件，我这儿是 X86_64 平台下的Ubuntu所以对应使用的是<a href="https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz">clash-linux-amd64-v1.6.5.gz</a>即ok(当然取github上面找到不同的安装包只要能够对应也ok)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O clash.gz https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz</span><br></pre></td></tr></table></figure></li><li><p>下载好后解压安装包中 clash 到 <code>/usr/local/bin/</code> 目录下，并删除压缩包文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gzip -dc clash.gz &gt; /usr/local/bin/clash</span><br><span class="line">chmod +x /usr/local/bin/clash</span><br><span class="line">rm -f clash.gz</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件目录，并下载 MMDB 文件(注意这一步很可能失败建议直接在网上找Country.mmdb文件下载并手动上传比较好) <a href="https://github.com/Dreamacro/maxmind-geoip/releases">下载网址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/clash</span><br><span class="line">wget -O /etc/clash/Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>systemd</code> 脚本，脚本文件路径为 <code>/etc/systemd/system/clash.service</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=clash daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/local/bin/clash -d /etc/clash/</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>重载 systemctl daemon</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a><strong>配置代理</strong></h2><ul><li><p>导入已有的<code>vpn</code> 链接 (订阅链接啦) </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/clash/config.yaml [你的订阅链接]</span><br></pre></td></tr></table></figure></li><li><p>设置系统代理，添加配置文件 <code>/etc/profile.d/proxy.sh</code> 并在其中写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export https_proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export HTTP_PROXY=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure></li><li><p>重载 <code>/etc/profile</code> 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>启动 <code>clash</code> 服务，并设置为开机自动启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start clash</span><br><span class="line">systemctl enable clash</span><br></pre></td></tr></table></figure></li><li><p>测试 goolge.com 访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl google.com</span></span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;301 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=&quot;http://www.google.com/&quot;&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置web-UI"><a href="#配置web-UI" class="headerlink" title="配置web-UI"></a><strong>配置web-UI</strong></h2><ul><li><p>克隆 <a href="https://github.com/Dreamacro/clash-dashboard">clash-dashboard</a> 项目到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b gh-pages --depth 1 https://github.com/Dreamacro/clash-dashboard /opt/clash-dashboard</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>clash</code> 配置文件中 <code>external-ui</code> 的值为 <code>/opt/clash-dashboard</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/^#\&#123;0,1\&#125; \&#123;0,1\&#125;external-ui.*/external-ui: \/opt\/clash-dashboard/&quot; /etc/clash/config.yaml</span><br></pre></td></tr></table></figure></li><li><p>重启clash服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart clash</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问 <code>localhost:9090/ui</code>，其中 <code>localhost</code> 替换为 clash 部署服务器的 IP</p></li></ul><h2 id="配置定时更新订阅"><a href="#配置定时更新订阅" class="headerlink" title="配置定时更新订阅"></a>配置定时更新订阅</h2><p>使用如下脚本填写相关配置项目并放入 <code>/etc/cron.weekly</code> 目录下，每周自动更新订阅配置文件即可<br><code>sudo vim /etc/cron.weekly/clash.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅链接地址</span></span><br><span class="line">SUBSCRIBE=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">web-ui存放目录，留空则保持默认不修改</span></span><br><span class="line">WEB_UI=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API 端口，留空则保持默认不修改</span></span><br><span class="line">CONTROLLER_API_PROT=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API 口令，留空则保持默认不修改</span></span><br><span class="line">SECRET=&quot;&quot;</span><br><span class="line"></span><br><span class="line">CLASH_CONFIG=&quot;/etc/clash/config.yaml&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ -z &quot;$&#123;SUBSCRIBE&#125;&quot; ]; then</span><br><span class="line">    echo &quot;Subscription address cannot be empty&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">systemctl stop clash</span><br><span class="line"></span><br><span class="line">wget --no-proxy -O $&#123;CLASH_CONFIG&#125; $&#123;SUBSCRIBE&#125;</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;WEB_UI&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^#\&#123;0,1\&#125; \&#123;0,1\&#125;external-ui.*?external-ui: $&#123;WEB_UI&#125;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;CONTROLLER_API_PROT&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^external-controller.*?external-controller: &#x27;0.0.0.0:$&#123;CONTROLLER_API_PROT&#125;&#x27;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;SECRET&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^secret.*?secret: &#x27;$&#123;SECRET&#125;&#x27;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">systemctl start clash</span><br></pre></td></tr></table></figure><p>上述脚本写入 <code>/etc/cron.weekly/clash.sh</code> 并配置好相关变量后，保存退出并赋予可执行权限<br><code>chmod 0755 /etc/cron.weekly/clash.sh</code><br>至此，Linux 下 clash 配置完成啦！！</p>]]></content>
      
      
      <categories>
          
          <category> 服务器知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Clash </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
