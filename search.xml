<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git、PM2、Linux指令使用合集</title>
      <link href="/2023/11/25/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/11/25/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h1><h2 id="git使用基本指令"><a href="#git使用基本指令" class="headerlink" title="git使用基本指令"></a>git使用基本指令</h2><ul><li><p><code>git init</code>：初始化项目文件夹,为改项目的根目录下面添加.git文件</p></li><li><p><code>git add .</code> : 将改项目的所有文件添加到暂存区里面(<strong>可以方便merge和commit</strong>)</p></li><li><p><code>git commit -m &#39;&lt;commitMessage&gt;&#39;</code> : <strong>commitMessage</strong> 是你提交要说明的消息,提交的备注</p></li><li><p><code>git remote add &lt;remoteName&gt; &lt;远程地址&gt;</code> : <strong>remoteName：为远程仓库取的名称 通常是origin</strong> 本地的git文件关联到远程的Github仓库</p></li><li><p><code>git pull</code> : 拉取远程分支的信息，并可以与本地合并信息</p></li><li><p><code>git push -f </code>: 提交到远程仓库,-f是强制推送</p></li><li><p><code>git clone</code>：克隆项目到本地</p></li></ul><blockquote><p>注意：当我们使用 <code>git clone</code>若是克隆了很大的库，我们的互联网很慢，很常见的问题就是连接关闭整个克隆取消如同下面的报错</p><p>Cloning into ‘large-repository’…<br>remote: Counting objects: 20248, done.<br>remote: Compressing objects: 100% (10204&#x2F;10204), done.<br>error: RPC failed; curl 18 transfer closed with outstanding read data remaining<br>fatal: The remote end hung up unexpectedly<br>fatal: early EOF<br>fatal: index-pack failed</p></blockquote><p>要想解决这个问题我们可以先clone小一点的版本之后在<code>git fetch</code> 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://github.com/large-repository --depth 1</span><br><span class="line">git fetch --unshallow</span><br></pre></td></tr></table></figure><h2 id="git的远程分支和本地分支"><a href="#git的远程分支和本地分支" class="headerlink" title="git的远程分支和本地分支"></a>git的远程分支和本地分支</h2><p>git管理的创库最大的好处就是多人可以协同开发，这里我们可以分成远程分支(<strong>remote</strong>)和本地分支(<strong>local</strong>)<br><code>git branch -a</code> 可以观察出项目存在的那些分支,一般红色字体表示的是远程分支</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://blog-1301952160.cos.ap-shanghai.myqcloud.com/Apprehensive/post_img/git_1.png" alt="不同的分支。"/></div><span class="image-caption">不同的分支。</span></div><blockquote><p>本地分支: 本地存在的不同分支版本<br>远程分支: 项目中存在的不同的版本</p></blockquote><p>创建本地分支：<code>git checkout -b explosion:</code> 创建叫<strong>explosion</strong>分支<br>删除本地分支：<code>git branch -d explosion:</code> 删除<strong>explosion</strong>分支<br>创建远程分支：<code>git push &lt;remoteName&gt; &lt;localBranch&gt;:&lt;remoteBranch&gt;</code> 提交本地分支到想要的远程分支<br>删除远程分支：<code>git push &lt;remoteName&gt; –-delete explosion：</code>删除 explosion  </p><p>如何查看分支  </p><ul><li><code>git branch</code> : 查看本地分支</li><li><code>git branch -r</code> : 查看远程分支</li><li><code>git branch -a</code> : 查看所有分支</li><li><code>git branch -vv：</code>查看本地分支和远程分支的关联</li></ul><p>将本地分支与远程分支关联起来：<code>git branch --set-upstream-to &lt;remoteName&gt; explosion</code> 将本地分支关联到远程分支</p><p><strong>推送分支</strong></p><p><code>git push &lt;remoteName&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</code>推送指定分支到指定远程分支<br><code>git push &lt;remoteName&gt; &lt;localBranch&gt;</code> 将指定分支推送到同名远程分支<br><code>git push -u &lt;remoteName&gt; &lt;localBranch&gt;</code> 创建与本地同名远程分支</p><p><strong>拉取分支</strong></p><p><code>git pull &lt;remoteName&gt; &lt;remoteBranch&gt;:&lt;localBranch&gt;</code> 拉取远程分支到指定本地分支操作</p><h2 id="git的解决冲突merge"><a href="#git的解决冲突merge" class="headerlink" title="git的解决冲突merge"></a>git的解决冲突merge</h2><p>当我们完成自己写的代码的时候需要提交到主分支上面，有时候就不得不去merge，merge是一个技术活，很容易一不小心就把别人写的代码覆盖掉</p><blockquote><p>第一种情况就是你正在主分支上面写东西要提交到主分支上面但是你写之前不知道你的版本是否跟库里面的版本相同，你可以手动merge</p></blockquote><p><code>git add .</code><br><code>git commit -m &#39;xxx&#39;</code><br><code>git pull</code><br>输入三个指令之后会在本地生成待合并的文件，可以手动解决完冲突，重新push即可</p><blockquote><p>第二种情况就是你提交在你自己写的分支上面然后需要合并到主分支上面下面假设我自己的分支名词叫 <code>yueyun</code> 主分支名词叫<code>master</code><br>注意是<code>master</code>需要合并<code>yueyun</code> </p></blockquote><p><code>git checkout master</code> （切换到主分支master上面）<br><code>git merge yueyun</code> (将现在的master分支合并yueyun)<br><code>git push origin master</code> (把本地的分支master同步到远程)<br><strong>注意：此时的yueyun和master都是本地分支存在的不能直接用远程分支来操控,将本地分支合并完成后在提交到远程分支覆盖既可</strong></p><h2 id="git的指令回退版本"><a href="#git的指令回退版本" class="headerlink" title="git的指令回退版本"></a>git的指令回退版本</h2><p><code>git log</code> : 控制台输入git log 可以看到之前的版本信息</p><p><code>git reset -- hard HEAD^</code> : 回退到上个版本<br><code>git reset -- hard HEAD~3</code> : 回退到前3次提交之前,以此类推<br><code>git reset -- hard commit-id</code> : 回退&#x2F;进到 指定的commit的id码<br><code>commit-id</code> : 不同的仓库管理会生成不同的commit-id</p><h2 id="git的一些好用的操作"><a href="#git的一些好用的操作" class="headerlink" title="git的一些好用的操作"></a>git的一些好用的操作</h2><p>1.如果发现有人更改过仓库但是没有merge而本地的是自己辛辛苦苦写好的那么我们可以直接<br><strong><code>git push -f</code></strong> </p><h1 id="PM2指令"><a href="#PM2指令" class="headerlink" title="PM2指令"></a>PM2指令</h1><p><strong>PM2是node进程管理工具，可以利用其简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等</strong></p><ul><li><p>首先是安装<code>PM2</code> (确保你的电脑中有node环境)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br><span class="line"># or</span><br><span class="line">yarn <span class="variable language_">global</span> add pm2</span><br></pre></td></tr></table></figure></li><li><p>pm2启动应用<br><code>pm2 start app.js</code> 即启动，守护和监视应用程序的简单方法</p></li><li><p>pm2启动其他的应用程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pm2 start clash.sh</span><br><span class="line">pm2 start python-app.py --watch</span><br><span class="line">pm2 start binary-file -- --port 1520</span><br><span class="line">pm2 start yarn -n <span class="string">&quot;explosion&quot;</span> -- start</span><br><span class="line">pm2 start ./gocq</span><br><span class="line"><span class="comment"># 等等等</span></span><br></pre></td></tr></table></figure></li><li><p>常用命令的参数说明:</p><ul><li><code>--watch</code>: 监听应用目录的变化，一旦发生变化，自动重启。如要准确监听深文件，可以自定义配置文件</li><li><code>-i --instances</code>: 启用多少个实例，可以用于负载均衡，如果是<code>-i 0</code>或者<code>-i max</code>,则根据当前机器的核数确定实例数目</li><li><code>--ignore-watch</code>:排除监听的目录&#x2F;文件，可以是特定的文件名，也可以是正则。比如 <code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;</code></li><li><code>-n --name</code>：应用的名称。查看应用信息的时候可以用到。</li><li><code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li><li><code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li><li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用。</li></ul></li><li><p>管理应用程序状态很简单，下面是一些常用的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 restart app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 reload app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 stop app_name|app_id</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pm2 delete app_name|app_id</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有任务</span></span><br><span class="line">pm2 stop all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看进程状态</span></span><br><span class="line">pm2 ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个进程信息</span></span><br><span class="line">pm2 describe 0</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><ul><li><p>配置文件里的设置项，跟命令参数基本是一一对应好的</p></li><li><p>可以选择<code>yaml</code> 和 <code>json</code> 文件</p></li><li><p><code>json</code>格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。</p></li><li><p>如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如–env）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span>        <span class="punctuation">:</span> <span class="string">&quot;fis-receiver&quot;</span><span class="punctuation">,</span>  <span class="comment">// 应用名称</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span>      <span class="punctuation">:</span> <span class="string">&quot;./bin/www&quot;</span><span class="punctuation">,</span>  <span class="comment">// 实际启动脚本</span></span><br><span class="line">  <span class="attr">&quot;cwd&quot;</span>         <span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span>  <span class="comment">// 当前工作路径</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">// 监控变化的目录，一旦变化，自动重启</span></span><br><span class="line">    <span class="string">&quot;bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;routers&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignore_watch&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">// 从监控目录中排除</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="string">&quot;logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watch_options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;followSymlinks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error_file&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;./logs/app-err.log&quot;</span><span class="punctuation">,</span>  <span class="comment">// 错误日志路径</span></span><br><span class="line">  <span class="attr">&quot;out_file&quot;</span>   <span class="punctuation">:</span> <span class="string">&quot;./logs/app-out.log&quot;</span><span class="punctuation">,</span>  <span class="comment">// 普通日志路径</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;NODE_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;production&quot;</span>  <span class="comment">// 环境参数，当前指定为生产环境</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
            <tag> PM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript语言学习</title>
      <link href="/2023/11/21/Javascript%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/11/21/Javascript%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVASCRIPT-简介"><a href="#JAVASCRIPT-简介" class="headerlink" title="JAVASCRIPT 简介"></a>JAVASCRIPT 简介</h1><p>javascript最初被创建的原因是作在浏览器环境中使得浏览器的交互效果更加生动</p><p>javascript这种编程语言写出来的程序称之为<mark class="hl-label blue">脚本</mark> ，即是可以被直接写在网页的 HTML 中，在页面加载的时候自动执行。脚本被以纯文本的形式提供和执行。它们不需要特殊的准备或编译即可运行</p><p>发展到如今 JavaScript不仅能在浏览器中执行，也可以在服务端执行，甚至可以在任意存在Javascript引擎的设置中执行</p><p>浏览器中嵌入了 JavaScript 引擎，有时也称作“JavaScript 虚拟机”。</p><p>比如：<strong>V8</strong>(<code>javascript engine</code>)、<strong>SpiderMonkey</strong> 等</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>引擎是如何工作的？</strong></p></div><blockquote><p>引擎很复杂，但是基本原理很简单。</p><ul><li>引擎（如果是浏览器，则引擎被嵌入在其中）读取（“解析”）脚本。</li><li>然后，引擎将脚本转化（“编译”）为机器语言。</li><li>然后，机器代码快速地执行。</li></ul><p>引擎会对流程中的每个阶段都进行优化。它甚至可以在编译的脚本运行时监视它，分析流经该脚本的数据，并根据获得的信息进一步优化机器代码。</p></blockquote><h2 id="浏览器中的JavaScript能做什么？"><a href="#浏览器中的JavaScript能做什么？" class="headerlink" title="浏览器中的JavaScript能做什么？"></a>浏览器中的JavaScript能做什么？</h2><p>现代的 JavaScript 是一种“安全的”编程语言。它不提供对内存或 CPU 的底层访问，因为它最初是为浏览器创建的，不需要这些功能。</p><p>JavaScript 的能力很大程度上取决于它运行的环境。例如，<a href="https://wikipedia.org/wiki/Node.js">Node.js</a> 支持允许 JavaScript 读取&#x2F;写入任意文件，执行网络请求等的函数。</p><h2 id="JavaScript的上层语言"><a href="#JavaScript的上层语言" class="headerlink" title="JavaScript的上层语言"></a>JavaScript的上层语言</h2><p>不同的人想要不同的功能。JavaScript 的语法也不能满足所有人的需求。</p><p>这是正常的，因为每个人的项目和需求都不一样。</p><p>因此，最近出现了许多新语言，这些语言在浏览器中执行之前，都会被 <strong>编译</strong>（转化）成 JavaScript。</p><p>现代化的工具使得编译速度非常快且透明，实际上允许开发者使用另一种语言编写代码并会将其“自动转换”为 JavaScript。</p><p>此类语言的示例有：</p><ul><li><a href="https://coffeescript.org/">CoffeeScript</a> 是 JavaScript 的一种语法糖。它引入了更加简短的语法，使我们可以编写更清晰简洁的代码。</li><li><a href="https://www.typescriptlang.org/">TypeScript</a> 专注于添加“严格的数据类型”以简化开发，以更好地支持复杂系统的开发。由微软开发。</li><li><a href="https://flow.org/">Flow</a> 也添加了数据类型，但是以一种不同的方式。由 Facebook 开发。</li><li><a href="https://www.dartlang.org/">Dart</a> 是一门独立的语言。它拥有自己的引擎，该引擎可以在非浏览器环境中运行（例如手机应用），它也可以被编译成 JavaScript。由 Google 开发。</li><li><a href="https://brython.info/">Brython</a> 是一个 Python 到 JavaScript 的转译器，让我们可以在不使用 JavaScript 的情况下，以纯 Python 编写应用程序。</li><li><a href="https://kotlinlang.org/docs/reference/js-overview.html">Kotlin</a> 是一个现代、简洁且安全的编程语言，编写出的应用程序可以在浏览器和 Node 环境中运行。</li></ul><p>这样的语言还有很多。当然，即使我们在使用此类编译语言，我们也需要了解 JavaScript。因为了解 JavaScript 才能让我们真正明白我们在做什么。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript中的数据类型"><a href="#JavaScript中的数据类型" class="headerlink" title="JavaScript中的数据类型"></a>JavaScript中的数据类型</h2><p><strong>原始数据类型：</strong></p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a><strong>Number</strong></h3><p>number类型代表整数和浮点数<br>除了常规的数字，还包括所谓的“特殊数值（“special numeric values”）”也属于这种类型：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>  </p><ul><li><p><code>Infinity</code>表示数学概念上的无穷大∞ <code>console.log(1/0) || console.log(Infinity)</code></p></li><li><p><code>NaN</code>代表一个计算错误它是一个不正确的或者一个未定义的数学操作所得到的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;not a number&quot;</span> / <span class="number">2</span> ) <span class="comment">//NaN </span></span><br></pre></td></tr></table></figure><p><code>NaN</code> 是粘性的。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="title class_">NaN</span> + <span class="number">1</span> ); <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="number">3</span> * <span class="title class_">NaN</span> ); <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;not a number&quot;</span> / <span class="number">2</span> - <span class="number">1</span> ); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>数学运算是安全的</strong>,脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 <code>NaN</code> 的结果。</p></div></li></ul><p><strong>编写数字的更多方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> billion = <span class="number">1000000000</span></span><br><span class="line"><span class="comment">// 可以使用 _ 这种语法糖</span></span><br><span class="line">billio = <span class="number">1_000_000_000</span></span><br><span class="line"><span class="comment">// 使用 e 来缩短</span></span><br><span class="line">billio = <span class="number">1e9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7.3e9</span>)</span><br><span class="line"><span class="keyword">let</span> msc = <span class="number">0.000001</span></span><br><span class="line">msc = <span class="number">1e-6</span></span><br></pre></td></tr></table></figure><p><strong>十进制、二进制、八进制</strong></p><p><a href="https://en.wikipedia.org/wiki/Hexadecimal">十六进制</a> 数字在 JavaScript 中被广泛用于表示颜色，编码字符以及其他许多东西。所以自然地，有一种较短的写方法：<code>0x</code>，然后是数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">0xff</span> ); <span class="comment">// 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">0xFF</span> ); <span class="comment">// 255（一样，大小写没影响）</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0b11111111</span>; <span class="comment">// 二进制形式的 255</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0o377</span>; <span class="comment">// 八进制形式的 255</span></span><br></pre></td></tr></table></figure><p><strong>toString(base)</strong></p><p>方法 <code>num.toString(base)</code> 返回在给定 <code>base</code> 进制数字系统中 <code>num</code> 的字符串表示形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toString</span>(<span class="number">16</span>) );  <span class="comment">// ff</span></span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toString</span>(<span class="number">2</span>) );   <span class="comment">// 11111111</span></span><br></pre></td></tr></table></figure><p><code>base</code> 的范围可以从 <code>2</code> 到 <code>36</code>。默认情况下是 <code>10</code>。</p><p><strong>舍入</strong></p><ul><li><p>**<code>Math.floor</code>**：向下舍入 </p></li><li><p><strong><code>Math.ceil</code></strong>: 向上舍入</p></li><li><p><strong><code>Math.round</code></strong>: 最近舍入</p></li><li><p><strong><code>Math.trunc</code></strong>: 移除小数点后的所有内容</p></li><li><p><strong><code>toFixed(n)</code></strong>: 将数字舍入到小数点后 <code>n</code> 位，并以字符串形式返回结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12.34</span>;</span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toFixed</span>(<span class="number">1</span>) ); <span class="comment">// &quot;12.3&quot;</span></span><br><span class="line">num = <span class="number">12.36</span>;</span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toFixed</span>(<span class="number">1</span>) ); <span class="comment">// &quot;12.4&quot;</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">12.34</span>;</span><br><span class="line"><span class="title function_">alert</span>( num.<span class="title function_">toFixed</span>(<span class="number">5</span>) ); <span class="comment">// &quot;12.34000&quot;，在结尾添加了 0，以达到小数点后五位</span></span><br></pre></td></tr></table></figure><p>我们可以使用一元加号或 <code>Number()</code> 调用，将其转换为数字，例如 <code>+ num.toFixed(5)</code></p></li></ul><p><strong>不精确的计算：</strong><br>在内部，数字是以64位格式<code>IEEE-754</code>，如果一个如果一个数字真的很大，则可能会溢出 64 位存储，变成一个特殊的数值 <code>Infinity</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span>+<span class="number">0.2</span>==<span class="number">0.3</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>) <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>一个数字以其二进制的形式存储在内存中，一个 1 和 0 的序列。但是在十进制数字系统中看起来很简单的 <code>0.1</code>，<code>0.2</code> 这样的小数，实际上在二进制形式中是无限循环小数。  </p><p>使用二进制数字系统无法 <strong>精确</strong> 存储 <em>0.1</em> 或 <em>0.2</em>，就像没有办法将三分之一存储为十进制小数一样。<br>IEEE-754 数字格式通过将数字舍入到最接近的可能数字来解决此问题。这些舍入规则通常不允许我们看到“极小的精度损失”，但是它确实存在。</p><p>最可靠的方法是借助方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed(n)</a> 对结果进行舍入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="title function_">alert</span>( sum.<span class="title function_">toFixed</span>(<span class="number">2</span>) ); <span class="comment">// &quot;0.30&quot;</span></span><br></pre></td></tr></table></figure><p><strong>isNaN和isFinite</strong></p><ul><li><p><code>isNaN(value)</code> 将其参数转换为数字，然后测试它是否为 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">isNaN</span>(<span class="title class_">NaN</span>) ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">isNaN</span>(<span class="string">&quot;str&quot;</span>) ); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;123&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">NaN</span> === <span class="title class_">NaN</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>isFinite(value)</code> 将其参数转换为数字，如果是常规数字而不是 <code>NaN/Infinity/-Infinity</code>，则返回 <code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">isFinite</span>(<span class="string">&quot;15&quot;</span>) ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">isFinite</span>(<span class="string">&quot;str&quot;</span>) ); <span class="comment">// false，因为是一个特殊的值：NaN</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>) ); <span class="comment">// false，因为是一个特殊的值：Infinity</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>parseInt 和 pareseFloat：</strong></p><p>使用加号 <code>+</code> 或 <code>Number()</code> 的数字转换是严格的。如果一个值不完全是一个数字，就会失败：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( +<span class="string">&quot;100px&quot;</span> ); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>但在现实生活中，我们经常会有带有单位的值，例如 CSS 中的 <code>&quot;100px&quot;</code> 或 <code>&quot;12pt&quot;</code>。</p><p>它们可以从字符串中“读取”数字，直到无法读取为止。如果发生 error，则返回收集到的数字。函数 <code>parseInt</code> 返回一个整数，而 <code>parseFloat</code> 返回一个浮点数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;100px&#x27;</span>) ); <span class="comment">// 100</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseFloat</span>(<span class="string">&#x27;12.5em&#x27;</span>) ); <span class="comment">// 12.5</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;12.3&#x27;</span>) ); <span class="comment">// 12，只有整数部分被返回了</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseFloat</span>(<span class="string">&#x27;12.3.4&#x27;</span>) ); <span class="comment">// 12.3，在第二个点出停止了读取</span></span><br></pre></td></tr></table></figure><p>某些情况下，<code>parseInt/parseFloat</code> 会返回 <code>NaN</code>。当没有数字可读时会发生这种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;a123&#x27;</span>) ); <span class="comment">// NaN，第一个符号停止了读取</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>parseInt(str, radix) 的第二个参数</strong></p></div><p><code>parseInt()</code> 函数具有可选的第二个参数。它指定了数字系统的基数，因此 <code>parseInt</code> 还可以解析十六进制数字、二进制数字等的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>) ); <span class="comment">// 255</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;ff&#x27;</span>, <span class="number">16</span>) ); <span class="comment">// 255，没有 0x 仍然有效</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="built_in">parseInt</span>(<span class="string">&#x27;2n9c&#x27;</span>, <span class="number">36</span>) ); <span class="comment">// 123456</span></span><br></pre></td></tr></table></figure><p><strong>其他数学函数：</strong></p><p>**<code>Math.random()</code>**：返回一个从 0 到 1 的随机数（不包括 1</p><p><strong><code>Math.max(a, b, c...)和Math.min(a, b, c...)</code>：</strong> 从任意数量的参数中返回最大值和最小值。</p><p>**<code>Math.pow(n, power)</code>**：返回 <code>n</code> 的给定（power）次幂。</p><p><strong><code>Math.sqrt(100)</code>：</strong> 取根号</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><strong>单引号：</strong> <code>let str = &#39;hello&#39;</code></li><li><strong>双引号：</strong><code>let str = &quot;hello&quot;</code></li><li><strong>反引号：</strong> let str &#x3D; `hello`</li></ul><h4 id="字符串中的方法"><a href="#字符串中的方法" class="headerlink" title="字符串中的方法"></a>字符串中的方法</h4><h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><ul><li><p><code>toUpperCase() || toLowerCase()：</code>改变大小写</p></li><li><p><code>substring(start||0,end?length)：</code>获得子串</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>MDN已经不推荐使用 <code>substr</code> 方法了 属于遗留特性 建议使用<code>slice</code></p></div></li><li><p><code>slice(start,end): </code>参数可以为负数，不破坏原来的串返回新的串</p></li><li><p><code>replace(pattern:(string|regex,replacement:(string|function)))：</code>替换(pattern是如果是string,则只会替换第一项)  –&gt; <code>replaceAll</code></p></li><li><p><code>split(separator:(undefined||string||regex),limit?)：</code>分割字符形成数组，如果<code>separator</code>为<code>undefined</code>则会形成<code>[&#39;str&#39;]</code></p></li><li><p><code>includes(searchString,position?):boolean：</code> 查找是否包含</p></li><li><p><code>indexof(serchValue,position?):index||-1：</code>查找的字符串 <code>searchValue</code> 的第一次出现的索引，如果没有找到，则返回 <code>-1</code>。</p></li><li><p><code>lastIndexOf(serchValue,position?)</code></p></li></ul><h5 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h5><ul><li><code>at()</code></li><li><code>charAt</code></li><li><code>charCodeAt()</code></li><li><code>match(regexp)</code></li><li><code>startsWith(searchString,position?)</code></li><li><code>endsWith(...)</code></li><li><code>trim()</code></li></ul><h3 id="Boolean-逻辑类型"><a href="#Boolean-逻辑类型" class="headerlink" title="Boolean(逻辑类型)"></a>Boolean(逻辑类型)</h3><h4 id="布尔转换时"><a href="#布尔转换时" class="headerlink" title="布尔转换时"></a>布尔转换时</h4><ul><li><strong>空</strong>值：即 0、” “、undefined、NaN、null   转换为<code>false</code></li><li>其余为 <code>true</code></li></ul><blockquote><p>注意 “0” 是 true 噢</p></blockquote><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><h5 id="或运算"><a href="#或运算" class="headerlink" title="或运算(||)"></a>或运算(||)</h5><p>传统的比如 <code>if</code>中使用 就不提了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = value1 || value2 || value3</span><br><span class="line"><span class="comment">// 处理每一个操作数时，都将其转化为布尔值。如果结果是 true，就停止计算，返回这个操作数的初始值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用处理逻辑</span></span><br><span class="line">flag || <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line"><span class="literal">false</span> || <span class="title function_">alert</span>(<span class="string">&quot;printed&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="与运算"><a href="#与运算" class="headerlink" title="与运算(&amp;&amp;)"></a><strong>与运算(&amp;&amp;)</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">1</span> &amp;&amp; <span class="number">0</span> ); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">1</span> &amp;&amp; <span class="number">5</span> ); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 在处理每一个操作数时，都将其转化为布尔值。如果结果是 false，就停止计算，并返回这个操作数的初始值。</span></span><br></pre></td></tr></table></figure><h5 id="非运算"><a href="#非运算" class="headerlink" title="非运算(!)"></a><strong>非运算(!)</strong></h5><p>两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( !!<span class="string">&quot;non-empty string&quot;</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( !!<span class="literal">null</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="值比较"><a href="#值比较" class="headerlink" title="值比较"></a>值比较</h4><h5 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等"></a>严格相等</h5><p>普通的相等性检查 <code>==</code> 存在一个问题，会先转换类型才会进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>严格相等运算符 <code>===</code> 在进行比较时不会做任何的类型转换。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="number">0</span> === <span class="literal">false</span> ); <span class="comment">// false，因为被比较值的数据类型不同</span></span><br></pre></td></tr></table></figure><h5 id="null和undefined进行比较"><a href="#null和undefined进行比较" class="headerlink" title="null和undefined进行比较"></a><code>null</code>和<code>undefined</code>进行比较</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> === <span class="literal">undefined</span> ); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> &gt; <span class="number">0</span> );  <span class="comment">// (1) false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> == <span class="number">0</span> ); <span class="comment">// (2) false</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">null</span> &gt;= <span class="number">0</span> ); <span class="comment">// (3) true</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">undefined</span> &gt; <span class="number">0</span> ); <span class="comment">// false (1)</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">undefined</span> &lt; <span class="number">0</span> ); <span class="comment">// false (2)</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="literal">undefined</span> == <span class="number">0</span> ); <span class="comment">// false (3)</span></span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>特殊的<code>null</code>值不属于任何一种类型构成了独立类型，仅代表无、空、值未知等状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 表示age是未知的</span></span><br></pre></td></tr></table></figure><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型。<br>如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="title function_">alert</span>(age); <span class="comment">// 弹出 &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><p>通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值。</p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>“symbol” 值表示唯一的标识符,可以使用 <code>Symbol()</code> 来创建这种类型的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h4><p>symbol 允许我们创建对象的“隐藏”属性，代码的任何其他部分都不能意外访问或重写这些属性。</p><p>例如，如果我们使用的是属于第三方代码的 <code>user</code> 对象，我们想要给它们添加一些标识符。</p><p>我们可以给它们使用 symbol 键：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="comment">// 属于另一个代码</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">user[id] = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( user[id] ); <span class="comment">// 我们可以使用 symbol 作为键来访问数据</span></span><br></pre></td></tr></table></figure><p>我们的标识符和它们的标识符之间不会有冲突，因为 symbol 总是不同的，即使它们有相同的名字。</p><h4 id="对象字面量中的symbol"><a href="#对象字面量中的symbol" class="headerlink" title="对象字面量中的symbol"></a>对象字面量中的symbol</h4><p>如果我们要在对象字面量 <code>&#123;...&#125;</code> 中使用 symbol，则需要使用方括号把它括起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  [id]: <span class="number">123</span> <span class="comment">// 而不是 &quot;id&quot;：123</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Symbol会在for-in-中跳过"><a href="#Symbol会在for-in-中跳过" class="headerlink" title="Symbol会在for in 中跳过"></a>Symbol会在for in 中跳过</h4><p>symbol 属性不参与 <code>for..in</code> 循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  [id]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) <span class="title function_">alert</span>(key); <span class="comment">// name, age（没有 symbol）</span></span><br><span class="line"><span class="comment">// 使用 symbol 任务直接访问</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Direct: &quot;</span> + user[id]); <span class="comment">// Direct: 123</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys(user)</a> 也会忽略它们。这是一般“隐藏符号属性”原则的一部分。如果另一个脚本或库遍历我们的对象，它不会意外地访问到符号属性。</p><p>相反，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a> 会同时复制字符串和 symbol 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  [id]: <span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, user);</span><br><span class="line"><span class="title function_">alert</span>( clone[id] ); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h4 id="全局Symbol"><a href="#全局Symbol" class="headerlink" title="全局Symbol"></a>全局Symbol</h4><p>要从注册表中读取（不存在则创建）symbol，请使用 <code>Symbol.for(key)</code>。<br>该调用会检查全局注册表，如果有一个描述为 <code>key</code> 的 symbol，则返回该 symbol，否则将创建一个新 symbol（<code>Symbol(key)</code>），并通过给定的 <code>key</code> 将其存储在注册表中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从全局注册表中读取</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;id&quot;</span>); <span class="comment">// 如果该 symbol 不存在，则创建它</span></span><br><span class="line"><span class="comment">// 再次读取（可能是在代码中的另一个位置）</span></span><br><span class="line"><span class="keyword">let</span> idAgain = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">// 相同的 symbol</span></span><br><span class="line"><span class="title function_">alert</span>( id === idAgain ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor"></a>Symbol.keyFor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 name 获取 symbol</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">// 通过 symbol 获取 name</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(sym) ); <span class="comment">// name</span></span><br><span class="line"><span class="title function_">alert</span>( <span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(sym2) ); <span class="comment">// id</span></span><br></pre></td></tr></table></figure><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p><code>BigInt</code> 是一种特殊的数字类型，它提供了对任意长度整数的支持。</p><p>创建 bigint 的方式有两种：在一个整数字面量后面加 <code>n</code> 或者调用 <code>BigInt</code> 函数，该函数从字符串、数字等中生成 bigint。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigint = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br><span class="line"><span class="keyword">const</span> sameBigint = <span class="title class_">BigInt</span>(<span class="string">&quot;1234567890123456789012345678901234567890&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bigintFromNumber = <span class="title class_">BigInt</span>(<span class="number">10</span>); <span class="comment">// 与 10n 相同</span></span><br></pre></td></tr></table></figure><p><strong>非原始数据类型:</strong></p><ul><li>Object</li></ul><h1 id="规范和调试"><a href="#规范和调试" class="headerlink" title="规范和调试"></a>规范和调试</h1><h1 id="高级内容"><a href="#高级内容" class="headerlink" title="高级内容"></a>高级内容</h1><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h1 id="浏览器中的JS"><a href="#浏览器中的JS" class="headerlink" title="浏览器中的JS"></a>浏览器中的JS</h1><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本用法</title>
      <link href="/2023/11/21/Nginx%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/11/21/Nginx%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx作用"><a href="#Nginx作用" class="headerlink" title="Nginx作用"></a>Nginx作用</h1><p>Nginx 是一个高性能<strong>HTTP</strong>和反向代理的Web服务器，可以将服务器上的静态文件(如HTML、图片)等通过<strong>HTTP</strong>协议展现给客户端，占用内存少、并发能力强</p><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>进入nginx官网 (<a href="https://nginx.org/en/">https://nginx.org/en/</a>)</p><p>window系统选择下载 .exe</p><p>linux系统下载pgp</p><p>linux解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.22.1 tar.gz</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><blockquote><p>如果是使用linux上面 推荐使用apt-get 或者 yum 等 去下载，<strong>下载之前请先系统上是否存在nginx</strong><br>下面演示是在 linux发行版 ubuntu-22.04 使用 apt-get下载的nginx</p></blockquote><p><strong>如果失败请加上sudo</strong></p><h1 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h1><p>进入安装好的目录 <code>/usr/sbin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/sbin <span class="comment"># 进入可执行文件目录</span></span><br><span class="line">./nginx  <span class="comment">#启动</span></span><br><span class="line">./nginx -s stop <span class="comment">#快速停止</span></span><br><span class="line">./nginx -s quit <span class="comment">#优雅关闭，在关闭前已经接受连接请求</span></span><br><span class="line">./nginx -s reload <span class="comment">#重新加载配置</span></span><br><span class="line">./nginx -t <span class="comment">#检查nginx配置是否正确</span></span><br><span class="line">ps -ef|grep nginx <span class="comment">#查看nginx状态</span></span><br></pre></td></tr></table></figure><h1 id="Nginx的目录"><a href="#Nginx的目录" class="headerlink" title="Nginx的目录"></a>Nginx的目录</h1><p>Nginx一般安装在<code>/etc/nginx</code>目录下（安装时–prefix可指定安装目录）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">conf #配置文件</span><br><span class="line">｜-nginx.conf # 主配置文件</span><br><span class="line">｜-其他配置文件 # 可通过那个include关键字，引入到了nginx.conf生效</span><br><span class="line"></span><br><span class="line">html #静态页面</span><br><span class="line"></span><br><span class="line">logs</span><br><span class="line">｜-access.log #访问日志(每次访问都会记录)</span><br><span class="line">｜-error.log #错误日志</span><br><span class="line">｜-nginx.pid #进程号</span><br><span class="line"></span><br><span class="line">sbin</span><br><span class="line">｜-nginx #主进程文件</span><br><span class="line"></span><br><span class="line">*_temp #运行时，生成临时文件</span><br></pre></td></tr></table></figure><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Linux/image-20220502111337135.png" alt="image-20220502111337135"></p><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p><strong>简化版的Nginx.conf</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1; # 启动的worker进程数</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; #每个worker进程的连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types; #include是引入关键字，这里引入了mime.types这个配置文件（同在conf目录下，mime.types是用来定义，请求返回的content-type）</span><br><span class="line">    default_type  application/octet-stream; #mime.types未定义的，使用默认格式application/octet-stream (指浏览器)</span><br><span class="line"></span><br><span class="line">    sendfile        on; #详情，见下文</span><br><span class="line">    keepalive_timeout  65; #长链接超时时间</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一个nginx可以启用多个server（虚拟服务器） -vhost</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;#监听端口80</span><br><span class="line">        server_name  localhost;  #接收的域名,主机名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">http://localhost.com/xxoo/index.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以存在多个location 互相不干扰</span></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html; #根目录指向html目录</span><br><span class="line">            index  index.html index.htm; #域名/index 指向 index.html index.htm文件</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">http://localhost.com/50x.html</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html; # 服务器错误码为500 502 503 504，转到&quot;域名/50x.html&quot;</span><br><span class="line">        location = /50x.html &#123;# 指定到html文件夹下找/50x.htm</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sendfile</strong></p><p>打开sendfile，用户请求的数据不用再加载到nginx的内存中，而是直接发送</p><p><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502113913235.png" alt="image-20220502113913235"></p><h1 id="Nginx配置使用场景"><a href="#Nginx配置使用场景" class="headerlink" title="Nginx配置使用场景"></a>Nginx配置使用场景</h1><p>修改Nginx配置文件后，记得重新加载nginx</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx <span class="literal">-s</span> reload</span><br></pre></td></tr></table></figure><p>不同二级域名，映射到不同静态网页<br>可以写多个server字段，从前向后匹配，先匹配到那个就用那个<br>用户访问<code>pro.hedaodao.ltd</code>，就会走到第一个server配置；<code>test.hedaodao.ltd</code>走到第二个配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> http &#123;</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">....其他属性</span></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  pro.hedaodao.ltd;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/pro; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  test.hedaodao.ltd;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/test; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不同域名，映射到同一静态页面</strong></p><p>server_name</p><ul><li>可以写多个，用空格分开</li><li>使用通配符（*）</li><li>使用正则表达式（<a href="https://blog.csdn.net/yangyelin/article/details/112976539">https://blog.csdn.net/yangyelin/article/details/112976539</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http&#123; </span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  *.hedaodao.ltd  ~^[0-9]+\.hedaodao\.ltd$; # &quot;\.&quot;是转译&quot;.&quot;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html/test; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反向代理与负载均衡"><a href="#反向代理与负载均衡" class="headerlink" title="反向代理与负载均衡"></a>反向代理与负载均衡</h1><p><strong>反向代理</strong>：这种代理方式叫做，隧道代理。有性能瓶颈，因为所有的数据都经过Nginx，所以Nginx服务器的性能至关重要<br><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502173846436.png" alt="image-20220502173846436"></p><p><strong>负载均衡</strong>：把请求，按照一定算法规则，分配给多台业务服务器（即使其中一个坏了&#x2F;维护升级，还有其他服务器可以继续提供服务）<br><img src="https://hedaodao-1256075778.cos.ap-beijing.myqcloud.com/Nginx/image-20220502174023144.png" alt="image-20220502174023144"></p><h1 id="反向代理-负载均衡"><a href="#反向代理-负载均衡" class="headerlink" title="反向代理+负载均衡"></a>反向代理+负载均衡</h1><p><strong>nginx.conf配置文件</strong></p><p>启用proxy_pass，root和index字段就会失效</p><p>proxy_pass后的地址必须写完整 <code>http://xxx</code>，不支持https</p><p>当访问localhost时（Nginx服务器），网页打开的是<code>http://xxx</code>（应用服务器），网页地址栏写的还是localhost</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http&#123; </span><br><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        proxy_pass http://xxx;</span><br><span class="line">            #root   html/test; </span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义地址别名</strong></p><p>使用upstream定义一组地址【在server字段下】</p><p>访问localhost，访问都会代理到<code>192.168.174.133:80</code>和<code>192.168.174.134:80</code>这两个地址之一，每次访问这两个地址轮着切换（后面讲到，因为默认权重相等）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80; #如果是80端口，可以省略不写</span><br><span class="line">server 192.168.174.134:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        proxy_pass http://httpds;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置权重</strong></p><p>访问使用哪个地址的权重</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10;</span><br><span class="line">server 192.168.174.134:80 weight=80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10 down;</span><br><span class="line">server 192.168.174.134:80 weight=80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备用机</strong></p><p>如果<code>192.168.174.133:80</code>出现故障，无法提供服务，就用使用backup的这个机器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds&#123;</span><br><span class="line">server 192.168.174.133:80 weight=10;</span><br><span class="line">server 192.168.174.134:80 weight=80 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx-的一些报错"><a href="#Nginx-的一些报错" class="headerlink" title="Nginx 的一些报错"></a>Nginx 的一些报错</h1><p><strong>nginx: [error] invalid PID number “” in “&#x2F;run&#x2F;nginx.pid”</strong></p><p>解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>could not open error log file: open() “&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log” failed (13: Permission denied)</strong></p><p>解决办法</p><blockquote><p>在指令前面加上 <code>sudo</code> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫爬取图片</title>
      <link href="/2023/11/20/python%E7%88%AC%E8%99%AB%E5%9B%BE%E7%89%87/"/>
      <url>/2023/11/20/python%E7%88%AC%E8%99%AB%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="python爬虫简单基础"><a href="#python爬虫简单基础" class="headerlink" title="python爬虫简单基础"></a>python爬虫简单基础</h1><h2 id="使用Request库"><a href="#使用Request库" class="headerlink" title="使用Request库"></a>使用Request库</h2><p>优点：简单、发送网络请求快</p><p>缺点：容易被反爬策略针对</p><h3 id="request库的使用"><a href="#request库的使用" class="headerlink" title="request库的使用"></a>request库的使用</h3><h4 id="携带Headers去发送网络请求"><a href="#携带Headers去发送网络请求" class="headerlink" title="携带Headers去发送网络请求"></a>携带Headers去发送网络请求</h4><blockquote><p>模拟浏览器环境、欺骗服务器、获取和浏览器一致的内容</p></blockquote><p>比较重要的就是<code>ua</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">request.get(url,headers=headers)</span><br></pre></td></tr></table></figure><h4 id="发送携带参数的请求"><a href="#发送携带参数的请求" class="headerlink" title="发送携带参数的请求"></a>发送携带参数的请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yueyun&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">request.get(url,params=kw)</span><br></pre></td></tr></table></figure><blockquote><p>在 url 地址中，很多参数是没有用的，比如百度搜索的 url 地址，其中参数只有一个字段有用，其他的都可以删除</p></blockquote><h4 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h4><ul><li>登录注册</li><li>需要传输大文本内容的时候</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;yueyun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">&quot;http://www.baidu.com/&quot;</span>, data = data,headers=headers)</span><br></pre></td></tr></table></figure><h4 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h4><p><strong>使用代理原因：</strong></p><ul><li>让服务器以为不是同一个客户端在请求</li><li>隐藏真实地址</li></ul><p><strong>正向代理和反向代理：</strong></p><ul><li>正向代理：即是**”代理服务器”代理了”客户端”，去和”目标服务器”进行交互**，例如<code>VPN</code></li><li>反向代理：代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例如<code>Nginx</code></li></ul><p><strong>代理使用:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123; </span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:7890&quot;</span>, </span><br><span class="line">    <span class="string">&quot;https&quot;</span>: <span class="string">&quot;https://127.0.0.1:7890&quot;</span>, </span><br><span class="line">    &#125;</span><br><span class="line">requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>,proxies=proxies)</span><br></pre></td></tr></table></figure><h4 id="代理-IP-使用的注意点"><a href="#代理-IP-使用的注意点" class="headerlink" title="代理 IP 使用的注意点"></a>代理 IP 使用的注意点</h4><ul><li><p>反反爬<br>使用代理 ip 是非常必要的一种<code>反反爬</code>的方式，但是即使使用了代理 ip，对方服务器任然会有很多的方式来检测我们是否是一个爬虫</p><ul><li>一段时间内，检测 IP 访问的频率，访问太多频繁会屏蔽</li><li>检查 Cookie，User-Agent，Referer 等 header 参数，若没有则屏蔽</li><li>服务方购买所有代理提供商，加入到反爬虫数据库里，若检测是代理则屏蔽</li></ul><p>所以更好的方式是购买质量更高的代理，或者自己搭建代理服务器，组装自己的<code>代理IP池</code>，同时在使用的时候使用随机的方式进行选择使用，不要每次都用一个代理 ip，没事没有任何效果的</p></li><li><p>代理IP池更新</p></li></ul><h3 id="使用Request处理cookie等相关的请求"><a href="#使用Request处理cookie等相关的请求" class="headerlink" title="使用Request处理cookie等相关的请求"></a>使用Request处理cookie等相关的请求</h3><h4 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h4><ul><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 不是很安全，别人可以分析存放在本地的 cookie 并进行 cookie 欺骗。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。</li><li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ul><h4 id="处理cookie请求方式-session"><a href="#处理cookie请求方式-session" class="headerlink" title="处理cookie请求方式 - session"></a>处理cookie请求方式 - session</h4><ul><li><p>Requests提供了一个叫做<code>session</code>类，来实现客户端和服务端的<code>会话保持</code></p></li><li><p>会话保持有两个内涵：</p><ul><li>保存 cookie</li><li>实现和服务端的长连接</li></ul></li><li><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">response = session.get(url,headers)</span><br></pre></td></tr></table></figure><p>session 实例在请求了一个网站后，对方服务器设置在本地的 cookie 会保存在 session 中，下一次再使用 session 请求对方服务器的时候，会带上前一次的 cookie</p></li></ul><h4 id="处理cookie请求方式-headers"><a href="#处理cookie请求方式-headers" class="headerlink" title="处理cookie请求方式 - headers"></a>处理cookie请求方式 - headers</h4><p>headers中的cookie：</p><ul><li>使用分号 (;) 隔开</li><li>分号两边的类似 a&#x3D;b 形式的表示一条 cookie</li><li>a&#x3D;b 中，a 表示键（name），b 表示值（value）</li><li>headers 中仅仅使用了 cookie 的 name 和 value</li></ul><p>cookie 的具体组成的字段</p><p>由于 headers 中对 cookie 仅仅使用它的 name 和 value，所以在代码中我们仅仅需要 cookie 的 name 和 value 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot; Pycharm-26c2d973=dbb9b300-2483-478f-9f5a-16ca4580177e; Hm_lvt_98b9d8c2fd6608d564bf2ac2ae642948=1512607763; Pycharm-26c2d974=f645329f-338e-486c-82c2-29e2a0205c74; _xsrf=2|d1a3d8ea|c5b07851cbce048bd5453846445de19d|1522379036&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">requests.get(url,headers=headers)</span><br></pre></td></tr></table></figure><p>cookie 有过期时间，所以直接复制浏览器中的 cookie 可能意味着下一程序继续运行的时候需要替换代码中的 cookie，对应的我们也可以通过一个程序专门来获取 cookie 供其他程序使用；当然也有很多网站的 cookie 过期时间很长，这种情况下，直接复制 cookie 来使用更加简单</p><h4 id="处理cookie请求方式-使用-cookies-参数"><a href="#处理cookie请求方式-使用-cookies-参数" class="headerlink" title="处理cookie请求方式 - 使用 cookies 参数"></a>处理cookie请求方式 - 使用 cookies 参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookies = &#123;<span class="string">&quot;cookie的name&quot;</span>:<span class="string">&quot;cookie的value&quot;</span>&#125;</span><br><span class="line">requests.get(url,headers=headers,cookies=cookie_dict&#125;</span><br></pre></td></tr></table></figure><p><code>requests.utils.dict_from_cookiejar</code>: 把 cookiejar 对象转化为字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies))</span><br><span class="line"></span><br><span class="line">cookies = requests.utils.dict_from_cookiejar(response.cookies)</span><br><span class="line"><span class="built_in">print</span>(cookies)</span><br></pre></td></tr></table></figure><h3 id="Request常见参数"><a href="#Request常见参数" class="headerlink" title="Request常见参数"></a>Request常见参数</h3><p><strong>ssl证书</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.12306.cn/mormhweb/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssl.CertificateError ...</span></span><br><span class="line"><span class="comment"># 添加false</span></span><br><span class="line">response = requests.get(url,verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>超时参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(url,timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>retrying 模块的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parse.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line">headers = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop_max_attempt_number=<span class="number">3</span></span>) </span><span class="comment">#最大重试3次，3次全部报错，才会报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_parse_url</span>(<span class="params">url</span>)</span><br><span class="line">    response = requests.get(url, headers=headers, timeout=<span class="number">3</span>) <span class="comment">#超时的时候回报错并重试</span></span><br><span class="line">    <span class="keyword">assert</span> response.status_code == <span class="number">200</span> <span class="comment">#状态码不是200，也会报错并充实</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_url</span>(<span class="params">url</span>)</span><br><span class="line">    <span class="keyword">try</span>: <span class="comment">#进行异常捕获</span></span><br><span class="line">        response = _parse_url(url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="使用无头浏览器selenium"><a href="#使用无头浏览器selenium" class="headerlink" title="使用无头浏览器selenium"></a>使用无头浏览器selenium</h2><p>… </p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>… </p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>爬取 <strong><a href="https://www.vilipix.com/">vilipix</a>上面的图片</strong></p><p>需要使用到的依赖:</p><ul><li><code>pip install requests</code></li><li><code>pip install pyquery</code></li><li><code>pip install fake-useragent</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头</span></span><br><span class="line">ua = UserAgent(verify_ssl=<span class="literal">False</span>, path=<span class="string">&#x27;./fake_useragent0.1.11.json&#x27;</span>)</span><br><span class="line"><span class="comment"># 网站url</span></span><br><span class="line">base_url = <span class="string">&#x27;https://www.vilipix.com&#x27;</span></span><br><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="comment"># 获取昨天的日期，并用于构建url</span></span><br><span class="line">today_str = (datetime.date.today() + datetime.timedelta(days=-<span class="number">1</span>)).strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mark = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择要下载的榜单\n0---每日榜单\n1---每周榜单\n2---每月榜单\n&quot;</span>))</span><br><span class="line">mode = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (mark == <span class="number">0</span>):</span><br><span class="line">    mode = <span class="string">&#x27;daily&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> mark == <span class="number">1</span>:</span><br><span class="line">    mode = <span class="string">&#x27;weekly&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> mark == <span class="number">2</span>:</span><br><span class="line">    mode = <span class="string">&#x27;monthly&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入有误，即将退出程序&quot;</span>)</span><br><span class="line">    os._exit(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 分布创建属于榜单的文件夹(可以自定义更改)</span></span><br><span class="line">path_1 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_1):</span><br><span class="line">    os.mkdir(path_1)</span><br><span class="line"></span><br><span class="line">path_2 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单/<span class="subst">&#123;today&#125;</span>/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_2):</span><br><span class="line">    os.mkdir(path_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机请求头防止被封</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ua_random</span>():</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;use_agent&#x27;</span>: ua.random</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回网页内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrap_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=url, headers=ua_random())</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>不可爬取！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回具体的url地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrap_index</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/ranking?date=<span class="subst">&#123;today_str&#125;</span>&amp;mode=<span class="subst">&#123;mode&#125;</span>&amp;p=<span class="subst">&#123;page&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> scrap_page(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对页面进行解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_index</span>(<span class="params">html</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    <span class="comment"># pQuery 和 web开发中jQuery 差不多 CSS选择器</span></span><br><span class="line">    links = doc(<span class="string">&#x27;#__layout .illust-content li .illust a&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links.items():</span><br><span class="line">        <span class="comment"># 获取link标签的href属性</span></span><br><span class="line">        href = link.attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        name = href.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 详情页名字，由图片id构成，以防重名</span></span><br><span class="line">        <span class="comment"># 详情页url 拼接</span></span><br><span class="line">        detail_url = urljoin(base_url, href)</span><br><span class="line">        page_count = link(<span class="string">&#x27;.page-count span&#x27;</span>).text()</span><br><span class="line">        <span class="comment"># 惰性生成器</span></span><br><span class="line">        <span class="keyword">yield</span> detail_url, page_count, name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片 保存至本地文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">path, name, image</span>):</span><br><span class="line">    save_path = path + name + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情页内仅有一张图片时调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_index_1</span>(<span class="params">html, name, path</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    link = doc(<span class="string">&#x27;.illust-pages li a img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    image = requests.get(url=link, headers=ua_random()).content</span><br><span class="line">    download(path, name, image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情页内有超过一张图片时调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_index_more</span>(<span class="params">html, name, path</span>):</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    links = doc(<span class="string">&#x27;.illust-pages li a img&#x27;</span>)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links.items():</span><br><span class="line">        src = link.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        image_name = name + <span class="string">f&#x27;_<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        image = requests.get(url=src, headers=ua_random()).content</span><br><span class="line">        download(path, image_name, image)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载程序入口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">page</span>):</span><br><span class="line">    html = scrap_index(page)</span><br><span class="line">    details = parse_index(html)</span><br><span class="line">    <span class="keyword">for</span> detail <span class="keyword">in</span> details:</span><br><span class="line">        detail_url = detail[<span class="number">0</span>]  <span class="comment"># 详情页的url</span></span><br><span class="line">        num = detail[<span class="number">1</span>]  <span class="comment"># 详情页内图片的数量</span></span><br><span class="line">        name = detail[<span class="number">2</span>]  <span class="comment"># 给详情页命的名</span></span><br><span class="line">        detail_html = scrap_page(detail_url)</span><br><span class="line">        <span class="keyword">if</span> num == <span class="string">&#x27;1&#x27;</span>:  <span class="comment"># 第①种情况</span></span><br><span class="line">            detail_index_1(detail_html, name, path_2)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 第②种情况</span></span><br><span class="line">            path_3 = <span class="string">f&#x27;D:/vilipix<span class="subst">&#123;mode&#125;</span>榜单/<span class="subst">&#123;today&#125;</span>/<span class="subst">&#123;name&#125;</span>/&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_3):</span><br><span class="line">                os.mkdir(path_3)</span><br><span class="line">            detail_index_more(detail_html, name, path_3)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">10</span>, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>下载完毕！&#x27;</span>, <span class="string">&#x27;*&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># print(&quot;图片下载完成辣，谢谢使用！！&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 主程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pages = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>))</span><br><span class="line">    <span class="comment"># 使用多线程进行加速</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(main, pages)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图片下载完成辣，谢谢使用！！&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器配置代理</title>
      <link href="/2023/11/20/Linux%E4%BB%A3%E7%90%86/"/>
      <url>/2023/11/20/Linux%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下使用Clash科学上网"><a href="#Linux下使用Clash科学上网" class="headerlink" title="Linux下使用Clash科学上网"></a>Linux下使用Clash科学上网</h1><blockquote><p>在 Linux 服务器上通过 Clash 科学上网<br>如果出现权限不足的情况请在指令前面加上 <code>sudo</code> </p></blockquote><h2 id="安装Clash"><a href="#安装Clash" class="headerlink" title="安装Clash"></a><strong>安装<code>Clash</code></strong></h2><ul><li><p>下载当前操作系统与 CPU 架构对应的包文件，我这儿是 X86_64 平台下的Ubuntu所以对应使用的是<a href="https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz">clash-linux-amd64-v1.6.5.gz</a>即ok(当然取github上面找到不同的安装包只要能够对应也ok)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O clash.gz https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz</span><br></pre></td></tr></table></figure></li><li><p>下载好后解压安装包中 clash 到 <code>/usr/local/bin/</code> 目录下，并删除压缩包文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gzip -dc clash.gz &gt; /usr/local/bin/clash</span><br><span class="line">chmod +x /usr/local/bin/clash</span><br><span class="line">rm -f clash.gz</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件目录，并下载 MMDB 文件(注意这一步很可能失败建议直接在网上找Country.mmdb文件下载并手动上传比较好) <a href="https://github.com/Dreamacro/maxmind-geoip/releases">下载网址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/clash</span><br><span class="line">wget -O /etc/clash/Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>systemd</code> 脚本，脚本文件路径为 <code>/etc/systemd/system/clash.service</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=clash daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/local/bin/clash -d /etc/clash/</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>重载 systemctl daemon</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a><strong>配置代理</strong></h2><ul><li><p>导入已有的<code>vpn</code> 链接 (订阅链接啦) </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/clash/config.yaml [你的订阅链接]</span><br></pre></td></tr></table></figure></li><li><p>设置系统代理，添加配置文件 <code>/etc/profile.d/proxy.sh</code> 并在其中写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export https_proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export HTTP_PROXY=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">export HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure></li><li><p>重载 <code>/etc/profile</code> 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>启动 <code>clash</code> 服务，并设置为开机自动启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start clash</span><br><span class="line">systemctl enable clash</span><br></pre></td></tr></table></figure></li><li><p>测试 goolge.com 访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl google.com</span></span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;301 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=&quot;http://www.google.com/&quot;&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置web-UI"><a href="#配置web-UI" class="headerlink" title="配置web-UI"></a><strong>配置web-UI</strong></h2><ul><li><p>克隆 <a href="https://github.com/Dreamacro/clash-dashboard">clash-dashboard</a> 项目到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b gh-pages --depth 1 https://github.com/Dreamacro/clash-dashboard /opt/clash-dashboard</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>clash</code> 配置文件中 <code>external-ui</code> 的值为 <code>/opt/clash-dashboard</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/^#\&#123;0,1\&#125; \&#123;0,1\&#125;external-ui.*/external-ui: \/opt\/clash-dashboard/&quot; /etc/clash/config.yaml</span><br></pre></td></tr></table></figure></li><li><p>重启clash服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart clash</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问 <code>localhost:9090/ui</code>，其中 <code>localhost</code> 替换为 clash 部署服务器的 IP</p></li></ul><h2 id="配置定时更新订阅"><a href="#配置定时更新订阅" class="headerlink" title="配置定时更新订阅"></a>配置定时更新订阅</h2><p>使用如下脚本填写相关配置项目并放入 <code>/etc/cron.weekly</code> 目录下，每周自动更新订阅配置文件即可<br><code>sudo vim /etc/cron.weekly/clash.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅链接地址</span></span><br><span class="line">SUBSCRIBE=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">web-ui存放目录，留空则保持默认不修改</span></span><br><span class="line">WEB_UI=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API 端口，留空则保持默认不修改</span></span><br><span class="line">CONTROLLER_API_PROT=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">API 口令，留空则保持默认不修改</span></span><br><span class="line">SECRET=&quot;&quot;</span><br><span class="line"></span><br><span class="line">CLASH_CONFIG=&quot;/etc/clash/config.yaml&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ -z &quot;$&#123;SUBSCRIBE&#125;&quot; ]; then</span><br><span class="line">    echo &quot;Subscription address cannot be empty&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">systemctl stop clash</span><br><span class="line"></span><br><span class="line">wget --no-proxy -O $&#123;CLASH_CONFIG&#125; $&#123;SUBSCRIBE&#125;</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;WEB_UI&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^#\&#123;0,1\&#125; \&#123;0,1\&#125;external-ui.*?external-ui: $&#123;WEB_UI&#125;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;CONTROLLER_API_PROT&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^external-controller.*?external-controller: &#x27;0.0.0.0:$&#123;CONTROLLER_API_PROT&#125;&#x27;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;SECRET&#125;&quot; ]; then</span><br><span class="line">sed -i &quot;s?^secret.*?secret: &#x27;$&#123;SECRET&#125;&#x27;?&quot; $&#123;CLASH_CONFIG&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">systemctl start clash</span><br></pre></td></tr></table></figure><p>上述脚本写入 <code>/etc/cron.weekly/clash.sh</code> 并配置好相关变量后，保存退出并赋予可执行权限<br><code>chmod 0755 /etc/cron.weekly/clash.sh</code><br>至此，Linux 下 clash 配置完成啦！！</p>]]></content>
      
      
      <categories>
          
          <category> 服务器知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Clash </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
